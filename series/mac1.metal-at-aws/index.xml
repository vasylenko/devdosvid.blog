<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mac1.metal at AWS on devDosvid blog</title>
    <link>https://devdosvid.blog/series/mac1.metal-at-aws/</link>
    <description>Recent content in Mac1.metal at AWS on devDosvid blog</description>
    <image>
      <title>devDosvid blog</title>
      <url>https://devdosvid.blog/assets/img/websitelogo.jpg</url>
      <link>https://devdosvid.blog/assets/img/websitelogo.jpg</link>
    </image>
    <generator>Hugo -- 0.141.0</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jan 2025 00:20:04 +0100</lastBuildDate>
    <atom:link href="https://devdosvid.blog/series/mac1.metal-at-aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Auto Scaling Group for your macOS EC2 Instances fleet</title>
      <link>https://devdosvid.blog/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/</link>
      <pubDate>Sun, 24 Oct 2021 02:00:31 +0300</pubDate>
      <guid>https://devdosvid.blog/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/</guid>
      <description>Scale macOS EC2 Instances fleet with the Licence Manager and ASG services</description>
      <content:encoded><![CDATA[<p>It’s been almost a year since I started using macOS EC2 instances on AWS: there were <a href="/2021/01/19/mac1-metal-EC2-Instance-user-experience.html">ups and downs in service offerings</a> and a lot of discoveries with <a href="/2021/02/01/customizing-mac1-metal-ec2-ami.html">macOS AMI build</a> automation.</p>
<p>And I like this small but so helpful update to the offerings list of the EC2 service: with mac1.metal instances, seamless integration of Apple-oriented CI/CD with other AWS infrastructure could finally happen.</p>
<p>But while management of a single mac1.metal node (or a tiny number of ones) is not a big deal (especially when <a href="/2021/01/20/terraforming-mac1-metal-at-AWS.html">Dedicated Host support</a> was added to Terraform provider), governing the fleet of instances is still complicated.</p>
<p>Or it has been complicated until recent days.</p>
<p>With a growing number of instances, the following challenges arise:</p>
<ul>
<li>Scale mac1.metal instances horizontally</li>
<li>Automatically allocate and release Dedicated Hosts needed for instances</li>
<li>Automatically replace unhealthy instances</li>
</ul>
<p>If you have worked with AWS before, you know that Auto Scaling Group service can solve such things.</p>
<h2 id="auto-scaling-for-macos-ec2-instances">Auto Scaling for macOS EC2 Instances</h2>
<p>So how does all that work?</p>
<p>Let’s review the diagram that illustrates the interconnection between involved services:</p>
<figure>
    
    
        
        
        
        
        
        
        <img loading="lazy"
             src="/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/general-scheme_compressed_hu8961863004118525361.webp"
                 alt="Services logical interconnection"width="800"height="639" />
        
    
    <figcaption>
        <p>Services logical interconnection
            </p>
    </figcaption>
</figure>

<p>With the help of Licence Manager service and Launch Templates, you can set up EC2 Auto Scaling Group for mac1.metal and leave the automated instance provisioning to the service.</p>
<h3 id="license-configuration">License Configuration</h3>
<p>First, you need to create a License Configuration so that the Host resource group can allocate the hots.</p>
<p>Go to AWS License Manager -&gt; Customer managed licenses -&gt; Create customer-managed license.</p>
<p>Specify <strong>Sockets</strong> as the Licence type. You may skip setting the Number of Sockets. However, the actual limit of mac1.metal instances per account is regulated by Service Quota. The default number of mac instances allowed per account is 3. Therefore, consider <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html">increasing</a> this to a more significant number.</p>
<figure>
    
    
        
        
        
        
        
        
        <img loading="lazy"
             src="/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/license-configuration_compressed_hu3043406961891655149.webp"
                 alt="Licence configuration values"width="800"height="807" />
        
    
    <figcaption>
        <p>Licence configuration values
            </p>
    </figcaption>
</figure>

<h3 id="host-resource-group">Host resource group</h3>
<p>Second, create the Host resource group: AWS License Manager -&gt; Host resource groups -&gt; Create host resource group.</p>
<p>When creating the Host resource group, check “<strong>Allocate hosts automatically</strong>” and “<strong>Release hosts automatically</strong>” but leave “Recover hosts automatically” unchecked. Dedicated Host does <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html#dedicated-hosts-recovery-instances">not support host recovery</a> for mac1.metal.
However, Auto Scaling Group will maintain the desired number of instances if one fails the health check (which assumes the case of host failure as well).</p>
<p>Also, I recommend specifying “mac1” as an allowed Instance family for the sake of transparent resource management: only this instance type is permitted to allocate hosts in the group.</p>
<figure>
    
    
        
        
        
        
        
        
        <img loading="lazy"
             src="/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/host-resource-group_compressed_hu8081941916323364160.webp"
                 alt="Host resource group configuration values"width="800"height="902" />
        
    
    <figcaption>
        <p>Host resource group configuration values
            </p>
    </figcaption>
</figure>

<p>Optionally, you may specify the license association here (the Host group will pick any compatible license) or select the license you created on step one.</p>
<h3 id="launch-template">Launch Template</h3>
<p>Create Launch Template: EC2 -&gt; Launch templates -&gt; Create launch template.</p>
<p>I will skip the description of all Launch Template parameters (but here is a nice <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">tutorial</a>), if you don’t mind, and keep focus only on the items relevant to the current case.</p>
<p>Specify mac1.metal as the Instance type. Later, in Advanced details: find the <strong>Tenancy</strong> parameter and set it to “Dedicated host”; for <strong>Target host by</strong> select “Host resource group”, and once selected the new parameter <strong>Tenancy host resource group</strong> will appear where you should choose your host group; select your license in <strong>License configurations</strong> parameter.</p>
<figure>
    
    
        
        
        
        
        
        
        <img loading="lazy"
             src="/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/launch-template_compressed_hu17158554016913274308.webp"
                 alt="Launch Template configuration values"width="800"height="741" />
        
    
    <figcaption>
        <p>Launch Template configuration values
            </p>
    </figcaption>
</figure>

<h3 id="auto-scaling-group">Auto Scaling Group</h3>
<p>Finally, create the Auto Scaling Group: EC2 -&gt; Auto Scaling groups -&gt; Create Auto Scaling group.</p>
<p>The vital thing to note here — is the availability of the mac1.metal instance in particular AZ.</p>
<p>Mac instances are available in us-east-1 and <a href="https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-ec2-mac-instances-additional-regions/">7 more regions</a>, but not every Availability Zone in the region supports it. So you must figure out which AZ supports the needed instance type.</p>
<p>There is no documentation for that, but there is an AWS CLI command that can answer this question: <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/describe-instance-type-offerings.html">describe-instance-type-offerings — AWS CLI 2.3.0 Command Reference</a></p>
<p>Here is an example for the us-east-1 region:
<div class="code-snippet">
<details>
<summary markdown="span">Click here to see the code snippet</summary>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>&gt; aws ec2 describe-instance-type-offerings --location-type availability-zone-id --filters <span style="color:#79c0ff">Name</span><span style="color:#ff7b72;font-weight:bold">=</span>instance-type,Values<span style="color:#ff7b72;font-weight:bold">=</span>mac1.metal --region us-east-1 --output text
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>INSTANCETYPEOFFERINGS	mac1.metal	use1-az6	availability-zone-id
</span></span><span style="display:flex;"><span>INSTANCETYPEOFFERINGS	mac1.metal	use1-az4	availability-zone-id
</span></span></code></pre></div>
</details>
</div></p>
<p>Keep that nuance in mind when selecting a subnet for the mac1.metal instances.</p>
<p>When you know the AZ, specify the respective Subnet in the Auto Scaling Group settings, and you&rsquo;re ready to go!</p>
<h2 id="bring-infrastructure-as-code-here">Bring Infrastructure as Code here</h2>
<p>I suggest describing all that as a code. I prefer Terraform, and its AWS provider supports the needed resources. Except one.</p>
<p>As of October 2021, resources supported :</p>
<ul>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/servicequotas_service_quota">aws_servicequotas_service_quota</a></li>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/licensemanager_license_configuration">aws_licensemanager_license_configuration</a></li>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_template">aws_launch_template</a></li>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group">aws_autoscaling_group</a></li>
</ul>
<p>The Host resource group is not yet supported by the provider, unfortunately. However, we can use CloudFormation in Terraform to overcome that: describe the Host resource group as <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudformation_stack">aws_cloudformation_stack</a> Terraform resource using CloudFormation template from a file.</p>
<p>Here is how it looks like:
<div class="code-snippet">
<details>
<summary markdown="span">Click here to see the code snippet</summary>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-hcl" data-lang="hcl"><span style="display:flex;"><span><span style="color:#ff7b72">resource</span> <span style="color:#a5d6ff">&#34;aws_licensemanager_license_configuration&#34; &#34;this&#34;</span> {
</span></span><span style="display:flex;"><span>  name                     <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#ff7b72">local</span>.<span style="color:#ff7b72">full_name</span>
</span></span><span style="display:flex;"><span>  license_counting_type    <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#34;Socket&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">resource</span> <span style="color:#a5d6ff">&#34;aws_cloudformation_stack&#34; &#34;this&#34;</span> {
</span></span><span style="display:flex;"><span>  name          <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#ff7b72">local</span>.<span style="color:#ff7b72">full_name</span><span style="color:#8b949e;font-style:italic"> # the name of CloudFormation stack
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"></span>  template_body <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#ff7b72">file</span>(<span style="color:#a5d6ff">&#34;${path.module}/resource-group-cf-stack-template.json&#34;</span>)
</span></span><span style="display:flex;"><span>  parameters <span style="color:#ff7b72;font-weight:bold">=</span> {
</span></span><span style="display:flex;"><span>    GroupName <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#ff7b72">local</span>.<span style="color:#ff7b72">full_name</span><span style="color:#8b949e;font-style:italic"> # the name for the Host group, passed to CloudFormation template
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"></span>  }
</span></span><span style="display:flex;"><span>  on_failure <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#34;DELETE&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>
</details>
</div></p>
<p>And the next code snippet explains the CloudFromation template (which is the <code>resource-group-cf-stack-template.json</code> file in the code snippet above)
<div class="code-snippet">
<details>
<summary markdown="span">Click here to see the code snippet</summary>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#7ee787">&#34;Parameters&#34;</span> : {
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;GroupName&#34;</span> : {
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;Type&#34;</span> : <span style="color:#a5d6ff">&#34;String&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;Description&#34;</span> : <span style="color:#a5d6ff">&#34;The name of Host Group&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#7ee787">&#34;Resources&#34;</span> : {
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;DedicatedHostGroup&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;Type&#34;</span>: <span style="color:#a5d6ff">&#34;AWS::ResourceGroups::Group&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;Properties&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&#34;Name&#34;</span>: { <span style="color:#7ee787">&#34;Ref&#34;</span>: <span style="color:#a5d6ff">&#34;GroupName&#34;</span> },
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&#34;Configuration&#34;</span>: [
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            <span style="color:#7ee787">&#34;Type&#34;</span>: <span style="color:#a5d6ff">&#34;AWS::ResourceGroups::Generic&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#7ee787">&#34;Parameters&#34;</span>: [
</span></span><span style="display:flex;"><span>              {
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Name&#34;</span>: <span style="color:#a5d6ff">&#34;allowed-resource-types&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Values&#34;</span>: [<span style="color:#a5d6ff">&#34;AWS::EC2::Host&#34;</span>]
</span></span><span style="display:flex;"><span>              },
</span></span><span style="display:flex;"><span>              {
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Name&#34;</span>: <span style="color:#a5d6ff">&#34;deletion-protection&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Values&#34;</span>: [<span style="color:#a5d6ff">&#34;UNLESS_EMPTY&#34;</span>]
</span></span><span style="display:flex;"><span>              }
</span></span><span style="display:flex;"><span>            ]
</span></span><span style="display:flex;"><span>          },
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            <span style="color:#7ee787">&#34;Type&#34;</span>: <span style="color:#a5d6ff">&#34;AWS::EC2::HostManagement&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#7ee787">&#34;Parameters&#34;</span>: [
</span></span><span style="display:flex;"><span>              {
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Name&#34;</span>: <span style="color:#a5d6ff">&#34;allowed-host-families&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Values&#34;</span>: [<span style="color:#a5d6ff">&#34;mac1&#34;</span>]
</span></span><span style="display:flex;"><span>              },
</span></span><span style="display:flex;"><span>              {
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Name&#34;</span>: <span style="color:#a5d6ff">&#34;auto-allocate-host&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Values&#34;</span>: [<span style="color:#a5d6ff">&#34;true&#34;</span>]
</span></span><span style="display:flex;"><span>              },
</span></span><span style="display:flex;"><span>              {
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Name&#34;</span>: <span style="color:#a5d6ff">&#34;auto-release-host&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Values&#34;</span>: [<span style="color:#a5d6ff">&#34;true&#34;</span>]
</span></span><span style="display:flex;"><span>              },
</span></span><span style="display:flex;"><span>              {
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Name&#34;</span>: <span style="color:#a5d6ff">&#34;any-host-based-license-configuration&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#7ee787">&#34;Values&#34;</span>: [<span style="color:#a5d6ff">&#34;true&#34;</span>]
</span></span><span style="display:flex;"><span>              }
</span></span><span style="display:flex;"><span>            ]
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#7ee787">&#34;Outputs&#34;</span> : {
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;ResourceGroupARN&#34;</span> : {
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;Description&#34;</span>: <span style="color:#a5d6ff">&#34;ResourceGroupARN&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;Value&#34;</span> : { <span style="color:#7ee787">&#34;Fn::GetAtt&#34;</span> : [<span style="color:#a5d6ff">&#34;DedicatedHostGroup&#34;</span>, <span style="color:#a5d6ff">&#34;Arn&#34;</span>] }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>
</details>
</div></p>
<p>The <code>aws_cloudformation_stack</code> resource will export the <code>DedicatedHostGroup</code> attribute (see the code of CloudFromation template), which you will use later in the Launch Template resource.</p>
<div class="attention">
    <p>If you manage an AWS Organization, I have good news: Host groups and Licenses are supported by <a href="https://docs.aws.amazon.com/ram/latest/userguide/shareable.html">Resource Access Manager</a> service.</p>
<p>Hence, you can host all mac instances in one account and share them with other accounts — it might be helpful for costs allocation, for example. Also, check out <a href="/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/">my blog about AWS RAM</a> if you are very new to this service.</p>
<p><br>
And you can leverage the <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ec2_instance_type_offerings">aws_ec2_instance_type_offerings</a> and <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/subnet_ids">aws_subnet_ids</a> data sources to solve the “which AZ supports mac metal” puzzle.</p>

</div>
<h2 id="costs-considerations">Costs considerations</h2>
<p>License Manager is a <a href="https://aws.amazon.com/license-manager/pricing/">free of charge service</a>, as well as <a href="https://aws.amazon.com/autoscaling/pricing/">Auto Scaling</a>, and <a href="https://aws.amazon.com/about-aws/whats-new/2017/11/introducing-launch-templates-for-amazon-ec2-instances/">Launch Template</a>.</p>
<p>So it’s all about the price for mac1.metal Dedicated Host which is <a href="https://aws.amazon.com/ec2/dedicated-hosts/pricing/">$1.083 per hour</a> as of October 2021. However, <a href="https://docs.aws.amazon.com/savingsplans/latest/userguide/what-is-savings-plans.html">Saving Plans</a> can be applied.</p>
<p>Please note that the minimum allocation time for that type of host is 24 hours. Maybe someday AWS will change that to 1-hour minimum someday (fingers crossed).</p>
<h2 id="oh-so-asg">Oh. So. ASG.</h2>
<p>The Auto Scaling for mac1.metal opens new possibilities for CI/CD: you can integrate that to your favorite tool (GitLab, Jenkins, whatsoever) using AWS Lambda and provision new instances when your development/testing environments need that.</p>
<p>Or you can use other cool ASG stuff, such as Lifecycle hooks, to create even more custom scenarios.</p>
<p>Also, I want to say thanks (thanks, pal!) to <a href="https://github.com/hashicorp/terraform/issues/28531">OliverKoo</a>, who started digging into that back in April'21.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Run Ansible playbook on Mac EC2 Instances fleet with AWS Systems Manager</title>
      <link>https://devdosvid.blog/2021/05/27/run-ansible-playbook-on-mac-ec2-instances-fleet-with-aws-systems-manager/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      <guid>https://devdosvid.blog/2021/05/27/run-ansible-playbook-on-mac-ec2-instances-fleet-with-aws-systems-manager/</guid>
      <description>Configuration management for mac1.metal and mac2.metal AWS Instances</description>
      <content:encoded><![CDATA[<p>In days of containers and serverless applications, Ansible looks not such a trendy thing.</p>
<p>But still, there are cases when it helps, and there are cases when it combines very well with brand new product offerings, such as EC2 Mac instances.</p>
<p>The <a href="/2021/02/01/customizing-mac1-metal-ec2-ami.html">more I use mac1.metal</a> in AWS, the more I see that Ansible becomes a bedrock of software customization in my case.</p>
<p>And when you have a large instances fleet, the AWS Systems Manager becomes your best friend (the sooner you get along together, the better).</p>
<p>So is it possible to use Ansible playbooks for mac1.metal on a big scale, with the help of AWS Systems Manager?</p>
<h2 id="not-available-out-of-the-box">(Not) Available out of the box</h2>
<p>AWS Systems Manager (SSM hereafter) has a pre-defined, shared Document that allows running Ansible playbooks.</p>
<p>It’s called “AWS-RunAnsiblePlaybook,” and you can find it in AWS SSM → Documents → Owned by Amazon.</p>
<p>However, this Document is not quite “friendly” to macOS. When the SSM agent calls Ansible on the Mac EC2 instance, it does not recognize the Ansible installed with Homebrew (de-facto most used macOS package manager).</p>
<p>So if you try to run a command on the mac1.metal instance using this Document, you will get the following error:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>Ansible is not installed. Please install Ansible and rerun the command.
</span></span></code></pre></div><p>The root cause is trivial: the path to Ansible binary is not present on the list of paths available to the SSM agent by default.</p>
<p>There are several ways to solve that, but I believe that the most convenient one would be to create your custom Document — a slightly adjusted version of the default one provided by AWS.</p>
<h2 id="creating-own-ssm-document-for-ansible-installed-with-homebrew">Creating own SSM Document for Ansible installed with Homebrew</h2>
<p>All you need to do is clone the Document provided by AWS and change its code a little — replace the callouts of <code>ansible</code> with the full path to the binary.</p>
<p>Navigate to AWS SSM → Documents → Owned by Amazon and type <code>AWS-RunAnsiblePlaybook</code> in the search field.</p>
<p>Select the Document by pressing the circle on its top-right corner and then click Actions → Clone document.</p>
<figure>
    
    
        
        
        
        
        
        
        <img loading="lazy"
             src="/2021/05/27/run-ansible-playbook-on-mac-ec2-instances-fleet-with-aws-systems-manager/aws_ssm_document_clone_hu12668160904278774839.webp"width="800"height="476.68" />
        
    
</figure>

<p>Give the new SSM Document a name, e.g., <code>macos-arbitrary-ansible-playbook</code>, and change the <code>ansible</code> callouts (at the end of the code) with the full path to the ansible symlink made by Homebrew which is <code>/usr/local/bin/ansible</code></p>
<p>Here is the complete source code of the Document with adjusted Ansible path:</p>
<div class="code-snippet">
<details>
<summary markdown="span">Click here to see the code snippet</summary>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#7ee787">&#34;schemaVersion&#34;</span>: <span style="color:#a5d6ff">&#34;2.0&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#7ee787">&#34;description&#34;</span>: <span style="color:#a5d6ff">&#34;Use this document to run arbitrary Ansible playbooks on macOS EC2 instances. Specify either YAML text or URL. If you specify both, the URL parameter will be used. Use the extravar parameter to send runtime variables to the Ansible execution. Use the check parameter to perform a dry run of the Ansible execution. The output of the dry run shows the changes that will be made when the playbook is executed.&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#7ee787">&#34;parameters&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;playbook&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;type&#34;</span>: <span style="color:#a5d6ff">&#34;String&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;description&#34;</span>: <span style="color:#a5d6ff">&#34;(Optional) If you don&#39;t specify a URL, then you must specify playbook YAML in this field.&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;default&#34;</span>: <span style="color:#a5d6ff">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;displayType&#34;</span>: <span style="color:#a5d6ff">&#34;textarea&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;playbookurl&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;type&#34;</span>: <span style="color:#a5d6ff">&#34;String&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;description&#34;</span>: <span style="color:#a5d6ff">&#34;(Optional) If you don&#39;t specify playbook YAML, then you must specify a URL where the playbook is stored. You can specify the URL in the following formats: http://example.com/playbook.yml  or s3://examplebucket/plabook.url. For security reasons, you can&#39;t specify a URL with quotes.&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;default&#34;</span>: <span style="color:#a5d6ff">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;allowedPattern&#34;</span>: <span style="color:#a5d6ff">&#34;^\\s*$|^(http|https|s3)://[^&#39;]*$&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;extravars&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;type&#34;</span>: <span style="color:#a5d6ff">&#34;String&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;description&#34;</span>: <span style="color:#a5d6ff">&#34;(Optional) Additional variables to pass to Ansible at runtime. Enter a space separated list of key/value pairs. For example: color=red or fruits=[apples,pears]&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;default&#34;</span>: <span style="color:#a5d6ff">&#34;foo=bar&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;displayType&#34;</span>: <span style="color:#a5d6ff">&#34;textarea&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;allowedPattern&#34;</span>: <span style="color:#a5d6ff">&#34;^((^|\\s)\\w+=(\\S+|&#39;.*&#39;))*$&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;check&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;type&#34;</span>: <span style="color:#a5d6ff">&#34;String&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;description&#34;</span>: <span style="color:#a5d6ff">&#34; (Optional) Use the check parameter to perform a dry run of the Ansible execution.&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;allowedValues&#34;</span>: [
</span></span><span style="display:flex;"><span>        <span style="color:#a5d6ff">&#34;True&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a5d6ff">&#34;False&#34;</span>
</span></span><span style="display:flex;"><span>      ],
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;default&#34;</span>: <span style="color:#a5d6ff">&#34;False&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;timeoutSeconds&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;type&#34;</span>: <span style="color:#a5d6ff">&#34;String&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;description&#34;</span>: <span style="color:#a5d6ff">&#34;(Optional) The time in seconds for a command to be completed before it is considered to have failed.&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;default&#34;</span>: <span style="color:#a5d6ff">&#34;3600&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#7ee787">&#34;mainSteps&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;action&#34;</span>: <span style="color:#a5d6ff">&#34;aws:runShellScript&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;name&#34;</span>: <span style="color:#a5d6ff">&#34;runShellScript&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#7ee787">&#34;inputs&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&#34;timeoutSeconds&#34;</span>: <span style="color:#a5d6ff">&#34;{{ timeoutSeconds }}&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&#34;runCommand&#34;</span>: [
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;#!/bin/bash&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;/usr/local/bin/ansible --version&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;if [ $? -ne 0 ]; then&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34; echo \&#34;Ansible is not installed. Please install Ansible and rerun the command\&#34; &gt;&amp;2&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34; exit 1&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;fi&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;execdir=$(dirname $0)&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;cd $execdir&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;if [ -z &#39;{{playbook}}&#39; ] ; then&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34; if [[ \&#34;{{playbookurl}}\&#34; == http* ]]; then&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   wget &#39;{{playbookurl}}&#39; -O playbook.yml&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   if [ $? -ne 0 ]; then&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;       echo \&#34;There was a problem downloading the playbook. Make sure the URL is correct and that the playbook exists.\&#34; &gt;&amp;2&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;       exit 1&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   fi&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34; elif [[ \&#34;{{playbookurl}}\&#34; == s3* ]] ; then&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   aws --version&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   if [ $? -ne 0 ]; then&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;       echo \&#34;The AWS CLI is not installed. The CLI is required to process Amazon S3 URLs. Install the AWS CLI and run the command again.\&#34; &gt;&amp;2&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;       exit 1&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   fi&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   aws s3 cp &#39;{{playbookurl}}&#39; playbook.yml&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   if [ $? -ne 0 ]; then&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;       echo \&#34;Error while downloading the document from S3\&#34; &gt;&amp;2&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;       exit 1&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   fi&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34; else&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   echo \&#34;The playbook URL is not valid. Verify the URL and try again.\&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34; fi&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;else&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34; echo &#39;{{playbook}}&#39; &gt; playbook.yml&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;fi&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;if  [[ \&#34;{{check}}\&#34; == True ]] ; then&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   /usr/local/bin/ansible-playbook -i \&#34;localhost,\&#34; --check -c local -e \&#34;{{extravars}}\&#34; playbook.yml&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;else&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;   /usr/local/bin/ansible-playbook -i \&#34;localhost,\&#34; -c local -e \&#34;{{extravars}}\&#34; playbook.yml&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a5d6ff">&#34;fi&#34;</span>
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>
</details>
</div>
<h2 id="applying-ansible-playbook-to-the-fleet-of-mac1metal">Applying Ansible playbook to the fleet of mac1.metal</h2>
<p>Let’s give our new SSM Document a try! (I suppose you have at least one mac1 instance running, right?)</p>
<p>In AWS SSM, go to the Run Command feature, then click on the Run Command button.</p>
<p>On the new panel, type the name of your Document (<code>macos-arbitrary-ansible-playbook</code> in this example) in the search field and press enter.</p>
<p>Select the Document, and you’ll see its parameters and settings.</p>
<p>The rest is self-explanatory. Enter either a playbook code or a link to the source file, add extra variables if needed, and select the target host or a filtered bunch (I like that feature with tags filtering!). Finally, click on the “Run” orange button to apply your playbook.</p>
<p>That’s it! Now you can make all your ansible-playbook dreams come true! 😁</p>
]]></content:encoded>
    </item>
    <item>
      <title>Customizing mac1.metal EC2 AMI — new guts, more glory</title>
      <link>https://devdosvid.blog/2021/02/01/customizing-mac1.metal-ec2-ami-new-guts-more-glory/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://devdosvid.blog/2021/02/01/customizing-mac1.metal-ec2-ami-new-guts-more-glory/</guid>
      <description>How to build macOS EC2 Instance AMI for CI/CD using Ansible and Packer</description>
      <content:encoded><![CDATA[<p>I guess macOS was designed for a user, not for the ops or engineers, so this is why its customization and usage for CI/CD are not trivial (compared to something Linux-based). A smart guess, huh?</p>
<h1 id="configuration-management">Configuration Management</h1>
<p>Native Apple&rsquo;s Mobile device management (a.k.a MDM) and Jamf is probably the most potent combination for macOS configuration. But as much as it&rsquo;s mighty, it is a cumbersome combination, and Jamf is not free.</p>
<p>Then we have Ansible, Chef, Puppet, SaltStack — they all are good with Linux, but what about macOS?</p>
<p>I tried to search for use cases of mentioned CM tools for macOS. However, I concluded that they wrap the execution of native macOS command-line utilities most of the time.</p>
<p>And if you search for the &lsquo;macos&rsquo; word in Chef Supermarket or Puppet Forge, you won&rsquo;t be impressed by the number of actively maintained packages. Although, here is a motivating article about using Chef <a href="https://pspdfkit.com/blog/2016/chef-on-macos/">automating-macos-provisioning-with-chef</a> if you prefer it. I could not find something similar and fresh for Puppet, so I am sorry, Puppet fans.</p>
<p>That is why I decided to follow the KISS principle and chose Ansible.</p>
<p>It&rsquo;s easy to write and read the configuration, it allows to group tasks and to add execution logic <del>, and it feels more DevOps executing shell commands inside Ansible tasks instead of shell scripts; I know you know that 😂</del></p>
<p>By the way, Ansible Galaxy does not have many management packages for macOS, either. But thankfully, it has the basics:</p>
<ul>
<li><a href="https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_module.html#ansible-collections-community-general-homebrew-module">homebrew</a> with <a href="https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_cask_module.html#ansible-collections-community-general-homebrew-cask-module">homebrew_cask</a> and <a href="https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_tap_module.html#ansible-collections-community-general-homebrew-tap-module">homebrew_tap</a> — to install software</li>
<li><a href="https://docs.ansible.com/ansible/latest/collections/community/general/launchd_module.html#ansible-collections-community-general-launchd-module">launchd</a> — to manage services</li>
<li><a href="https://docs.ansible.com/ansible/latest/collections/community/general/osx_defaults_module.html#ansible-collections-community-general-osx-defaults-module">osx_defaults</a> — to manage some user settings (not all!)</li>
</ul>
<p>I used Ansible to build the macOS AMI for CI/CD, so here are some tips for such a case.</p>
<p><em>Some values are hardcoded intentionally in the code examples for the sake of simplicity and easy reading. You would probably want to parametrize them.</em></p>
<h2 id="xcode-installation-example">Xcode installation example</h2>
<p>The following tasks will help you to automate the basics.</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">Install Xcode</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span><span style="color:#7ee787">shell</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;xip --expand Xcode.xip&#34;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span><span style="color:#7ee787">args</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span><span style="color:#7ee787">chdir</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">/Applications</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">Accept License Agreement</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">shell</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -license accept&#34;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">Accept License Agreement</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">shell</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -runFirstLaunch&#34;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">Switch into newly installed Xcode context</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">shell</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;xcode-select --switch /Applications/Xcode.app/Contents/Developer&#34;</span><span style="color:#6e7681">
</span></span></span></code></pre></div><h2 id="example-of-software-installation-with-brew">Example of software installation with Brew</h2>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">Install common build software</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">community.general.homebrew</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;{{ item }}&#34;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#7ee787">state</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">latest</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">loop</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>- <span style="color:#a5d6ff">swiftlint</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>- <span style="color:#a5d6ff">swiftformat</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>- <span style="color:#a5d6ff">wget</span><span style="color:#6e7681">
</span></span></span></code></pre></div><h2 id="screensharing-remote-desktop-configuration-example">ScreenSharing (remote desktop) configuration example</h2>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">Turn On Remote Management</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">shell</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;./kickstart -activate -configure -allowAccessFor -specifiedUsers&#34;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">args</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#7ee787">chdir</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">Enable Remote Management for CI user</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">shell</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;./kickstart -configure -users ec2-user -access -on -privs -all&#34;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">args</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#7ee787">chdir</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/</span><span style="color:#6e7681">
</span></span></span></code></pre></div><p>Shell rulez, yes.</p>
<h1 id="building-the-ami">Building the AMI</h1>
<video class="animation" autoplay loop muted playsinline>
    <source src="ami-build.webm" type="video/webm">
</video>


<p><a href="https://www.packer.io/docs/builders/amazon/ebs">Packer by HashiCorp</a>, of course.</p>
<p>I would love to compare Packer with EC2 Image Builder, but it <a href="https://docs.aws.amazon.com/imagebuilder/latest/userguide/what-is-image-builder.html#image-builder-os">does not support macOS</a> yet (as of Feb'21).</p>
<p>Packer configuration is straightforward, so I want to highlight only the things specific to the &ldquo;mac1.metal&rdquo; use case.</p>
<h2 id="timeouts">Timeouts</h2>
<p>As I mentioned in the <a href="/2021/01/19/mac1-metal-EC2-Instance-user-experience.html">previous article</a>, the creation and deletion time of the &ldquo;mac1.metal&rdquo; Instance is significantly bigger than Linux. That is why you should raise the polling parameters for the builder.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#a5d6ff">&#34;aws_polling&#34;</span><span style="color:#f85149">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&#34;delay_seconds&#34;</span>: <span style="color:#a5d6ff">30</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&#34;max_attempts&#34;</span>: <span style="color:#a5d6ff">60</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And it would be best if you also increased the SSH timeout:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>  <span style="color:#a5d6ff">&#34;ssh_timeout&#34;</span><span style="color:#f85149">:</span> <span style="color:#a5d6ff">&#34;1h&#34;</span>
</span></span></code></pre></div><p>Fortunately, Packer&rsquo;s AMI builder does not require an explicit declaration of the Dedicated Host ID. So you can just reference the same subnet where you allocated the Host, assuming you did it with the enabled &ldquo;Auto placement&rdquo; parameter during the host creation.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>  <span style="color:#a5d6ff">&#34;tenancy&#34;</span><span style="color:#f85149">:</span> <span style="color:#a5d6ff">&#34;host&#34;</span><span style="color:#f85149">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a5d6ff">&#34;subnet_id&#34;</span><span style="color:#f85149">:</span> <span style="color:#a5d6ff">&#34;your-subnet-id&#34;</span>
</span></span></code></pre></div><h2 id="provisioning">Provisioning</h2>
<p>Packer has <a href="https://www.packer.io/docs/provisioners/ansible">Ansible Provisioner</a> that I used for the AMI. Its documentation is also very clean and straightforward.</p>
<p>But it is still worth mentioning that if you want to parametrize the Ansible playbook, then the following configuration example will be handy:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>  <span style="color:#a5d6ff">&#34;extra_arguments&#34;</span><span style="color:#f85149">:</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#34;--extra-vars&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#34;your-variable-foo=your-value-bar]&#34;</span>
</span></span><span style="display:flex;"><span>  ]<span style="color:#f85149">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a5d6ff">&#34;ansible_env_vars&#34;</span><span style="color:#f85149">:</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#34;ANSIBLE_PYTHON_INTERPRETER=auto_legacy_silent&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#34;ANSIBLE_OTHER_ENV_VARIABLE=other_value&#34;</span>
</span></span><span style="display:flex;"><span>  ]
</span></span></code></pre></div><h1 id="configuration-at-launch">Configuration at launch</h1>
<p>If you&rsquo;re familiar with AWS EC2, you probably know what the Instance <code>user data</code> is.</p>
<p>A group of AWS developers made something similar for the macOS: <a href="https://github.com/aws/ec2-macos-init">EC2 macOS Init</a>.</p>
<p>It does not support <code>cloud-init</code> as on Linux-based Instances, but it can run shell scripts, which is quite enough.</p>
<p>EC2 macOS Init utility is a Launch Daemon (macOS terminology) that runs on behalf of the <code>root</code> user at system boot. It executes the commands according to the so-called Priority Groups, or the sequence in other words.</p>
<p>The number of the group corresponds to the execution order. You can put several tasks into a single Priority Group, and the tool will execute them simultaneously.</p>
<p>EC2 macOS Init uses a human-readable configuration file in <code>toml</code> format.</p>
<p>Example:</p>
<pre tabindex="0"><code>[[Module]]
  Name = &#34;Create-some-folder&#34;
  PriorityGroup = 3
  FatalOnError = false 
  RunPerInstance = true 
  [Module.Command]
    Cmd = [&#34;mkdir&#34;, &#34;/Users/ec2-user/my-directory&#34;] 
    RunAsUser = &#34;ec2-user&#34;
    EnvironmentVars = [&#34;MY_VAR_FOO=myValueBar&#34;]
</code></pre><p>I should clarify some things here.</p>
<p>Modules — a set of pre-defined modules for different purposes. It is something similar to the Ansible modules.</p>
<p>You can find the list of available modules here <a href="https://github.com/aws/ec2-macos-init/tree/master/lib/ec2macosinit">ec2-macos-init/lib/ec2macosinit</a></p>
<p>The <code>RunPerInstance</code> directive controls whether a module should run. There are three of such directives, and here is what they mean:</p>
<ul>
<li><code>RunPerBoot</code> — module will run at every system boot</li>
<li><code>RunPerInstance</code> — module will run once for the Instance. Each Instance has a unique ID; the init tool fetches it from the AWS API before the execution and keeps its execution history per Instance ID. When you create a new Instance from the AMI, it will have a unique ID, and the module will run again.</li>
<li><code>RunOnce</code> — module will run only once, despite the instance ID change</li>
</ul>
<p>I mentioned the execution history above. When EC2 macOS Init runs on the Instance first time, it creates a unique directory with the name per Instance ID to store the execution history and user data copy.</p>
<p><code>RunPerInstance</code> and <code>RunOnce</code> directives depend on the execution history, and modules with those directives will run again on the next boot if the previous execution failed. It was not obvious to me why RunOnce keeps repeating itself every boot until I dug into <a href="https://github.com/aws/ec2-macos-init/blob/master/lib/ec2macosinit/module.go#L110">the source code</a>.</p>
<p>Finally, there is a module for user data. It runs at the end by default (priority group #4) and pulls the user data script from AWS API before script execution.</p>
<p>I suggest looking into the default <a href="https://github.com/aws/ec2-macos-init/blob/master/configuration/init.toml">init.toml</a> configuration file to get yourself more familiar with the capabilities of the tool.</p>
<p>The init tool can also clear its history, which is useful for the new AMI creation.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>ec2-macos-init clean -all
</span></span></code></pre></div><p>And you can run the init manually for debugging purposes.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>ec2-macos-init run
</span></span></code></pre></div><p>You can also combine the EC2 macOS Init actions (made by modules) with your script in user data for more accurate nontrivial configurations.</p>
<h1 id="wrapping-up">Wrapping up</h1>
<p>As a whole, building and operating macOS-based AMI does not differ from AMI management for other platforms.</p>
<p>There are the same principle stages: prepare, clear, build, execute deployment script (if necessary). Though, the particular implementation of each step has its nuances and constraints.</p>
<p>So the whole process may look as follows:</p>
<ul>
<li>Provision and configure needed software with Ansible playbook</li>
<li>Clean-up system logs and EC2 macOS Init history (again, with Ansible task)</li>
<li>Create the AMI</li>
<li>Add more customizations at launch with EC2 macOS Init modules and user data (that also executes your Ansible playbook or shell commands)</li>
</ul>
<p>Getting into all this was both fun and interesting. Sometimes painful, though. 😆</p>
<p>I sincerely hope this article was helpful to you. Thank you for reading!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Terraforming mac1.metal at AWS</title>
      <link>https://devdosvid.blog/2021/01/20/terraforming-mac1.metal-at-aws/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://devdosvid.blog/2021/01/20/terraforming-mac1.metal-at-aws/</guid>
      <description>How to manage MacOS EC2 Instances with Terraform</description>
      <content:encoded><![CDATA[<div class="updatenotice">
    Updated on the 23rd of October, 2021: Terraform AWS provider now <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_host">supports</a> Dedicated Hosts natively
</div>
<p>In November 2021, AWS <a href="https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/">announced</a> the support for Mac mini instances.</p>
<p>I believe this is huge, even despite the number of constraints this solution has. This offering opens the door to seamless macOS CI/CD integration into existing AWS infrastructure.</p>
<p>So here is a quick-start example of creating the dedicated host and the instance altogether using Terraform.</p>
<p>I intentionally used some hardcoded values for the sake of simplicity in the example.</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-hcl" data-lang="hcl"><span style="display:flex;"><span><span style="color:#ff7b72">resource</span> <span style="color:#a5d6ff">&#34;aws_ec2_host&#34; &#34;example_host&#34;</span> {
</span></span><span style="display:flex;"><span>  instance_type     <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#34;mac1.metal&#34;</span>
</span></span><span style="display:flex;"><span>  availability_zone <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#34;us-east-1a&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">resource</span> <span style="color:#a5d6ff">&#34;aws_instance&#34; &#34;example_instance&#34;</span> {
</span></span><span style="display:flex;"><span>  ami           <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#ff7b72">data</span>.<span style="color:#ff7b72">aws_ami</span>.<span style="color:#ff7b72">mac1metal</span>.<span style="color:#ff7b72">id</span>
</span></span><span style="display:flex;"><span>  host_id       <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#ff7b72">aws_ec2_host</span>.<span style="color:#ff7b72">example_host</span>.<span style="color:#ff7b72">id</span>
</span></span><span style="display:flex;"><span>  instance_type <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#34;mac1.metal&#34;</span>
</span></span><span style="display:flex;"><span>  subnet_id     <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#ff7b72">data</span>.<span style="color:#ff7b72">aws_subnet</span>.<span style="color:#ff7b72">example_subnet</span>.<span style="color:#ff7b72">id</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">data</span> <span style="color:#a5d6ff">&#34;aws_subnet&#34; &#34;example_subnet&#34;</span> {
</span></span><span style="display:flex;"><span>  availability_zone <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#34;us-east-1a&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff7b72">filter</span> {
</span></span><span style="display:flex;"><span>    name   <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#34;tag:Tier&#34;</span><span style="color:#8b949e;font-style:italic"> # you should omit this filter if you don&#39;t distinguish your subnets on private and public 
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"></span>    values <span style="color:#ff7b72;font-weight:bold">=</span> [<span style="color:#a5d6ff">&#34;private&#34;</span>]
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">data</span> <span style="color:#a5d6ff">&#34;aws_ami&#34; &#34;mac1metal&#34;</span> {
</span></span><span style="display:flex;"><span>  owners      <span style="color:#ff7b72;font-weight:bold">=</span> [<span style="color:#a5d6ff">&#34;amazon&#34;</span>]
</span></span><span style="display:flex;"><span>  most_recent <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#ff7b72">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff7b72">filter</span> {
</span></span><span style="display:flex;"><span>    name   <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#34;name&#34;</span>
</span></span><span style="display:flex;"><span>    values <span style="color:#ff7b72;font-weight:bold">=</span> [<span style="color:#a5d6ff">&#34;amzn-ec2-macos-11*&#34;</span>]<span style="color:#8b949e;font-style:italic"> # get latest BigSur AMI
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"></span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Simple as that, yes. Now, you can integrate it into your CI system and have the Mac instance with the underlying host in a bundle.
<div class="attention">
    Pro tip: you can leverage the <code>aws_ec2_instance_type_offerings</code> <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ec2_instance_type_offerings">Data Source</a> and use its output with <code>aws_subnet</code> source to avoid availability zone hardcoding.
</div></p>
<p>To make the code more uniform and reusable, you can wrap it into a <a href="/2020/09/09/terraform-modules-explained.html">Terraform module</a> that accepts specific parameters (such as <code>instance_type</code> or <code>availability_zone</code>) as input variables.</p>
]]></content:encoded>
    </item>
    <item>
      <title>mac1.metal and mac2.metal EC2 Instances — user experience</title>
      <link>https://devdosvid.blog/2021/01/19/mac1.metal-and-mac2.metal-ec2-instances-user-experience/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://devdosvid.blog/2021/01/19/mac1.metal-and-mac2.metal-ec2-instances-user-experience/</guid>
      <description>Apple macOS development ecosystem with the power of AWS Cloud</description>
      <content:encoded><![CDATA[<p>This is the review of EC2 Mac instances, <strong>mac1.metal</strong> and <strong>mac2.metal</strong> — the new EC2 instance types that enables macOS workloads on AWS.</p>
<div class="updatenotice">
    <strong>Updated in June 2022</strong>: new information added about the offering — more cool stuff 🤩
</div>
<p>AWS announced EC2 macOS instances based on the Intel CPU on 30 November 2020.</p>
<p>After a year and a half, the M1 Mac Instances arrived (7 July 2022).</p>
<p>Some basic information about the Mac EC2 first:</p>
<ul>
<li>
<p>The <strong>mac1.metal</strong> instances are Intel-based</p>
<p>12 vCPU, 32 GiB RAM | 10 Gbps Network and 8 Gbps EBS bandwidth</p>
</li>
<li>
<p>The <strong>mac2.metal</strong> instances are powered by M1 Apple Silicon processors.</p>
<p>8 vCPU, 16 GiB RAM, 16 core Apple Neural Engine | 10 Gbps Network and 8 Gbps EBS bandwidth</p>
</li>
<li>
<p>The Instance must be placed onto a <a href="https://aws.amazon.com/ec2/dedicated-hosts/">Dedicated Host</a> because these are physical Apple Mac minis.</p>
</li>
<li>
<p>AWS has integrated the <a href="https://aws.amazon.com/ec2/nitro/">Nitro System</a> to make Macs work as EC2 instances and connect them with many other services.</p>
<p>Mac minis are connected to the AWS Nitro via Thunderbolt, just a fun fact.</p>
</li>
<li>
<p>You don&rsquo;t pay anything for the Instance itself, but you pay for the Dedicated Host leasing, and the minimum lease time is 24 hours.</p>
</li>
</ul>
<div class="substack-embedded-container">
    <h3>Subscribe to blog updates!</h3>
    <iframe title="Substack" class="substack-embedded-iframe" src="https://devdosvid.substack.com/embed" height="250"
            loading="lazy"></iframe>
</div>
<h2 id="ec2-mac-instance-prices-june-2022">EC2 Mac Instance Prices (June 2022)</h2>
<p>On-demand pricing (us-east-1, North Virginia:</p>
<ul>
<li>mac1.metal costs 1.083 USD per hour or about 780 USD per month</li>
<li>mac2.metal costs 0.65 USD per hour or about 470 USD per month</li>
</ul>
<div class="attention">
    The mac2.metal costs 40% less compared to the mac1.metal
</div>
<p>Since the minimal leas time for the mac*.metal dedicated host is 24 hours, the first launch of the Instance is always costly, mind that while testing.</p>
<p>One day of mac1.metal usage costs 26 USD</p>
<p>One day of mac2.metal usage costs 15.6 USD</p>
<p>To save yourself some money, you can use <a href="https://aws.amazon.com/savingsplans/compute-pricing/">Savings Plans</a>, both Instance and Compute, and save up to 44% off On-Demand pricing.</p>
<p>For example, with the one-year commitment, partial 50% upfront payment, and the Instance Savings pricing model, you can get the 20% lower price per hour:</p>
<ul>
<li>mac1.metal — 0.867 USD</li>
<li>mac2.metal — 0.52 USD</li>
</ul>
<p>Feel free to play with the numbers in the <a href="https://calculator.aws/#/createCalculator/EC2DedicatedHosts">Dedicated Host Pricing Calculator</a></p>
<h2 id="supported-operating-systems-june-2022">Supported Operating Systems (June 2022)</h2>
<ul>
<li>macOS Mojave 10.14.x (mac1.metal only)</li>
<li>macOS Catalina 10.15.x (mac1.metal only)</li>
<li>macOS Big Sur 11.x</li>
<li>macOS Monterey 12.x</li>
</ul>
<h2 id="what-can-it-do">What can it do</h2>
<p>Here is a list of some features that the mac1.metal and mac2.metal instances have:</p>
<ul>
<li>
<p>It lives in your VPC because it is an EC2 Instance, so you can access many other services.</p>
</li>
<li>
<p>For EBS, it supports the attachment of up to 16 volumes for mac1 and 10 for mac2.</p>
</li>
<li>
<p>It supports SSM Agent and Session Manager.</p>
</li>
<li>
<p>It has several AWS tools pre-installed: AWS CLI, SSM Agent, EFS Utils, and more.</p>
</li>
<li>
<p>It has pre-installed Enhanced Network Interface drivers. My test upload/download to S3 was about 300GB/s.</p>
</li>
<li>
<p>It can report CPU metrics to CloudWatch.</p>
</li>
<li>
<p>It supports <a href="https://devdosvid.blog/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/">AutoScaling</a> 🚀</p>
</li>
<li>
<p>And you can share the instances using <a href="https://devdosvid.blog/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/">AWS Resource Access Manager</a>.</p>
<p>For example, you can have a dedicated AWS account used solely as a MacOS-based farm in your organization where instances are shared with other accounts.</p>
</li>
<li>
<p>Although there is a local SSD disk available, EC2 Mac can boot only from the EBS</p>
</li>
</ul>
<div class="attention">
    <p>The built-it physical SSD is still there and yours to use: build-cache, temporary storage, etc.</p>
<p>However, AWS does not manage or support the Apple hardware&rsquo;s internal SSD. So there is no guarantee for data persistency.</p>

</div>
<h2 id="what-cant-it-do">What can&rsquo;t it do</h2>
<ul>
<li>It can&rsquo;t recognize the attached EBS if you connected it while the instance was running — you must reboot the instance to make it visible.</li>
<li>It does not recognize the live resize of EBS either — you must reboot the instance so resize change can take effect.</li>
<li>And the same relates to the Elastic Network Interfaces — attach and reboot the instance to apply it.</li>
<li>It does not support several services that rely on additional custom software, such as &ldquo;EC2 Instance Connect&rdquo; and &ldquo;AWS Inspect.&rdquo; But I think that AWS will add macOS distros for those soon.</li>
</ul>
<p>As of July 2022, mac2.metal is not supported by Host Resource Groups. Therefore you cannot use mac2.metal Instances in Auto Scaling Groups. But AWS support says they are working on that, so fingers crossed!</p>
<h2 id="launching-the-instance">Launching the Instance</h2>
<figure>
    
    
        
        
        
        
        
        
        <img loading="lazy"
             src="/2021/01/19/mac1.metal-and-mac2.metal-ec2-instances-user-experience/launch_hu2922766104425326468.webp"width="400"height="200" />
        
    
</figure>

<p>Jeff Bar <a href="https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/">published</a> an excellent how-to about kickstart of the &ldquo;mac1.metal&rdquo;, so I will focus on things he did not mention.</p>
<p>Once you allocated the Dedicated Host and launched an Instance, the underlying system connects the EBS with a root file system to the Mac Mini.</p>
<p>The Mac metal Instances can boot from the EBS-backed macOS AMIs only.</p>
<p>If you specified the EBS size to be more than AMI&rsquo;s default, you need to resize the disk inside the system manually after the boot <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>The time from the Instance launch until you can SSH into it varies between 5 and 20 minutes.</p>
<p>You have the option to access it over SSH with your private key. For example, if you need to set up Screen Sharing, you must allow it through the &ldquo;kickstart&rdquo; command-line utility and set the user password <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="customizing-the-instance">Customizing the Instance</h2>
<p><figure>
    
    
        
        
        
        
        
        
        <img loading="lazy"
             src="/2021/01/19/mac1.metal-and-mac2.metal-ec2-instances-user-experience/customize_hu13174262953532247300.webp"width="400"height="200" />
        
    
</figure>

I wrote a separate post about mac1.metal AMI customization and creation, so check it out!</p>
<p><a href="https://devdosvid.blog/2021/02/01/customizing-mac1.metal-ec2-ami-new-guts-more-glory/"><strong>Customizing mac1.metal EC2 AMI — new guts, more glory</strong></a></p>
<p>Though, I would like to mention two things here:</p>
<ol>
<li>System updates are disabled by default in the macOS AMIs provided by AWS.</li>
</ol>
<p>But you can use them with no issues. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo softwareupdate --install --all
</span></span></code></pre></div><ol start="2">
<li>It is possible to set a custom screen resolution when connected to the instance using native ScreenSharing or any other VNC-compatible software.</li>
</ol>
<p>There are many tools, but AWS suggests the <a href="https://github.com/jakehilborn/displayplacer">displayplacer</a>.</p>
<h2 id="destroying-the-instance">Destroying the Instance</h2>
<p><figure>
    
    
        
        
        
        
        
        
        <img loading="lazy"
             src="/2021/01/19/mac1.metal-and-mac2.metal-ec2-instances-user-experience/cleanup_hu15869239200421019745.webp"width="400"height="200" />
        
    
</figure>

Such an easy thing to do, right? Well, it depends.</p>
<p>The complex Instance scrubbing process begins when you click on the &ldquo;Terminate&rdquo; item in the Instance actions menu.</p>
<p>AWS wants to ensure that anyone who uses the Host (Mac mini) after you will get your data stored neither on disks (including the physical SSD mentioned earlier) nor inside memory or NVRAM, nor anywhere else.</p>
<p>AWS does not share many details of this scrubbing process, but it takes more than an hour to complete.</p>
<p>When scrubbing is started, the Dedicated Host transitions to the Pending state.</p>
<p>Dedicated Host transitions to Available state once scrubbing is finished. But you must wait for another 10-15 minutes to be able to release it finally.</p>
<p>I don&rsquo;t know why they set the Available state value earlier than the Host is available for operations, but this is how it works now (Jan'21).</p>
<p>Therefore, you can launch the next Instance on the same Host no earlier than ~1,5 hours after you terminated the previous one. That doesn&rsquo;t seem very pleasant in the first couple of weeks, but you will get used to it. 😄</p>
<p>And again: you can release the &ldquo;mac1.metal&rdquo; Dedicated Host no earlier than 24 hours after it was allocated. So plan your tests wisely.</p>
<div class="attention">
    If the lease time of a host is more than 24 hours, you don’t need to wait for the scrubbing process to finish to release that host.
</div>
<h2 id="legal-things">Legal things</h2>
<p>It is a bit tricky thing, but in short words:</p>
<ul>
<li>you are allowed to use the Instances solely for developer purposes</li>
<li>you must agree to all software EULAs on the system</li>
</ul>
<p>Here is the license agreement of the macOS Monterey if you want to deal with it like a pro — <a href="https://www.apple.com/legal/sla/docs/macOSMonterey.pdf">link</a>.</p>
<h2 id="some-more-cool-stuff-to-check">Some more cool stuff to check:</h2>
<p><a href="https://github.com/aws/ec2-macos-init">EC2 macOS Init</a> launch daemon, which initializes Mac instances.
<a href="https://github.com/aws/homebrew-aws">EC2 macOS Homebrew Tap</a> (Third-Party Repository) with several management tools which come pre-installed into macOS AMI from AWS.</p>
<p>Indeed it is powerful, and it has its trade-offs, such as price and some technical constraints. But it is an actual macOS device natively integrated into the AWS environment. So I guess it is worth to be tried!</p>
<p>Thanks for reading this! Stay tuned for more user experience feedback about baking custom AMIs, automated software provisioning with Ansible, and other adventures with mac1.metal!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><strong>How to resize the EBS at mac1.metal in Terminal</strong></p>
<p>Get the identifier of EBS (look for the first one with GUID_partition_scheme):
<code>diskutil list physical external</code></p>
<p>Or here is a more advanced version to be used in a script:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#79c0ff">DISK_ID</span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#ff7b72">$(</span>diskutil list physical external | grep <span style="color:#a5d6ff">&#39;GUID_partition_scheme&#39;</span>| tr -s <span style="color:#a5d6ff">&#39; &#39;</span> | cut -d<span style="color:#a5d6ff">&#39; &#39;</span> -f6<span style="color:#ff7b72">)</span>
</span></span></code></pre></div><p>It would probably be <code>disk0</code> if you did not attach additional EBS.</p>
<p>Then run the repair job for the disk, using its identifier:
<code>diskutil repairDisk disk0</code></p>
<p>Advanced version:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>yes | diskutil repairDisk <span style="color:#79c0ff">$DISK_ID</span>
</span></span></code></pre></div><p>Now get the APFS container identifier (look for Apple_APFS):
<code>diskutil list physical external</code></p>
<p>Advanced version:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#79c0ff">APFS_ID</span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#ff7b72">$(</span>diskutil list physical external | grep <span style="color:#a5d6ff">&#39;Apple_APFS&#39;</span> | tr -s <span style="color:#a5d6ff">&#39; &#39;</span> | cut -d<span style="color:#a5d6ff">&#39; &#39;</span> -f8<span style="color:#ff7b72">)</span>
</span></span></code></pre></div><p>It would probably be <code>disk0s2</code> if you did not attach additional EBS.</p>
<p>Finally, resize the APFS container:
<code>diskutil apfs resizeContainer disk0s2</code></p>
<p>Advanced version</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>diskutil apfs resizeContainer <span style="color:#79c0ff">$APFS_ID</span>
</span></span></code></pre></div>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></li>
<li id="fn:2">
<p><strong>How to setup Screen Sharing at mac1.metal in Terminal</strong></p>
<p>The <code>kickstart</code> command-line tool resides in <code>/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/</code> so you&rsquo;ll better to cd into that directory for convenience:</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># Turn On Remote Management for a user to be specified later</span>
</span></span><span style="display:flex;"><span>sudo ./kickstart -activate -configure -allowAccessFor -specifiedUsers
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># Enable Remote Management for ec2-user user</span>
</span></span><span style="display:flex;"><span>sudo ./kickstart -configure -users ec2-user -access -on -privs -all
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># Set the user password </span>
</span></span><span style="display:flex;"><span>sudo passwd ec2-user
</span></span></code></pre></div>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></li>
</ol>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
