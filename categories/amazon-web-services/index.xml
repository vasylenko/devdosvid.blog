<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Amazon Web Services on Serhii Vasylenko</title>
        <link>https://serhii.vasylenko.info/categories/amazon-web-services/</link>
        <description>Recent content in Amazon Web Services on Serhii Vasylenko</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <managingEditor>email-from-blog@vasylenko.info (Serhii Vasylenko)</managingEditor>
        <webMaster>email-from-blog@vasylenko.info (Serhii Vasylenko)</webMaster>
        <lastBuildDate>Fri, 05 Nov 2021 14:20:58 +0200</lastBuildDate><atom:link href="https://serhii.vasylenko.info/categories/amazon-web-services/index.xml" rel="self" type="application/rss+xml" />
        <item>
            <title>Apply Cloudfront Security Headers With Terraform</title>
            <link>https://serhii.vasylenko.info/2021/11/05/apply-cloudfront-security-headers-with-terraform/</link>
            <pubDate>Fri, 05 Nov 2021 14:20:58 +0200</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">f515b1f59c0c5a95c4b9a1a06c7d17b0</guid>
            <description>This blog explains how to use Response Headers Policy and Terraform to configure security headers for CloudFront Distribution</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2021/11/05/apply-cloudfront-security-headers-with-terraform/cover-image.png"</url>
                </image>&lt;p&gt;In November 2021, AWS announced Response Headers Policies — native support of response headers in CloudFront. You can read the full announcement here: &lt;a href=&#34;https://aws.amazon.com/blogs/networking-and-content-delivery/amazon-cloudfront-introduces-response-headers-policies/&#34;&gt;Amazon CloudFront introduces Response Headers Policies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I said &amp;ldquo;native&amp;rdquo; because previously you could set response headers either using &lt;a href=&#34;https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.html&#34;&gt;CloudFront Functions&lt;/a&gt; or &lt;a href=&#34;https://aws.amazon.com/blogs/networking-and-content-delivery/adding-http-security-headers-using-lambdaedge-and-amazon-cloudfront/&#34;&gt;Lambda@Edge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And one of the common use cases for that was to set security headers. Now you don&amp;rsquo;t need to add intermediate requests processing to modify the headers: CloudFront does that for you &lt;strong&gt;with no additional fee&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;manage-security-headers-as-code&#34;&gt;Manage Security Headers as Code&lt;/h2&gt;
&lt;p&gt;Starting from the &lt;a href=&#34;https://github.com/hashicorp/terraform-provider-aws/blob/main/CHANGELOG.md#3640-november-04-2021&#34;&gt;3.64.0&lt;/a&gt; version of Terraform AWS provider, you can create the security headers policies and apply them for your distribution.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how that looks!&lt;/p&gt;
&lt;p&gt;First, you need to describe the &lt;code&gt;aws_cloudfront_response_headers_policy&lt;/code&gt; resource:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_cloudfront_response_headers_policy&amp;#34; &amp;#34;security_headers_policy&amp;#34;&lt;/span&gt; {
  name = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;my-security-headers-policy&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;security_headers_config&lt;/span&gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;content_type_options&lt;/span&gt; {
      override = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;frame_options&lt;/span&gt; {
      frame_option = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;DENY&amp;#34;&lt;/span&gt;
      override     = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;referrer_policy&lt;/span&gt; {
      referrer_policy = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;same-origin&amp;#34;&lt;/span&gt;
      override        = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;xss_protection&lt;/span&gt; {
      mode_block = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
      protection = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
      override   = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;strict_transport_security&lt;/span&gt; {
      access_control_max_age_sec = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;63072000&amp;#34;&lt;/span&gt;
      include_subdomains         = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
      preload                    = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
      override                   = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;content_security_policy&lt;/span&gt; {
      content_security_policy = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;frame-ancestors &amp;#39;none&amp;#39;; default-src &amp;#39;none&amp;#39;; img-src &amp;#39;self&amp;#39;; script-src &amp;#39;self&amp;#39;; style-src &amp;#39;self&amp;#39;; object-src &amp;#39;none&amp;#39;&amp;#34;&lt;/span&gt;
      override                = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;List of security headers used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#x-content-type-options&#34;&gt;X-Content-Type-Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#x-frame-options&#34;&gt;X-Frame-Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#referrer-policy&#34;&gt;Referrer Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#x-xss-protection&#34;&gt;X-XSS-Protection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#http-strict-transport-security&#34;&gt;Strict Transport Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#content-security-policy&#34;&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The values for the security headers can be different, of course. However, the provided ones cover the majority of cases. And you can always get the up to date info about these headers and possible values here: &lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security&#34;&gt;Mozilla web Security Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, you could notice that provided example uses the &lt;code&gt;override&lt;/code&gt; argument a lot. The &lt;code&gt;override&lt;/code&gt; argument tells CloudFront to set these values for specified headers despite the values received from the origin. This way, you can enforce your security headers configuration.&lt;/p&gt;
&lt;p&gt;Once you have the &lt;code&gt;aws_cloudfront_response_headers_policy&lt;/code&gt; resource, you can refer to it in the code of &lt;code&gt;aws_cloudfront_distribution&lt;/code&gt; resource inside cache behavior block (default or ordered). For example, in your &lt;code&gt;default_cache_behavior&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_cloudfront_distribution&amp;#34; &amp;#34;test&amp;#34;&lt;/span&gt; {
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;default_cache_behavior&lt;/span&gt; {
    target_origin_id           = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;aws_s3_bucket&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;my_origin&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;id&lt;/span&gt;
    allowed_methods            = [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;GET&amp;#34;, &amp;#34;HEAD&amp;#34;, &amp;#34;OPTIONS&amp;#34;&lt;/span&gt;]
    cached_methods             = [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;GET&amp;#34;, &amp;#34;HEAD&amp;#34;&lt;/span&gt;]
    viewer_protocol_policy     = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redirect-to-https&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;    # some arguments skipped from listing for the sake of simplicity
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    
    response_headers_policy_id = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;aws_cloudfront_response_headers_policy&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;security_headers_policy&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;id&lt;/span&gt;
    
  }&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;  # some arguments skipped from listing for the sake of simplicity
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;security-scan-results&#34;&gt;Security Scan Results&lt;/h3&gt;
&lt;p&gt;Here is what Mozilla Observatory reports about my test CF distribution where I enabled the policy described above:&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;observatory-results.png&#34;
         alt=&#34;Scan summary for CloudFront distribution with security headers policy&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Scan summary for CloudFront distribution with security headers policy&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So with just minimum effort, you can greatly boost your web application security posture.&lt;/p&gt;
&lt;h3 id=&#34;more-to-read&#34;&gt;More to read:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_response_headers_policy&#34;&gt;Terraform Resource: aws_cloudfront_response_headers_policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/creating-response-headers-policies.html&#34;&gt;Creating response headers policies - Amazon CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html&#34;&gt;Using the managed response headers policies - Amazon CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-response-headers-policies.html&#34;&gt;Understanding response headers policies - Amazon CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </item>
        
        <item>
            <title>Auto Scaling Group for your macOS EC2 Instances fleet</title>
            <link>https://serhii.vasylenko.info/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/</link>
            <pubDate>Sun, 24 Oct 2021 02:00:31 +0300</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">89697bf666f6aaeeff5d693d3a1a0f1f</guid>
            <description></description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/cover-image.png"</url>
                </image>&lt;p&gt;It’s been almost a year since I started using macOS EC2 instances on AWS: there were &lt;a href=&#34;https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html&#34;&gt;ups and downs in service offerings&lt;/a&gt; and a lot of discoveries with &lt;a href=&#34;https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html&#34;&gt;macOS AMI build&lt;/a&gt; automation.&lt;/p&gt;
&lt;p&gt;And I like this small but so helpful update of EC2 service very much: with mac1.metal instances, seamless integration of Apple-oriented CI/CD with other AWS infrastructure could finally happen.&lt;/p&gt;
&lt;p&gt;While management of a single mac1.metal node (or a tiny number of ones) is not a big deal (especially when &lt;a href=&#34;https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html&#34;&gt;Dedicated Host support&lt;/a&gt; was added to Terraform provider), governing the fleet of instances is still complicated. Or it has been complicated until recent days.&lt;/p&gt;
&lt;h2 id=&#34;official--unofficial-auto-scaling-for-macos&#34;&gt;Official / Unofficial Auto Scaling for macOS&lt;/h2&gt;
&lt;p&gt;With a growing number of instances, the following challenges arise:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scale mac1.metal instances horizontally&lt;/li&gt;
&lt;li&gt;Automatically allocate and release Dedicated Hosts needed for instances&lt;/li&gt;
&lt;li&gt;Automatically replace unhealthy instances&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have worked with AWS before, you know that Auto Scaling Group service can solve such things.&lt;/p&gt;
&lt;p&gt;However, official documentation (as of October 2021) &lt;a href=&#34;https://github.com/awsdocs/amazon-ec2-user-guide/blob/269ac7494dd3aef62ae5d45e8b11f7ea5cadd2bf/doc_source/ec2-mac-instances.md&#34;&gt;states&lt;/a&gt;: “You cannot use Mac instances with Amazon EC2 Auto Scaling”.&lt;/p&gt;
&lt;p&gt;But in fact, you can.&lt;/p&gt;
&lt;h2 id=&#34;combining-services-to-get-real-power&#34;&gt;Combining services to get real power&lt;/h2&gt;
&lt;p&gt;So how does all that work?&lt;/p&gt;
&lt;p&gt;Let’s review the diagram that illustrates the interconnection between involved services:&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;general-scheme_compressed.png&#34;
         alt=&#34;Services logical interconnection&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Services logical interconnection&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;With the help of Licence Manager service and Launch Templates, you can set up EC2 Auto Scaling Group for mac1.metal and leave the automated instance provisioning to the service.&lt;/p&gt;
&lt;h3 id=&#34;license-configuration&#34;&gt;License Configuration&lt;/h3&gt;
&lt;p&gt;First, you need to create a License Configuration so that the Host resource group can allocate the hots.&lt;/p&gt;
&lt;p&gt;Go to AWS License Manager -&amp;gt; Customer managed licenses -&amp;gt; Create customer-managed license.&lt;/p&gt;
&lt;p&gt;Specify &lt;strong&gt;Sockets&lt;/strong&gt; as the Licence type. You may skip setting the Number of Sockets. However, the actual limit of mac1.metal instances per account is regulated by Service Quota. The default number of mac instances allowed per account is 3. Therefore, consider &lt;a href=&#34;https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html&#34;&gt;increasing&lt;/a&gt; this to a more significant number.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;license-configuration_compressed.png&#34;
         alt=&#34;Licence configuration values&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Licence configuration values&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;host-resource-group&#34;&gt;Host resource group&lt;/h3&gt;
&lt;p&gt;Second, create the Host resource group: AWS License Manager -&amp;gt; Host resource groups -&amp;gt; Create host resource group.&lt;/p&gt;
&lt;p&gt;When creating the Host resource group, check “&lt;strong&gt;Allocate hosts automatically&lt;/strong&gt;” and “&lt;strong&gt;Release hosts automatically&lt;/strong&gt;” but leave “Recover hosts automatically” unchecked. Dedicated Host does &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html#dedicated-hosts-recovery-instances&#34;&gt;not support host recovery&lt;/a&gt; for mac1.metal.
However, Auto Scaling Group will maintain the desired number of instances if one fails the health check (which assumes the case of host failure as well).&lt;/p&gt;
&lt;p&gt;Also, I recommend specifying “mac1” as an allowed Instance family for the sake of transparent resource management: only this instance type is permitted to allocate hosts in the group.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;host-resource-group_compressed.png&#34;
         alt=&#34;Host resource group configuration values&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Host resource group configuration values&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Optionally, you may specify the license association here (the Host group will pick any compatible license) or select the license you created on step one.&lt;/p&gt;
&lt;h3 id=&#34;launch-template&#34;&gt;Launch Template&lt;/h3&gt;
&lt;p&gt;Create Launch Template: EC2 -&amp;gt; Launch templates -&amp;gt; Create launch template.&lt;/p&gt;
&lt;p&gt;I will skip the description of all Launch Template parameters (but here is a nice &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html&#34;&gt;tutorial&lt;/a&gt;), if you don’t mind, and keep focus only on the items relevant to the current case.&lt;/p&gt;
&lt;p&gt;Specify mac1.metal as the Instance type. Later, in Advanced details: find the &lt;strong&gt;Tenancy&lt;/strong&gt; parameter and set it to “Dedicated host”; for &lt;strong&gt;Target host by&lt;/strong&gt; select “Host resource group”, and once selected the new parameter &lt;strong&gt;Tenancy host resource group&lt;/strong&gt; will appear where you should choose your host group; select your license in &lt;strong&gt;License configurations&lt;/strong&gt; parameter.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;launch-template_compressed.png&#34;
         alt=&#34;Launch Template configuration values&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Launch Template configuration values&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;auto-scaling-group&#34;&gt;Auto Scaling Group&lt;/h3&gt;
&lt;p&gt;Finally, create the Auto Scaling Group: EC2 -&amp;gt; Auto Scaling groups -&amp;gt; Create Auto Scaling group.&lt;/p&gt;
&lt;p&gt;The vital thing to note here — is the availability of the mac1.metal instance in particular AZ.&lt;/p&gt;
&lt;p&gt;Mac instances are available in us-east-1 and &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-ec2-mac-instances-additional-regions/&#34;&gt;7 more regions&lt;/a&gt;, but not every Availability Zone in the region supports it. So you must figure out which AZ supports the needed instance type.&lt;/p&gt;
&lt;p&gt;There is no documentation for that, but there is an AWS CLI command that can answer this question: &lt;a href=&#34;https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/describe-instance-type-offerings.html&#34;&gt;describe-instance-type-offerings — AWS CLI 2.3.0 Command Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is an example for the us-east-1 region:
&lt;p&gt;&lt;details &gt;
&lt;summary markdown=&#34;span&#34; style=&#34;font-size: 0.8em; font-weight: bold&#34;&gt;🔍 Click here to see the code snippet&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt; aws ec2 describe-instance-type-offerings --location-type availability-zone-id --filters &lt;span style=&#34;color:#40ffff&#34;&gt;Name&lt;/span&gt;=instance-type,Values=mac1.metal --region us-east-1 --output text

INSTANCETYPEOFFERINGS	mac1.metal	use1-az6	availability-zone-id
INSTANCETYPEOFFERINGS	mac1.metal	use1-az4	availability-zone-id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;Keep that nuance in mind when selecting a subnet for the mac1.metal instances.&lt;/p&gt;
&lt;p&gt;When you know the AZ, specify the respective Subnet in the Auto Scaling Group settings, and you&amp;rsquo;re ready to go!&lt;/p&gt;
&lt;h2 id=&#34;bring-infrastructure-as-code-here&#34;&gt;Bring Infrastructure as Code here&lt;/h2&gt;
&lt;p&gt;I suggest describing all that as a code. I prefer Terraform, and its AWS provider supports the needed resources. Except one.&lt;/p&gt;
&lt;p&gt;As of October 2021, resources supported :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/servicequotas_service_quota&#34;&gt;aws_servicequotas_service_quota&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/licensemanager_license_configuration&#34;&gt;aws_licensemanager_license_configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_template&#34;&gt;aws_launch_template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group&#34;&gt;aws_autoscaling_group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Host resource group is not yet supported by the provider, unfortunately. However, we can use CloudFormation in Terraform to overcome that: describe the Host resource group as &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudformation_stack&#34;&gt;aws_cloudformation_stack&lt;/a&gt; Terraform resource using CloudFormation template from a file.&lt;/p&gt;
&lt;p&gt;Here is how it looks like:
&lt;p&gt;&lt;details &gt;
&lt;summary markdown=&#34;span&#34; style=&#34;font-size: 0.8em; font-weight: bold&#34;&gt;🔍 Click here to see the code snippet&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_licensemanager_license_configuration&amp;#34; &amp;#34;this&amp;#34;&lt;/span&gt; {
  name                     = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;local&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;full_name&lt;/span&gt;
  license_counting_type    = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Socket&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_cloudformation_stack&amp;#34; &amp;#34;this&amp;#34;&lt;/span&gt; {
  name          = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;local&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;full_name&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt; # the name of CloudFormation stack
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  template_body = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;file&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;${path.module}/resource-group-cf-stack-template.json&amp;#34;&lt;/span&gt;)
  parameters = {
    GroupName = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;local&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;full_name&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt; # the name for the Host group, passed to CloudFormation template
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  }
  on_failure = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;And the next code snippet explains the CloudFromation template (which is the &lt;code&gt;resource-group-cf-stack-template.json&lt;/code&gt; file in the code snippet above)&lt;/p&gt;
&lt;p&gt;&lt;details &gt;
&lt;summary markdown=&#34;span&#34; style=&#34;font-size: 0.8em; font-weight: bold&#34;&gt;🔍 Click here to see the code snippet&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Parameters&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;GroupName&amp;#34;&lt;/span&gt; : {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Description&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;The name of Host Group&amp;#34;&lt;/span&gt;
    }
  },
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Resources&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;DedicatedHostGroup&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;AWS::ResourceGroups::Group&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Ref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;GroupName&amp;#34;&lt;/span&gt; },
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Configuration&amp;#34;&lt;/span&gt;: [
          {
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;AWS::ResourceGroups::Generic&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Parameters&amp;#34;&lt;/span&gt;: [
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;allowed-resource-types&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;AWS::EC2::Host&amp;#34;&lt;/span&gt;]
              },
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;deletion-protection&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;UNLESS_EMPTY&amp;#34;&lt;/span&gt;]
              }
            ]
          },
          {
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;AWS::EC2::HostManagement&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Parameters&amp;#34;&lt;/span&gt;: [
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;allowed-host-families&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;mac1&amp;#34;&lt;/span&gt;]
              },
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;auto-allocate-host&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;]
              },
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;auto-release-host&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;]
              },
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;any-host-based-license-configuration&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;]
              }
            ]
          }
        ]
      }
    }
  },
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Outputs&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;ResourceGroupARN&amp;#34;&lt;/span&gt; : {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ResourceGroupARN&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt; : { &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Fn::GetAtt&amp;#34;&lt;/span&gt; : [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;DedicatedHostGroup&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Arn&amp;#34;&lt;/span&gt;] }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;aws_cloudformation_stack&lt;/code&gt; resource will export the &lt;code&gt;DedicatedHostGroup&lt;/code&gt; attribute (see the code of CloudFromation template), which you will use later in the Launch Template resource.&lt;/p&gt;
&lt;h3 id=&#34;pro-tips&#34;&gt;Pro tips&lt;/h3&gt;
&lt;p&gt;If you manage an AWS Organization, I have good news: Host groups and Licenses are supported by &lt;a href=&#34;https://docs.aws.amazon.com/ram/latest/userguide/shareable.html&#34;&gt;Resource Access Manager&lt;/a&gt; service. Hence, you can host all mac instances in one account and share them with other accounts — it might be helpful for costs allocation, for example. Also, check out &lt;a href=&#34;https://serhii.vasylenko.info/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/&#34;&gt;my blog about AWS RAM&lt;/a&gt; if you are very new to this service.&lt;/p&gt;
&lt;p&gt;To solve the “which AZ supports mac metal” puzzle, you can leverage the &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ec2_instance_type_offerings&#34;&gt;aws_ec2_instance_type_offerings&lt;/a&gt; and &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/subnet_ids&#34;&gt;aws_subnet_ids&lt;/a&gt; data sources.&lt;/p&gt;
&lt;h2 id=&#34;costs-considerations&#34;&gt;Costs considerations&lt;/h2&gt;
&lt;p&gt;License Manager is a &lt;a href=&#34;https://aws.amazon.com/license-manager/pricing/&#34;&gt;free of charge service&lt;/a&gt;, as well as &lt;a href=&#34;https://aws.amazon.com/autoscaling/pricing/&#34;&gt;Auto Scaling&lt;/a&gt;, and &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2017/11/introducing-launch-templates-for-amazon-ec2-instances/&#34;&gt;Launch Template&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So it’s all about the price for mac1.metal Dedicated Host which is &lt;a href=&#34;https://aws.amazon.com/ec2/dedicated-hosts/pricing/&#34;&gt;$1.083 per hour&lt;/a&gt; as of October 2021. However, &lt;a href=&#34;https://docs.aws.amazon.com/savingsplans/latest/userguide/what-is-savings-plans.html&#34;&gt;Saving Plans&lt;/a&gt; can be applied.&lt;/p&gt;
&lt;p&gt;Please note that the minimum allocation time for that type of host is 24 hours. Maybe someday AWS will change that to 1-hour minimum someday (fingers crossed).&lt;/p&gt;
&lt;h2 id=&#34;oh-so-asg&#34;&gt;Oh. So. ASG.&lt;/h2&gt;
&lt;p&gt;The Auto Scaling for mac1.metal opens new possibilities for CI/CD: you can integrate that to your favorite tool (GitLab, Jenkins, whatsoever) using AWS Lambda and provision new instances when your development/testing environments need that. Or you can use other cool ASG stuff, such as Lifecycle hooks, to create even more custom scenarios.&lt;/p&gt;
&lt;p&gt;Considering the “hidden” (undocumented) nature of the described setup, I suggest treating it as rather testing than production-ready for now. However, my tests show that everything works pretty well: hosts are allocated, instances are spawned, and the monthly bill grows.&lt;/p&gt;
&lt;p&gt;I suppose AWS will officially announce all this in the nearest future. Along with that, I am looking forward to the announcement of Monterey-based AMIs and maybe even M1 chip-based instances (will it be mac2.metal?).&lt;/p&gt;
&lt;p&gt;And I want to say thanks (thanks, pal!) to &lt;a href=&#34;https://github.com/hashicorp/terraform/issues/28531&#34;&gt;OliverKoo&lt;/a&gt;, who started digging into that back in April&#39;21.&lt;/p&gt;
</content>
        </item>
        
        <item>
            <title>AWS Resource Access Manager — Multi Account Resource Governance</title>
            <link>https://serhii.vasylenko.info/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/</link>
            <pubDate>Sat, 25 Sep 2021 00:54:23 +0300</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">be9463cb2f01a696d778cc3636ada3c1</guid>
            <description>Provision and manage resources within the AWS Organization with ease</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/cover-image.png"</url>
                </image>&lt;p&gt;With a multi-account approach of building the infrastructure, there is always a challenge of provision and governance of the resources to subordinate accounts within the Organization. Provision resources, keep them up to date, and decommission them properly — that&amp;rsquo;s only a part of them.&lt;/p&gt;
&lt;p&gt;AWS has numerous solutions that help make this process reliable and secure, and the Resource Access Manager (RAM) is one of them.
In a nutshell, the RAM service allows you to share the AWS resources you create in one AWS account with other AWS accounts. They can be your organizations&#39; accounts, organizational units (OU), or even third-party accounts.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s see what the RAM is and review some of its usage examples.&lt;/p&gt;
&lt;h2 id=&#34;why-using-ram&#34;&gt;Why using RAM&lt;/h2&gt;
&lt;p&gt;There are several benefits of using the RAM service:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reduced operational overhead&lt;/strong&gt;: eliminate the need of provisioning the same kind of resource multiple times — RAM does that for you&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplified security management&lt;/strong&gt;: AWS RAM-managed permissions (at least one per resource type) define the actions that principals with access to the resources (i.e., resource users) can perform on those resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistent experience&lt;/strong&gt;: you share the resource in its state and with its security configuration with an arbitrary number of accounts.&lt;/p&gt;
&lt;p&gt;That plays incredibly well in the case of organization-wide sharing: new accounts get the resources automatically. And the shared resource itself looks like a native resource in the account that accepts your sharing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Audit and visibility&lt;/strong&gt;: RAM integrates with the CloudWatch and CloudTrail.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;how-to-share-a-resource&#34;&gt;How to share a resource&lt;/h2&gt;
&lt;p&gt;When you share a resource, the AWS account that owns that resource retains full ownership of the resource.&lt;/p&gt;
&lt;p&gt;Sharing of the resource doesn&amp;rsquo;t change any permissions or quotas that apply to that resource. Also, you can share the resource only if you own it.&lt;/p&gt;
&lt;p&gt;Availability of the shared resources scopes to the Region: the users of your shared resources can access these resources only in the same Region where resources belong.&lt;/p&gt;
&lt;p&gt;Creation of resource share consists of three steps:
&lt;img loading=&#34;lazy&#34; src=&#34;ram-diagram-800.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Specify the share name and the resource(s) you want to share. It can be either one resource type or several. You can also skip the resources selection and do that later.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible to modify the resource share later (e.g., you want to add some resources to the share).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associate permissions with resource types you share. Some resources can have only one managed permission (will be attached automatically), and some can have multiple.&lt;/p&gt;
&lt;p&gt;You can check the Permissions Library in the AWS RAM Console to see what managed permissions are available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select who can use the resources you share: either external or Organization account or IAM role/user. If you share the resource with third parties, they will have to accept the sharing explicitly.&lt;/p&gt;
&lt;p&gt;Organization-wide resource share is accepted implicitly if resource sharing is enabled for the Organization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, review the summary page of the resource share and create it.&lt;/p&gt;
&lt;p&gt;Only specific actions are available to the users of shared resources. These actions mostly have the &amp;ldquo;read-only&amp;rdquo; nature and &lt;a href=&#34;https://docs.aws.amazon.com/ram/latest/userguide/shareable.html&#34;&gt;vary by resource type&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, the RAM service is &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ram_resource_share&#34;&gt;supported by Terraform&lt;/a&gt;, so the resource sharing configuration may look like that, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_ram_resource_share&amp;#34; &amp;#34;example&amp;#34;&lt;/span&gt; {
  name                      = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt;
  allow_external_principals = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;

  tags = {
    Environment = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Production&amp;#34;&lt;/span&gt;
  }
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_ram_resource_association&amp;#34; &amp;#34;example&amp;#34;&lt;/span&gt; {
  resource_arn       = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;aws_subnet&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;arn&lt;/span&gt;
  resource_share_arn = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;aws_ram_resource_share&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;arn&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example-use-cases&#34;&gt;Example use cases&lt;/h2&gt;
&lt;p&gt;One of the trivial but valuable examples of RAM service usage is sharing a Manged Prefix List.
Suppose you have some service user across your Organization, a self-hosted VPN server, for example. And you have a static set of IPs for that VPN: you trust these IPs and would like them to be allow-listed in your other services.
How to report these IPs to all organization accounts/users? And if the IP set changes, how to announce that change, and what should be done to reflect that change in services that depend on it, for example, Security Groups?&lt;/p&gt;
&lt;p&gt;The answer is a shared &lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/managed-prefix-lists.html#managed-prefix-lists-concepts&#34;&gt;Managed Prefix List&lt;/a&gt;. You create the list once in the account and share it across your Organization. Other accounts automatically get access to that list and can reference the list in their Security Groups. And when the list entry is changed, they do not need to perform any actions: their Security Groups will get the updated IPs implicitly.&lt;/p&gt;
&lt;p&gt;Another everyday use case of RAM is the VPC sharing that can form the foundation of the &lt;a href=&#34;https://aws.amazon.com/blogs/networking-and-content-delivery/vpc-sharing-a-new-approach-to-multiple-accounts-and-vpc-management/&#34;&gt;multi-account AWS architectures&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Of course, the RAM service is not the only way to organize and centralize resource management in AWS. There are Service Catalog, Control Tower, Systems Manager, Config, and others. However, the RAM is relatively simple to adopt but is capable of providing worthy outcomes.&lt;/p&gt;
</content>
        </item>
        
        <item>
            <title>Run Ansible playbook on mac1.metal instances fleet with AWS Systems Manager</title>
            <link>https://serhii.vasylenko.info/2021/05/27/run-ansible-playbook-mac1-metal-aws-systems-manager.html</link>
            <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">4d71fce68d0d4e4b80d8fbc604c48035</guid>
            <description>A small adjustment for big capabilities</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2021/05/27/run-ansible-playbook-mac1-metal-aws-systems-manager.htmlcover_image.png"</url>
                </image>&lt;p&gt;In days of containers and serverless applications, Ansible looks not such a trendy thing.&lt;/p&gt;
&lt;p&gt;But still, there are cases when it helps, and there are cases when it combines very well with brand new product offerings, such as EC2 Mac instances.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html&#34;&gt;more I use mac1.metal&lt;/a&gt; in AWS, the more I see that Ansible becomes a bedrock of software customization in my case.&lt;/p&gt;
&lt;p&gt;And when you have a large instances fleet, the AWS Systems Manager becomes your best friend (the sooner you get along together, the better).&lt;/p&gt;
&lt;p&gt;So is it possible to use Ansible playbooks for mac1.metal on a big scale, with the help of AWS Systems Manager?&lt;/p&gt;
&lt;h2 id=&#34;not-available-out-of-the-box&#34;&gt;(Not) Available out of the box&lt;/h2&gt;
&lt;p&gt;AWS Systems Manager (SSM hereafter) has a pre-defined, shared Document that allows running Ansible playbooks.&lt;/p&gt;
&lt;p&gt;It’s called “AWS-RunAnsiblePlaybook,” and you can find it in AWS SSM → Documents → Owned by Amazon.&lt;/p&gt;
&lt;p&gt;However, this Document is not quite “friendly” to macOS. When the SSM agent calls Ansible on the Mac EC2 instance, it does not recognize the Ansible installed with Homebrew (de-facto most used macOS package manager).&lt;/p&gt;
&lt;p&gt;So if you try to run a command on the mac1.metal instance using this Document, you will get the following error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Ansible is not installed. Please install Ansible and rerun the command.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The root cause is trivial: the path to Ansible binary is not present on the list of paths available to the SSM agent by default.&lt;/p&gt;
&lt;p&gt;There are several ways to solve that, but I believe that the most convenient one would be to create your custom Document — a slightly adjusted version of the default one provided by AWS.&lt;/p&gt;
&lt;h2 id=&#34;creating-own-ssm-document-for-ansible-installed-with-homebrew&#34;&gt;Creating own SSM Document for Ansible installed with Homebrew&lt;/h2&gt;
&lt;p&gt;All you need to do is clone the Document provided by AWS and change its code a little — replace the callouts of &lt;code&gt;ansible&lt;/code&gt; with the full path to the binary.&lt;/p&gt;
&lt;p&gt;Navigate to AWS SSM → Documents → Owned by Amazon and type &lt;code&gt;AWS-RunAnsiblePlaybook&lt;/code&gt; in the search field.&lt;/p&gt;
&lt;p&gt;Select the Document by pressing the circle on its top-right corner and then click Actions → Clone document.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;aws_ssm_document_clone.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Give the new SSM Document a name, e.g., &lt;code&gt;macos-arbitrary-ansible-playbook&lt;/code&gt;, and change the &lt;code&gt;ansible&lt;/code&gt; callouts (at the end of the code) with the full path to the ansible symlink made by Homebrew which is &lt;code&gt;/usr/local/bin/ansible&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here is the complete source code of the Document with adjusted Ansible path:&lt;/p&gt;


&lt;p&gt;&lt;details &gt;
  &lt;summary markdown=&#34;span&#34;&gt;Click to expand the code block&lt;/summary&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;schemaVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Use this document to run arbitrary Ansible playbooks on macOS EC2 instances. Specify either YAML text or URL. If you specify both, the URL parameter will be used. Use the extravar parameter to send runtime variables to the Ansible execution. Use the check parameter to perform a dry run of the Ansible execution. The output of the dry run shows the changes that will be made when the playbook is executed.&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;playbook&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;(Optional) If you don&amp;#39;t specify a URL, then you must specify playbook YAML in this field.&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;displayType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;textarea&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;playbookurl&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;(Optional) If you don&amp;#39;t specify playbook YAML, then you must specify a URL where the playbook is stored. You can specify the URL in the following formats: http://example.com/playbook.yml  or s3://examplebucket/plabook.url. For security reasons, you can&amp;#39;t specify a URL with quotes.&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;allowedPattern&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;^\\s*$|^(http|https|s3)://[^&amp;#39;]*$&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;extravars&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;(Optional) Additional variables to pass to Ansible at runtime. Enter a space separated list of key/value pairs. For example: color=red or fruits=[apples,pears]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;foo=bar&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;displayType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;textarea&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;allowedPattern&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;^((^|\\s)\\w+=(\\S+|&amp;#39;.*&amp;#39;))*$&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;check&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; (Optional) Use the check parameter to perform a dry run of the Ansible execution.&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;False&amp;#34;&lt;/span&gt;
      ],
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;False&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;timeoutSeconds&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;(Optional) The time in seconds for a command to be completed before it is considered to have failed.&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3600&amp;#34;&lt;/span&gt;
    }
  },
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;mainSteps&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws:runShellScript&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;runShellScript&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;inputs&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;timeoutSeconds&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{{ timeoutSeconds }}&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;runCommand&amp;#34;&lt;/span&gt;: [
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;#!/bin/bash&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/usr/local/bin/ansible --version&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;if [ $? -ne 0 ]; then&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; echo \&amp;#34;Ansible is not installed. Please install Ansible and rerun the command\&amp;#34; &amp;gt;&amp;amp;2&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; exit 1&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;fi&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;execdir=$(dirname $0)&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;cd $execdir&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;if [ -z &amp;#39;{{playbook}}&amp;#39; ] ; then&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; if [[ \&amp;#34;{{playbookurl}}\&amp;#34; == http* ]]; then&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   wget &amp;#39;{{playbookurl}}&amp;#39; -O playbook.yml&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   if [ $? -ne 0 ]; then&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;       echo \&amp;#34;There was a problem downloading the playbook. Make sure the URL is correct and that the playbook exists.\&amp;#34; &amp;gt;&amp;amp;2&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;       exit 1&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   fi&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; elif [[ \&amp;#34;{{playbookurl}}\&amp;#34; == s3* ]] ; then&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   aws --version&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   if [ $? -ne 0 ]; then&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;       echo \&amp;#34;The AWS CLI is not installed. The CLI is required to process Amazon S3 URLs. Install the AWS CLI and run the command again.\&amp;#34; &amp;gt;&amp;amp;2&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;       exit 1&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   fi&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   aws s3 cp &amp;#39;{{playbookurl}}&amp;#39; playbook.yml&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   if [ $? -ne 0 ]; then&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;       echo \&amp;#34;Error while downloading the document from S3\&amp;#34; &amp;gt;&amp;amp;2&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;       exit 1&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   fi&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; else&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   echo \&amp;#34;The playbook URL is not valid. Verify the URL and try again.\&amp;#34;&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; fi&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; echo &amp;#39;{{playbook}}&amp;#39; &amp;gt; playbook.yml&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;fi&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;if  [[ \&amp;#34;{{check}}\&amp;#34; == True ]] ; then&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   /usr/local/bin/ansible-playbook -i \&amp;#34;localhost,\&amp;#34; --check -c local -e \&amp;#34;{{extravars}}\&amp;#34; playbook.yml&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;   /usr/local/bin/ansible-playbook -i \&amp;#34;localhost,\&amp;#34; -c local -e \&amp;#34;{{extravars}}\&amp;#34; playbook.yml&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;fi&amp;#34;&lt;/span&gt;
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;/p&gt;

&lt;h2 id=&#34;applying-ansible-playbook-to-the-fleet-of-mac1metal&#34;&gt;Applying Ansible playbook to the fleet of mac1.metal&lt;/h2&gt;
&lt;p&gt;Let’s give our new SSM Document a try! (I suppose you have at least one mac1 instance running, right?)&lt;/p&gt;
&lt;p&gt;In AWS SSM, go to the Run Command feature, then click on the Run Command button.&lt;/p&gt;
&lt;p&gt;On the new panel, type the name of your Document (&lt;code&gt;macos-arbitrary-ansible-playbook&lt;/code&gt; in this example) in the search field and press enter.&lt;/p&gt;
&lt;p&gt;Select the Document, and you’ll see its parameters and settings.&lt;/p&gt;
&lt;p&gt;The rest is self-explanatory. Enter either a playbook code or a link to the source file, add extra variables if needed, and select the target host or a filtered bunch (I like that feature with tags filtering!). Finally, click on the “Run” orange button to apply your playbook.&lt;/p&gt;
&lt;p&gt;That’s it! Now you can make all your ansible-playbook dreams come true! 😁&lt;/p&gt;
</content>
        </item>
        
        <item>
            <title>Configure HTTP Security headers with CloudFront Functions</title>
            <link>https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.html</link>
            <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">aba2bd003c4b5c838f4a7bd678ac6648</guid>
            <description>Modifying response headers to enforce the security of the web application</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.htmlcover_image.png"</url>
                </image>&lt;div class=&#34;updatenotice&#34;&gt;
    &lt;p&gt;In November 2021, AWS has added this functionality as a native CloudFront feature.&lt;/p&gt;
&lt;p&gt;I suggest switching to the native implementation. I have described how to configure Security Response Headers for CloudFront in the following article:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://serhii.vasylenko.info/2021/11/05/apply-cloudfront-security-headers-with-terraform/&#34;&gt;Apply Cloudfront Security Headers With Terraform&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;A couple of weeks ago, AWS released CloudFront Functions — a “true edge” compute capability for the CloudFront.&lt;/p&gt;
&lt;p&gt;It is “true edge” because Functions work on 200+ edge locations (&lt;a href=&#34;https://aws.amazon.com/cloudfront/features/?whats-new-cloudfront.sort-by=item.additionalFields.postDateTime&amp;amp;whats-new-cloudfront.sort-order=desc#Edge_Computing&#34;&gt;link to doc&lt;/a&gt;) while its predecessor, the Lambda@Edge, runs on a small number of regional edge caches.&lt;/p&gt;
&lt;p&gt;One of the use cases for Lambda@Edge was adding security HTTP headers (it’s even listed on the &lt;a href=&#34;https://aws.amazon.com/lambda/edge/&#34;&gt;product page&lt;/a&gt;), and now there is one more way to make it using CloudFront Functions.&lt;/p&gt;
&lt;h2 id=&#34;what-are-security-headers-and-why-it-matters&#34;&gt;What are security headers, and why it matters&lt;/h2&gt;
&lt;p&gt;Security Headers are one of the web security pillars.&lt;/p&gt;
&lt;p&gt;They specify security-related information of communication between a web application (i.e., website) and a client (i.e., browser) and protect the web app from different types of attacks. Also, HIPAA and PCI, and other security standard certifications generally include these headers in their rankings.&lt;/p&gt;
&lt;p&gt;We will use CloudFront Functions to set the following headers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#content-security-policy&#34;&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#http-strict-transport-security&#34;&gt;Strict Transport Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#x-content-type-options&#34;&gt;X-Content-Type-Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#x-xss-protection&#34;&gt;X-XSS-Protection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#x-frame-options&#34;&gt;X-Frame-Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security#referrer-policy&#34;&gt;Referrer Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find a short and detailed explanation for each security header on &lt;a href=&#34;https://infosec.mozilla.org/guidelines/web_security&#34;&gt;Web Security cheatsheet made by Mozilla&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;cloudfront-functions-overview&#34;&gt;CloudFront Functions overview&lt;/h2&gt;
&lt;p&gt;In a nutshell, CloudFront Functions allow performing simple actions against HTTP(s) request (from the client) and response (from the CloudFront cache at the edge). Functions take less than one millisecond to execute, support JavaScript (ECMAScript 5.1 compliant), and cost $0.10 per 1 million invocations.&lt;/p&gt;
&lt;p&gt;Every CloudFront distribution has one (default) or more Cache behaviors, and Functions can be associated with these behaviors to execute upon a specific event.&lt;/p&gt;
&lt;p&gt;That is how the request flow looks like in general, and here is where CloudFront Functions execution happens:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;request_flow.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;CloudFront Functions support Viewer Request (after CloudFront receives a request from a client) and Viewer Response (before CloudFront forwards the response to the client) events.&lt;/p&gt;
&lt;p&gt;You can read more about the events types and their properties here — &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-cloudfront-trigger-events.html&#34;&gt;CloudFront Events That Can Trigger a Lambda Function - Amazon CloudFront&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, the CloudFront Functions allow you to manage and operate the code and lifecycle of the functions directly from the CloudFront web interface.&lt;/p&gt;
&lt;h2 id=&#34;solution-overview&#34;&gt;Solution overview&lt;/h2&gt;
&lt;p&gt;CloudFront distribution should exist before Function creation so you could associate the Function with the distribution.&lt;/p&gt;
&lt;p&gt;Creation and configuration of the CloudFront Function consist of the following steps:&lt;/p&gt;
&lt;h3 id=&#34;create-function&#34;&gt;Create Function&lt;/h3&gt;
&lt;p&gt;In the AWS Console, open CloudFront service and lick on the Functions on the left navigation bar, then click Create function button.
&lt;img loading=&#34;lazy&#34; src=&#34;create_function.png&#34; alt=&#34;&#34;  /&gt;

Enter the name of your Function (e.g., “security-headers”) and click Continue.&lt;/p&gt;
&lt;h3 id=&#34;build-function&#34;&gt;Build Function&lt;/h3&gt;
&lt;p&gt;On the function settings page, you will see four tabs with the four lifecycle steps: Build, Test, Publish, Associate.&lt;/p&gt;
&lt;p&gt;Paste the function code into the editor and click “Save.”&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;function_editor.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Here is the source code of the function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;function&lt;/span&gt; handler(event) {
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;var&lt;/span&gt; response = event.response;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;var&lt;/span&gt; headers = response.headers;

headers[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;strict-transport-security&amp;#39;&lt;/span&gt;] = { value: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;max-age=63072000; includeSubdomains; preload&amp;#39;&lt;/span&gt;}; 
headers[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;content-security-policy&amp;#39;&lt;/span&gt;] = { value: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;default-src &amp;#39;none&amp;#39;; img-src &amp;#39;self&amp;#39;; script-src &amp;#39;self&amp;#39;; style-src &amp;#39;self&amp;#39;; object-src &amp;#39;none&amp;#39;; frame-ancestors &amp;#39;none&amp;#39;&amp;#34;&lt;/span&gt;}; 
headers[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;x-content-type-options&amp;#39;&lt;/span&gt;] = { value: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;nosniff&amp;#39;&lt;/span&gt;}; 
headers[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;x-xss-protection&amp;#39;&lt;/span&gt;] = {value: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;1; mode=block&amp;#39;&lt;/span&gt;};
headers[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;referrer-policy&amp;#39;&lt;/span&gt;] = {value: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;same-origin&amp;#39;&lt;/span&gt;};
headers[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;x-frame-options&amp;#39;&lt;/span&gt;] = {value: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;DENY&amp;#39;&lt;/span&gt;};

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; response;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;test-function&#34;&gt;Test Function&lt;/h3&gt;
&lt;p&gt;Open the “Test” tab — let’s try our function first before it becomes live!&lt;/p&gt;
&lt;p&gt;Select Viewer Response event type and Development Stage, then select “Viewer response with headers” as a Sample test event (you will get a simple set of headers automatically).&lt;/p&gt;
&lt;p&gt;Now click the blue “Test” button and observe the output results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compute utilization represents the relative amount of time (on a scale between 0 and 100) your function took to run&lt;/li&gt;
&lt;li&gt;Check the Response headers tab and take a look at how the function added custom headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;function_test.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;publish-function&#34;&gt;Publish Function&lt;/h3&gt;
&lt;p&gt;Let’s publish our function. To do that, open the Publish tab and click on the blue button “Publish and update.”
&lt;img loading=&#34;lazy&#34; src=&#34;function_publish.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;associate-your-function-with-cloudfront-distribution&#34;&gt;Associate your Function with CloudFront distribution&lt;/h3&gt;
&lt;p&gt;Now, you can associate the function with the CloudFront distribution.&lt;/p&gt;
&lt;p&gt;To do so, open the Associate tab, select the distribution and event type (Viewer Response), and select the Cache behavior of your distribution which you want to use for the association.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;function_associate.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Once you associate the function with the CloudFront distribution, you can test it in live mode.&lt;/p&gt;
&lt;p&gt;I will use curl here to demonstrate it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt; curl -i https://d30i87a4ss9ifz.cloudfront.net
HTTP/2 &lt;span style=&#34;color:#3677a9&#34;&gt;200&lt;/span&gt;
content-type: text/html
content-length: &lt;span style=&#34;color:#3677a9&#34;&gt;140&lt;/span&gt;
date: Sat, &lt;span style=&#34;color:#3677a9&#34;&gt;22&lt;/span&gt; May &lt;span style=&#34;color:#3677a9&#34;&gt;2021&lt;/span&gt; 00:22:18 GMT
last-modified: Tue, &lt;span style=&#34;color:#3677a9&#34;&gt;27&lt;/span&gt; Apr &lt;span style=&#34;color:#3677a9&#34;&gt;2021&lt;/span&gt; 23:07:14 GMT
etag: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;a855a3189f8223db53df8a0ca362dd62&amp;#34;&lt;/span&gt;
accept-ranges: bytes
server: AmazonS3
via: 1.1 50f21cb925e6471490e080147e252d7d.cloudfront.net (CloudFront)
content-security-policy: default-src &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;; img-src &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;self&amp;#39;&lt;/span&gt;; script-src &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;self&amp;#39;&lt;/span&gt;; style-src &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;self&amp;#39;&lt;/span&gt;; object-src &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;; frame-ancestors &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;
strict-transport-security: max-age=63072000; includeSubdomains; preload
x-xss-protection: 1; &lt;span style=&#34;color:#40ffff&#34;&gt;mode&lt;/span&gt;=block
x-frame-options: DENY
referrer-policy: same-origin
x-content-type-options: nosniff
x-cache: Miss from cloudfront
x-amz-cf-pop: WAW50-C1
x-amz-cf-id: ud3qH8rLs7QmbhUZ-DeupGwFhWLpKDSD59vr7uWC65Hui5m2U8o2mw==
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also test your results here — &lt;a href=&#34;https://observatory.mozilla.org/&#34;&gt;Mozilla Observatory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;scan_result-1.png&#34; alt=&#34;&#34;  /&gt;

&lt;img loading=&#34;lazy&#34; src=&#34;scan_result-2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;read-more&#34;&gt;Read more&lt;/h2&gt;
&lt;p&gt;That was a simplified overview of the CloudFront Functions capabilities.&lt;/p&gt;
&lt;p&gt;But if you want to get deeper, here is a couple of useful links to start:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Another overview from AWS — &lt;a href=&#34;https://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale&#34;&gt;CloudFront Functions Launch Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More about creating, testing, updating and publishing of CloudFront Functions — &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html&#34;&gt;Managing functions in CloudFront Functions - Amazon CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;so-what-to-choose&#34;&gt;So what to choose?&lt;/h2&gt;
&lt;p&gt;CloudFront Functions are simpler than Lambda@Edge and run faster with minimal latency and minimal time penalty for your web clients.&lt;/p&gt;
&lt;p&gt;Lambda@Edge takes more time to invoke, but it can run upon Origin Response event so that CloudFront can cache the processed response (including headers) and return it faster afterward.&lt;/p&gt;
&lt;p&gt;But again, the CloudFront Functions invocations are much cheaper (6x times) than Lambda@Edge, and you do not pay for the function execution duration.&lt;/p&gt;
&lt;p&gt;The final decision would also depend on the dynamic/static nature of the content you have at your origin.&lt;/p&gt;
&lt;p&gt;To make a wise and deliberate decision, try to analyze your use case using these two documentation articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/edge-functions.html&#34;&gt;Choosing between CloudFront Functions and Lambda@Edge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-how-to-choose-event.html&#34;&gt;How to Decide Which CloudFront Event to Use to Trigger a Lambda Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </item>
        
        <item>
            <title>Customizing mac1.metal EC2 AMI — new guts, more glory</title>
            <link>https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html</link>
            <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">e5eb1b6e92f79c7495c1ea711e61599d</guid>
            <description>How to build mac1.metal Instance AMI for CI/CD using Ansible and Packer</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html2021-02-01-customizing-mac1-metal-ec2-ami.png"</url>
                </image>&lt;p&gt;I guess macOS was designed for a user, not for the ops or engineers, so this is why its customization and usage for CI/CD are not trivial (compared to something Linux-based). A smart guess, huh?&lt;/p&gt;
&lt;h1 id=&#34;configuration-management&#34;&gt;Configuration Management&lt;/h1&gt;
&lt;p&gt;Native Apple&amp;rsquo;s Mobile device management (a.k.a MDM) and Jamf is probably the most potent combination for macOS configuration. But as much as it&amp;rsquo;s mighty, it is a cumbersome combination, and Jamf is not free.&lt;/p&gt;
&lt;p&gt;Then we have Ansible, Chef, Puppet, SaltStack — they all are good with Linux, but what about macOS?&lt;/p&gt;
&lt;p&gt;I tried to search for use cases of mentioned CM tools for macOS. However, I concluded that they wrap the execution of native macOS command-line utilities most of the time.&lt;/p&gt;
&lt;p&gt;And if you search for the &amp;lsquo;macos&amp;rsquo; word in Chef Supermarket or Puppet Forge, you won&amp;rsquo;t be impressed by the number of actively maintained packages. Although, here is a motivating article about using Chef &lt;a href=&#34;https://pspdfkit.com/blog/2016/chef-on-macos/&#34;&gt;automating-macos-provisioning-with-chef&lt;/a&gt; if you prefer it. I could not find something similar and fresh for Puppet, so I am sorry, Puppet fans.&lt;/p&gt;
&lt;p&gt;That is why I decided to follow the KISS principle and chose Ansible.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easy to write and read the configuration, it allows to group tasks and to add execution logic &lt;del&gt;, and it feels more DevOps executing shell commands inside Ansible tasks instead of shell scripts; I know you know that 😂&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;By the way, Ansible Galaxy does not have many management packages for macOS, either. But thankfully, it has the basics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_module.html#ansible-collections-community-general-homebrew-module&#34;&gt;homebrew&lt;/a&gt; with &lt;a href=&#34;https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_cask_module.html#ansible-collections-community-general-homebrew-cask-module&#34;&gt;homebrew_cask&lt;/a&gt; and &lt;a href=&#34;https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_tap_module.html#ansible-collections-community-general-homebrew-tap-module&#34;&gt;homebrew_tap&lt;/a&gt; — to install software&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/latest/collections/community/general/launchd_module.html#ansible-collections-community-general-launchd-module&#34;&gt;launchd&lt;/a&gt; — to manage services&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/latest/collections/community/general/osx_defaults_module.html#ansible-collections-community-general-osx-defaults-module&#34;&gt;osx_defaults&lt;/a&gt; — to manage some user settings (not all!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used Ansible to build the macOS AMI for CI/CD, so here are some tips for such a case.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Some values are hardcoded intentionally in the code examples for the sake of simplicity and easy reading. You would probably want to parametrize them.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;xcode-installation-example&#34;&gt;Xcode installation example&lt;/h2&gt;
&lt;p&gt;The following tasks will help you to automate the basics.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Install Xcode&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;shell&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;xip --expand Xcode.xip&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;chdir&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/Applications&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Accept License Agreement&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;shell&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -license accept&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Accept License Agreement&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;shell&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -runFirstLaunch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Switch into newly installed Xcode context&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;shell&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;xcode-select --switch /Applications/Xcode.app/Contents/Developer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example-of-software-installation-with-brew&#34;&gt;Example of software installation with Brew&lt;/h2&gt;
&lt;p&gt;{% raw %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Install common build software&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;community.general.homebrew&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{{ item }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;state&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;latest&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;loop&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- swiftlint&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- swiftformat&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- wget&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;h2 id=&#34;screensharing-remote-desktop-configuration-example&#34;&gt;ScreenSharing (remote desktop) configuration example&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Turn On Remote Management&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;shell&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;./kickstart -activate -configure -allowAccessFor -specifiedUsers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;chdir&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Enable Remote Management for CI user&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;shell&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;./kickstart -configure -users ec2-user -access -on -privs -all&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;chdir&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Shell rulez, yes.&lt;/p&gt;
&lt;h1 id=&#34;building-the-ami&#34;&gt;Building the AMI&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;ami-build.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.packer.io/docs/builders/amazon/ebs&#34;&gt;Packer by HashiCorp&lt;/a&gt;, of course.&lt;/p&gt;
&lt;p&gt;I would love to compare Packer with EC2 Image Builder, but it &lt;a href=&#34;https://docs.aws.amazon.com/imagebuilder/latest/userguide/what-is-image-builder.html#image-builder-os&#34;&gt;does not support macOS&lt;/a&gt; yet (as of Feb&#39;21).&lt;/p&gt;
&lt;p&gt;Packer configuration is straightforward, so I want to highlight only the things specific to the &amp;ldquo;mac1.metal&amp;rdquo; use case.&lt;/p&gt;
&lt;h2 id=&#34;timeouts&#34;&gt;Timeouts&lt;/h2&gt;
&lt;p&gt;As I mentioned in the &lt;a href=&#34;https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html&#34;&gt;previous article&lt;/a&gt;, the creation and deletion time of the &amp;ldquo;mac1.metal&amp;rdquo; Instance is significantly bigger than Linux. That is why you should raise the polling parameters for the builder.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_polling&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;delay_seconds&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#3677a9&#34;&gt;30&lt;/span&gt;,
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;max_attempts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#3677a9&#34;&gt;60&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it would be best if you also increased the SSH timeout:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ssh_timeout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1h&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fortunately, Packer&amp;rsquo;s AMI builder does not require an explicit declaration of the Dedicated Host ID. So you can just reference the same subnet where you allocated the Host, assuming you did it with the enabled &amp;ldquo;Auto placement&amp;rdquo; parameter during the host creation.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;tenancy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;subnet_id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;your-subnet-id&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;provisioning&#34;&gt;Provisioning&lt;/h2&gt;
&lt;p&gt;Packer has &lt;a href=&#34;https://www.packer.io/docs/provisioners/ansible&#34;&gt;Ansible Provisioner&lt;/a&gt; that I used for the AMI. Its documentation is also very clean and straightforward.&lt;/p&gt;
&lt;p&gt;But it is still worth mentioning that if you want to parametrize the Ansible playbook, then the following configuration example will be handy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;extra_arguments&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; [
    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--extra-vars&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;your-variable-foo=your-value-bar]&amp;#34;&lt;/span&gt;
  ]&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ansible_env_vars&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt; [
    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ANSIBLE_PYTHON_INTERPRETER=auto_legacy_silent&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ANSIBLE_OTHER_ENV_VARIABLE=other_value&amp;#34;&lt;/span&gt;
  ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;configuration-at-launch&#34;&gt;Configuration at launch&lt;/h1&gt;
&lt;p&gt;If you&amp;rsquo;re familiar with AWS EC2, you probably know what the Instance &lt;code&gt;user data&lt;/code&gt; is.&lt;/p&gt;
&lt;p&gt;A group of AWS developers made something similar for the macOS: &lt;a href=&#34;https://github.com/aws/ec2-macos-init&#34;&gt;EC2 macOS Init&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It does not support &lt;code&gt;cloud-init&lt;/code&gt; as on Linux-based Instances, but it can run shell scripts, which is quite enough.&lt;/p&gt;
&lt;p&gt;EC2 macOS Init utility is a Launch Daemon (macOS terminology) that runs on behalf of the &lt;code&gt;root&lt;/code&gt; user at system boot. It executes the commands according to the so-called Priority Groups, or the sequence in other words.&lt;/p&gt;
&lt;p&gt;The number of the group corresponds to the execution order. You can put several tasks into a single Priority Group, and the tool will execute them simultaneously.&lt;/p&gt;
&lt;p&gt;EC2 macOS Init uses a human-readable configuration file in &lt;code&gt;toml&lt;/code&gt; format.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[[Module]]
  Name = &amp;quot;Create-some-folder&amp;quot;
  PriorityGroup = 3
  FatalOnError = false 
  RunPerInstance = true 
  [Module.Command]
    Cmd = [&amp;quot;mkdir&amp;quot;, &amp;quot;/Users/ec2-user/my-directory&amp;quot;] 
    RunAsUser = &amp;quot;ec2-user&amp;quot;
    EnvironmentVars = [&amp;quot;MY_VAR_FOO=myValueBar&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I should clarify some things here.&lt;/p&gt;
&lt;p&gt;Modules — a set of pre-defined modules for different purposes. It is something similar to the Ansible modules.&lt;/p&gt;
&lt;p&gt;You can find the list of available modules here &lt;a href=&#34;https://github.com/aws/ec2-macos-init/tree/master/lib/ec2macosinit&#34;&gt;ec2-macos-init/lib/ec2macosinit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;RunPerInstance&lt;/code&gt; directive controls whether a module should run. There are three of such directives, and here is what they mean:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RunPerBoot&lt;/code&gt; — module will run at every system boot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RunPerInstance&lt;/code&gt; — module will run once for the Instance. Each Instance has a unique ID; the init tool fetches it from the AWS API before the execution and keeps its execution history per Instance ID. When you create a new Instance from the AMI, it will have a unique ID, and the module will run again.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RunOnce&lt;/code&gt; — module will run only once, despite the instance ID change&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I mentioned the execution history above. When EC2 macOS Init runs on the Instance first time, it creates a unique directory with the name per Instance ID to store the execution history and user data copy.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RunPerInstance&lt;/code&gt; and &lt;code&gt;RunOnce&lt;/code&gt; directives depend on the execution history, and modules with those directives will run again on the next boot if the previous execution failed. It was not obvious to me why RunOnce keeps repeating itself every boot until I dug into &lt;a href=&#34;https://github.com/aws/ec2-macos-init/blob/master/lib/ec2macosinit/module.go#L110&#34;&gt;the source code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, there is a module for user data. It runs at the end by default (priority group #4) and pulls the user data script from AWS API before script execution.&lt;/p&gt;
&lt;p&gt;I suggest looking into the default &lt;a href=&#34;https://github.com/aws/ec2-macos-init/blob/master/configuration/init.toml&#34;&gt;init.toml&lt;/a&gt; configuration file to get yourself more familiar with the capabilities of the tool.&lt;/p&gt;
&lt;p&gt;The init tool can also clear its history, which is useful for the new AMI creation.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ec2-macos-init clean -all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you can run the init manually for debugging purposes.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ec2-macos-init run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also combine the EC2 macOS Init actions (made by modules) with your script in user data for more accurate nontrivial configurations.&lt;/p&gt;
&lt;h1 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h1&gt;
&lt;p&gt;As a whole, building and operating macOS-based AMI does not differ from AMI management for other platforms.&lt;/p&gt;
&lt;p&gt;There are the same principle stages: prepare, clear, build, execute deployment script (if necessary). Though, the particular implementation of each step has its nuances and constraints.&lt;/p&gt;
&lt;p&gt;So the whole process may look as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provision and configure needed software with Ansible playbook&lt;/li&gt;
&lt;li&gt;Clean-up system logs and EC2 macOS Init history (again, with Ansible task)&lt;/li&gt;
&lt;li&gt;Create the AMI&lt;/li&gt;
&lt;li&gt;Add more customizations at launch with EC2 macOS Init modules and user data (that also executes your Ansible playbook or shell commands)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Getting into all this was both fun and interesting. Sometimes painful, though. 😆&lt;/p&gt;
&lt;p&gt;I sincerely hope this article was helpful to you. Thank you for reading!&lt;/p&gt;
</content>
        </item>
        
        <item>
            <title>Terraforming mac1.metal at AWS</title>
            <link>https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html</link>
            <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">b59ec6d3701cd18d92607e4c6a6503dd</guid>
            <description>How to manage mac1.metal EC2 instances with Terraform</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html2021-01-20-terraforming-mac1-metal-at-AWS.jpg"</url>
                </image>&lt;div class=&#34;updatenotice&#34;&gt;
    Updated on the 23rd of October, 2021: Terraform AWS provider now &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_host&#34;&gt;supports&lt;/a&gt; Dedicated Hosts natively
&lt;/div&gt;
&lt;p&gt;In November 2021, AWS &lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/&#34;&gt;announced&lt;/a&gt; the support for Mac mini instances.&lt;/p&gt;
&lt;p&gt;I believe this is huge, even despite the number of constraints this solution has. This offering opens the door to seamless macOS CI/CD integration into existing AWS infrastructure.&lt;/p&gt;
&lt;p&gt;So here is a quick-start example of creating the dedicated host and the instance altogether using Terraform.&lt;/p&gt;
&lt;p&gt;I intentionally used some hardcoded values for the sake of simplicity in the example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_ec2_host&amp;#34; &amp;#34;example_host&amp;#34;&lt;/span&gt; {
  instance_type     = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;mac1.metal&amp;#34;&lt;/span&gt;
  availability_zone = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;us-east-1a&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_instance&amp;#34; &amp;#34;example_instance&amp;#34;&lt;/span&gt; {
  ami           = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;aws_ami&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mac1metal&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;id&lt;/span&gt;
  host_id       = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;aws_ec2_host&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;example_host&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;id&lt;/span&gt;
  instance_type = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;mac1.metal&amp;#34;&lt;/span&gt;
  subnet_id     = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;aws_subnet&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;example_subnet&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;id&lt;/span&gt;
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_subnet&amp;#34; &amp;#34;example_subnet&amp;#34;&lt;/span&gt; {
  availability_zone = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;us-east-1a&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;filter&lt;/span&gt; {
    name   = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;tag:Tier&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt; # you should omit this filter if you don&amp;#39;t distinguish your subnets on private and public 
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    values = [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;private&amp;#34;&lt;/span&gt;]
  }
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_ami&amp;#34; &amp;#34;mac1metal&amp;#34;&lt;/span&gt; {
  owners      = [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;amazon&amp;#34;&lt;/span&gt;]
  most_recent = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;filter&lt;/span&gt; {
    name   = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;
    values = [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;amzn-ec2-macos-11*&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#999;font-style:italic&#34;&gt; # get latest BigSur AMI
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple as that, yes. Now, you can integrate it into your CI system and have the Mac instance with the underlying host in a bundle.&lt;/p&gt;
&lt;p&gt;💡 Pro tip: you can leverage the &lt;code&gt;aws_ec2_instance_type_offerings&lt;/code&gt; &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ec2_instance_type_offerings&#34;&gt;Data Source&lt;/a&gt; and use its output with &lt;code&gt;aws_subnet&lt;/code&gt; source to avoid availability zone hardcoding.&lt;/p&gt;
&lt;p&gt;To make the code more uniform and reusable, you can wrap it into a &lt;a href=&#34;https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html&#34;&gt;Terraform module&lt;/a&gt; that accepts specific parameters (such as &lt;code&gt;instance_type&lt;/code&gt; or &lt;code&gt;availability_zone&lt;/code&gt;) as input variables.&lt;/p&gt;
</content>
        </item>
        
        <item>
            <title>mac1.metal EC2 Instance — user experience</title>
            <link>https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html</link>
            <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">4fb5af676ce68f015297b6d7e8088a38</guid>
            <description>An overview of one-month user experience with the new mac1.metal EC2 Instances from AWS</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html2021-01-19-mac1-metal-EC2-Instance-user-experience.jpg"</url>
                </image>&lt;h2 id=&#34;amazon-ec2-mac-instances&#34;&gt;Amazon EC2 Mac Instances&lt;/h2&gt;
&lt;p&gt;Something cool and powerful with inevitable trade-offs. As everything in this world.&lt;/p&gt;
&lt;p&gt;AWS announced EC2 macOS-based instances on the 30th of November 2020, and after more than a month of tests, I would like to share some findings and impressions about it.&lt;/p&gt;
&lt;p&gt;First of all, the things you can easily find, but it&amp;rsquo;s still worth to say:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The new instance family is called &lt;code&gt;mac1.metal&lt;/code&gt;. Guess we should expect mac2 or mac3; otherwise, why did they put a number in the name?&lt;/li&gt;
&lt;li&gt;They added &lt;a href=&#34;https://aws.amazon.com/ec2/nitro/&#34;&gt;AWS Nitro System&lt;/a&gt; to integrate them with many AWS services.&lt;/li&gt;
&lt;li&gt;The Instance must be placed onto a &lt;a href=&#34;https://aws.amazon.com/ec2/dedicated-hosts/&#34;&gt;Dedicated Host&lt;/a&gt;. Only one Instance per Host is allowed because the Host is an actual Mac Mini in that case.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t pay anything for the Instance itself, but you pay for the Dedicated Host leasing — $1.083, and the minimum lease time is 24 hours. So the launch of the &amp;ldquo;mac1.metal&amp;rdquo; Instance costs $26 at minimum. Prices provided for the cheapest region — North Virginia.&lt;/li&gt;
&lt;li&gt;You can apply &lt;a href=&#34;https://docs.aws.amazon.com/savingsplans/latest/userguide/what-is-savings-plans.html&#34;&gt;Saving Plans&lt;/a&gt; to save some money.&lt;/li&gt;
&lt;li&gt;Mojave (10.14) and Catalina (10.15) are supported at the moment, with &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/mac/&#34;&gt;&amp;ldquo;support for macOS Big Sur (11.0) coming soon&amp;rdquo;&lt;/a&gt;. I expect it to be in 2021, though.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-can-it-do&#34;&gt;What can it do&lt;/h2&gt;
&lt;p&gt;Here is a list of some features that the &amp;ldquo;mac1.metal&amp;rdquo; instance has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It lives in your VPC because it is an EC2 Instance so that you can access many other services.&lt;/li&gt;
&lt;li&gt;It supports the new gp3 EBS type (and other types as well).&lt;/li&gt;
&lt;li&gt;It supports SSM Agent and Session Manager.&lt;/li&gt;
&lt;li&gt;It has several AWS tools pre-installed.&lt;/li&gt;
&lt;li&gt;It has pre-installed Enhanced Network Interface drivers. My test upload/download to S3 was about 300GB/s.&lt;/li&gt;
&lt;li&gt;It can report CPU metrics to CloudWatch (if you ever need it, though).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-cant-it-do&#34;&gt;What can&amp;rsquo;t it do&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It can&amp;rsquo;t be used in Auto Scaling because of a Dedicated Host.&lt;/li&gt;
&lt;li&gt;It can&amp;rsquo;t recognize the attached EBS if you connected it while the Instance was running — you must reboot the Instance to make it visible.&lt;/li&gt;
&lt;li&gt;It does not support several services that rely on additional custom software, such as &amp;ldquo;EC2 Instance Connect&amp;rdquo; and &amp;ldquo;AWS Inspect.&amp;rdquo; But I think that AWS will add macOS distros for those soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;launching-the-instance&#34;&gt;Launching the Instance&lt;/h2&gt;
&lt;p&gt;Jeff Bar &lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/&#34;&gt;published&lt;/a&gt; an excellent how-to about kickstart of the &amp;ldquo;mac1.metal&amp;rdquo;, so I will focus on things he did not mention.&lt;/p&gt;
&lt;p&gt;Once you allocated the Dedicated Host and launched an Instance on it, the underlying system connects the EBS with a root file system to the Mac Mini.&lt;/p&gt;
&lt;p&gt;It is an AMI with 32G EBS (as per Jan&#39;21) with macOS pre-installed.&lt;/p&gt;
&lt;p&gt;That means two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The built-it physical SSD is still there and still yours to use; however, AWS does not manage or support the Apple hardware&amp;rsquo;s internal SSD.&lt;/li&gt;
&lt;li&gt;You must resize the disk manually (if you specified the EBS size to be more than 32G)[1].&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The time from the Instance launch till you&amp;rsquo;re able to SSH into it varies between 15 and 20 minutes.&lt;/p&gt;
&lt;p&gt;You have the option to access it over SSH with your private key. If you need to set up Screen Sharing, you have to allow it through the &amp;ldquo;kickstart&amp;rdquo; command-line utility and setting the user password [2].&lt;/p&gt;
&lt;h2 id=&#34;destroying-the-instance&#34;&gt;Destroying the Instance&lt;/h2&gt;
&lt;p&gt;What an easy thing to do, right? Well, it depends.&lt;/p&gt;
&lt;p&gt;When you click on the &amp;ldquo;Terminate&amp;rdquo; item in the Instance actions menu, the complex Instance scrubbing process begins.&lt;/p&gt;
&lt;p&gt;AWS wants to make sure that anyone who uses the Host (Mac mini) after you will get your data stored neither on disks (including physical SSD mentioned earlier), nor inside memory or NVRAM, nor anywhere else. They do not share the info about this scrubbing process&amp;rsquo;s details, but it takes more than an hour to complete.&lt;/p&gt;
&lt;p&gt;When scrubbing is started, the Dedicated Host transitions to the Pending state. Dedicated Host transitions to Available state once scrubbing is finished. But you must wait for another 10-15 minutes to be able to release it finally.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know why they set the Available state value earlier than the Host is available for operations, but this is how it works now (Jan&#39;21).&lt;/p&gt;
&lt;p&gt;Therefore, you can launch the next Instance on the same Host not earlier than ~1,5 hours after you terminated the previous. That doesn&amp;rsquo;t seem very pleasant in the first couple of weeks, but you will get used to it. 😄&lt;/p&gt;
&lt;p&gt;And again: you can release the &amp;ldquo;mac1.metal&amp;rdquo; Dedicated Host not earlier than 24 hours after it was allocated. So plan your tests wisely.&lt;/p&gt;
&lt;h2 id=&#34;legal-things&#34;&gt;Legal things&lt;/h2&gt;
&lt;p&gt;I could not find it on a documentation page, but A Cloud Guru folks &lt;a href=&#34;https://acloudguru.com/blog/engineering/what-you-need-to-know-about-awss-new-ec2-mac-instances&#34;&gt;say&lt;/a&gt; that you must use new Instances solely for developer services, and you must agree to all of the EULAs.&lt;/p&gt;
&lt;p&gt;Sounds reasonable to me, but that could be written somewhere in the docs still, at least. Please let me know if you found it there.&lt;/p&gt;
&lt;h2 id=&#34;some-more-cool-stuff-to-check&#34;&gt;Some more cool stuff to check:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aws/ec2-macos-init&#34;&gt;EC2 macOS Init&lt;/a&gt; launch daemon, which is used to initialize Mac instances.
&lt;a href=&#34;https://github.com/aws/homebrew-aws&#34;&gt;EC2 macOS Homebrew Tap&lt;/a&gt; (Third-Party Repository) with several management tools which come pre-installed into macOS AMI from AWS.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Indeed it is powerful, and it has its trade-offs, such as price and some technical constraints. But it is a real MacOS device natively integrated into the AWS environment. So I guess it worth to be tried!&lt;/p&gt;
&lt;p&gt;Thanks for reading this! Stay tuned for more user experience feedback about baking custom AMI&amp;rsquo;s, automated software provisioning with Ansible, and other adventures with mac1.metal!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;[1] How to resize the EBS at mac1.metal in Terminal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Get the identifier of EBS (look for the first one with GUID_partition_scheme):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;diskutil list physical external&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or here is a more advanced version to be used in a script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;DISK_ID&lt;/span&gt;=&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;diskutil list physical external | grep &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;GUID_partition_scheme&amp;#39;&lt;/span&gt;| tr -s &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; | cut -d&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f6&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It would probably be &lt;code&gt;disk0&lt;/code&gt; if you did not attach additional EBS.&lt;/p&gt;
&lt;p&gt;Then run the repair job for the disk, using its identifier:
&lt;code&gt;diskutil repairDisk disk0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Advanced version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yes | diskutil repairDisk &lt;span style=&#34;color:#40ffff&#34;&gt;$DISK_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now get the APFS container identifier (look for Apple_APFS):
&lt;code&gt;diskutil list physical external&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Advanced version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;APFS_ID&lt;/span&gt;=&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;diskutil list physical external | grep &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;Apple_APFS&amp;#39;&lt;/span&gt; | tr -s &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; | cut -d&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f8&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It would probably be &lt;code&gt;disk0s2&lt;/code&gt; if you did not attach additional EBS.&lt;/p&gt;
&lt;p&gt;Finally, resize the APFS container:
&lt;code&gt;diskutil apfs resizeContainer disk0s2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Advanced version&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;diskutil apfs resizeContainer &lt;span style=&#34;color:#40ffff&#34;&gt;$APFS_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;[2]How to setup Screen Sharing at mac1.metal in Terminal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;kickstart&lt;/code&gt; command-line tool resides in &lt;code&gt;/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/&lt;/code&gt; so you&amp;rsquo;ll better to cd into that directory for convenience:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Turn On Remote Management for a user to be specified later&lt;/span&gt;
sudo ./kickstart -activate -configure -allowAccessFor -specifiedUsers

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Enable Remote Management for ec2-user user&lt;/span&gt;
sudo ./kickstart -configure -users ec2-user -access -on -privs -all

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Set the user password &lt;/span&gt;
sudo passwd ec2-user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
        </item>
        
        <item>
            <title>AWS CloudShell</title>
            <link>https://serhii.vasylenko.info/2020/12/16/aws-cloudshell.html</link>
            <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">afadfb0a0acf3169a27eb22d7a65cac3</guid>
            <description>Native and official way to run AWS CLI in a browser</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2020/12/16/aws-cloudshell.html2020-12-16-aws-cloudshell.png"</url>
                </image>&lt;p&gt;A simple but cool announcement from AWS — &lt;a href=&#34;https://aws.amazon.com/cloudshell/&#34;&gt;AWS CloudShell&lt;/a&gt;.
A tool for ad-hoc AWS management via CLI directly in your browser.&lt;/p&gt;
&lt;p&gt;I like when AWS releases something simple to understand and yet powerful.&lt;br&gt;
So it is not another &lt;a href=&#34;https://aws.amazon.com/devops-guru/&#34;&gt;DevOps Guru&lt;/a&gt;, believe me :)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yes, this is similar to the shells that GCE and Azure have.&lt;/li&gt;
&lt;li&gt;No, you can’t access your instances from it, so it’s not a jump server (bastion host).&lt;/li&gt;
&lt;li&gt;Yes, it has AWS CLI and other tools pre-installed. Even Python and Node.js.&lt;/li&gt;
&lt;li&gt;No, you can’t (well, you can, but should not) use it as an alternative to the day-to-day console on your laptop.&lt;/li&gt;
&lt;li&gt;Yes, you can manage all resources from that shell as much as your IAM permissions allow you (even with SSO, which is pretty cool).&lt;/li&gt;
&lt;li&gt;No, it does not support Docker.&lt;/li&gt;
&lt;li&gt;Yes, you have 1 GB of permanent storage and the ability to transfer files in and out.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;more-yes-and-nos-here&#34;&gt;More Yes and No’s here:&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/cloudshell/latest/userguide/faq-list.html&#34;&gt;https://docs.aws.amazon.com/cloudshell/latest/userguide/faq-list.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cloudshell/faqs/&#34;&gt;https://aws.amazon.com/cloudshell/faqs/&lt;/a&gt;&lt;/p&gt;
</content>
        </item>
        
        <item>
            <title>Manage Ansible playbook secrets with AWS services</title>
            <link>https://serhii.vasylenko.info/2020/08/06/ansible-secrets-aws-ssm-sm.html</link>
            <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">aac5469178cea7c40b07a137dcfdd56e</guid>
            <description>A better way to store sensitive information for Ansible on EC2 or other services</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2020/08/06/ansible-secrets-aws-ssm-sm.html2020-08-06-ansible-secrets-aws-ssm-sm.png"</url>
                </image>&lt;p&gt;Lookup plugins for Ansible allow you to do a lot of cool things. One of them is to securely pass sensitive information to your playbooks.
If you manage some apps in AWS with Ansible, then using Parameter Store or Secrets Manager along with it might greatly improve your security.&lt;/p&gt;
&lt;h2 id=&#34;variables-with-ssm-parameter-store&#34;&gt;Variables with SSM Parameter Store&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say you have some variables defined in &amp;lsquo;defaults/main.yaml&amp;rsquo; file of your role or maybe in group_vars.yaml file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# content of dev.vars.yaml to be included in your play or role&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;use_tls&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;application_port&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;app_env&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;development&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;stripe_api_key&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;1HGASU2eZvKYlo2CT5MEcnC39HqLyjWD&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you store such things locally on Ansible control node, you probably encrypt it with &lt;a href=&#34;https://docs.ansible.com/ansible/latest/user_guide/vault.html&#34;&gt;ansible-vault&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SSM Parameter Store gives you more flexibility and security by centralized storage and management of parameters and secrets, so let&amp;rsquo;s use it with Ansible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# content of dev.vars.yaml to be included in your play or role&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;use_tls&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{{lookup(&amp;#39;aws_ssm&amp;#39;, &amp;#39;/dev/webserver/use_tls&amp;#39;)}}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;application_port&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{{lookup(&amp;#39;aws_ssm&amp;#39;, &amp;#39;/dev/webserver/application_port&amp;#39;)}}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;app_env&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{{lookup(&amp;#39;aws_ssm&amp;#39;, &amp;#39;/dev/webserver/app_env&amp;#39;)}}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;stripe_api_key&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{{lookup(&amp;#39;aws_ssm&amp;#39;, &amp;#39;/dev/webserver/stripe_api_key&amp;#39;)}}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The syntax is fairly simple:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;aws_ssm&lt;/code&gt; argument – is the name of plugin.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;/dev/webserver/use_tls&lt;/code&gt; argument – is the path to the key in Paramter Store.&lt;/p&gt;
&lt;p&gt;Surely you can do the same for a group of servers with group variables, for example:&lt;/p&gt;
&lt;p&gt;You can use this anywhere you can use templating: in a play, in variables file, or a Jinja2 template.&lt;/p&gt;
&lt;h2 id=&#34;variables-with-secret-manager&#34;&gt;Variables with Secret Manager&lt;/h2&gt;
&lt;p&gt;Another cool lookup plugin is Secrets Manager. In a nutshell, it has the same kind of functionality but it uses JSON format by feault.&lt;/p&gt;
&lt;p&gt;Here is a quick example of its functionality in a Playbook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Extract something secrets from Secret Manager&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;debug&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;msg&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{{ lookup(&amp;#39;aws_secret&amp;#39;, &amp;#39;dev/some-secrets&amp;#39;)}}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above task will generate the following output&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;TASK [Extract something secrets from Secret Manager] ****************************************************
ok: [some_server] =&amp;gt; {
    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;dbname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;database&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;engine&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;mysql&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3306&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;db_user&amp;#34;&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is nice if you want to insert a JSON as is, but you will need additional parsing in case you want to get only some of JSON elements.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you’re using Ansible in CI/CD, then having it on an EC2 Instance with the IAM role will make you avoid keeping any secrets on that instance at all.&lt;br&gt;
The IAM role must allow at least the read access to SSM Parameter Store (+ KMS read access to be able to decrypt the keys) or the read access to Secrets Manager.&lt;/p&gt;
&lt;p&gt;You can find documentation for described plugins here &lt;a href=&#34;https://docs.ansible.com/ansible/latest/plugins/lookup/aws_ssm.html&#34;&gt;aws_ssm&lt;/a&gt; and here &lt;a href=&#34;https://docs.ansible.com/ansible/latest/plugins/lookup/aws_secret.html&#34;&gt;aws_secret&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More about lookup plugins: &lt;a href=&#34;https://docs.ansible.com/ansible/latest/plugins/lookup.html&#34;&gt;https://docs.ansible.com/ansible/latest/plugins/lookup.html&lt;/a&gt;&lt;/p&gt;
</content>
        </item>
        
        <item>
            <title>AWS SAA exam results</title>
            <link>https://serhii.vasylenko.info/2020/03/15/aws-solutions-architect-associate-exam-tips.html</link>
            <pubDate>Sun, 15 Mar 2020 20:16:20 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">956531ad188e828e10ed1590ad651069</guid>
            <description>Sharing my AWS SAA exam results</description>
            <content>
                <image>
                    <url>"https://serhii.vasylenko.info/2020/03/15/aws-solutions-architect-associate-exam-tips.html2020-03-15-aws-solutions-architect-associate-exam-tips_AWS-Certified_Solutions-Architect_Associate.png"</url>
                </image>&lt;h3 id=&#34;926-out-of-1000&#34;&gt;926 out of 1000&lt;/h3&gt;
&lt;p&gt;Last week I&amp;rsquo;ve successfully passed AWS SAA exam with 926 points from 1000 possible. I can&amp;rsquo;t help saying this and showing off my &lt;a href=&#34;https://www.youracclaim.com/badges/7c6c7a70-63f5-4854-97ab-e5c1ad251231&#34;&gt;verification page&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}, just because I am very happy so please excuse me my bragging.&lt;/p&gt;
&lt;h3 id=&#34;what-helped-me&#34;&gt;What helped me&lt;/h3&gt;
&lt;p&gt;But I would like to share some advices and tips with anyone who reads this and wants to pass the exam. I mean, I could just twit about it if that was only about saying &amp;ldquo;hey look at me!&amp;rdquo;, right?&lt;/p&gt;
&lt;p&gt;It took me a month of intensive studying and here is what helped me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Video course&lt;/strong&gt; at CloudGuru - &lt;a href=&#34;https://acloud.guru/learn/aws-certified-solutions-architect-associate&#34;&gt;AWS Certified Solutions Architect Associate&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}.&lt;/p&gt;
&lt;p&gt;Price: $50 for a monthly subscription.&lt;/p&gt;
&lt;p&gt;Tips: They have a 7 days free trial, which is actually quite enough to view the whole course. But I strongly recommend purchasing a full month, because it is better to view the lectures gradually during couple of weeks for better learning. Plus they have a nice exam simulator where you can practice several times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Practice Tests&lt;/strong&gt; set at Udemy - &lt;a href=&#34;https://www.udemy.com/course/aws-certified-solutions-architect-associate-amazon-practice-exams-saa-c02/&#34;&gt;AWS Certified Solutions Architect Associate Practice Exams&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}.&lt;/p&gt;
&lt;p&gt;Price: $40 or only $12 if you&amp;rsquo;re lucky to get it during a sale. But they make sales quite often and they frequently provide  discuounts for new students. I purchaced it for $12.&lt;/p&gt;
&lt;p&gt;Tips: practice tests are very useful, do not skip buying them. You will find your weak spots and also learn a lot by passing these tests. This particular set has a quite good explanations for each question.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exam Guide&lt;/strong&gt; at O&amp;rsquo;relly Media &lt;a href=&#34;https://learning.oreilly.com/library/view/aws-certified-solutions/9781260108262/&#34;&gt;AWS Certified Solutions Architect Associate All-in-One Exam Guide&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}.&lt;/p&gt;
&lt;p&gt;Price: this one can be easily read during 10 days free trial period :wink:&lt;/p&gt;
&lt;p&gt;Tips: The new exam version is released on 23rd of March, so it is better to find a new updated version of exam guide. And I suggest reading the guide after the video course or vise versa, but do not mix them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Making notes&lt;/strong&gt;. Seriously, note taking helps you memorize better. Do not skip it, and note your video courses as well as exam guide. Later, you will find your notes very helpful before the exam day - they will fresh up your memory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thank you for reading down to this point. I hope my advices were helpful and you will pass the exam!&lt;/p&gt;
</content>
        </item>
        
    </channel>
</rss>