<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>architecture on Serhii Vasylenko</title>
        <link>https://serhii.vasylenko.info/tags/architecture/</link>
        <description>Recent content in architecture on Serhii Vasylenko</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 24 Oct 2021 02:00:31 +0300</lastBuildDate><atom:link href="https://serhii.vasylenko.info/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
        <item>
            <title>Auto Scaling Group for your macOS EC2 Instances fleet</title>
            <link>https://serhii.vasylenko.info/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/</link>
            <pubDate>Sun, 24 Oct 2021 02:00:31 +0300</pubDate>
            
            <guid>https://serhii.vasylenko.info/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/</guid>
            <description>&lt;p&gt;It‚Äôs been almost a year since I started using macOS EC2 instances on AWS: there were &lt;a href=&#34;https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html&#34;&gt;ups and downs in service offerings&lt;/a&gt; and a lot of discoveries with &lt;a href=&#34;https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html&#34;&gt;macOS AMI build&lt;/a&gt; automation.&lt;/p&gt;
&lt;p&gt;And I like this small but so helpful update of EC2 service very much: with mac1.metal instances, seamless integration of Apple-oriented CI/CD with other AWS infrastructure could finally happen.&lt;/p&gt;
&lt;p&gt;While management of a single mac1.metal node (or a tiny number of ones) is not a big deal (especially when &lt;a href=&#34;https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html&#34;&gt;Dedicated Host support&lt;/a&gt; was added to Terraform provider), governing the fleet of instances is still complicated. Or it has been complicated until recent days.&lt;/p&gt;
&lt;h2 id=&#34;official--unofficial-auto-scaling-for-macos&#34;&gt;Official / Unofficial Auto Scaling for macOS&lt;/h2&gt;
&lt;p&gt;With a growing number of instances, the following challenges arise:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scale mac1.metal instances horizontally&lt;/li&gt;
&lt;li&gt;Automatically allocate and release Dedicated Hosts needed for instances&lt;/li&gt;
&lt;li&gt;Automatically replace unhealthy instances&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have worked with AWS before, you know that Auto Scaling Group service can solve such things.&lt;/p&gt;
&lt;p&gt;However, official documentation (as of October 2021) &lt;a href=&#34;https://github.com/awsdocs/amazon-ec2-user-guide/blob/269ac7494dd3aef62ae5d45e8b11f7ea5cadd2bf/doc_source/ec2-mac-instances.md&#34;&gt;states&lt;/a&gt;: ‚ÄúYou cannot use Mac instances with Amazon EC2 Auto Scaling‚Äù.&lt;/p&gt;
&lt;p&gt;But in fact, you can.&lt;/p&gt;
&lt;h2 id=&#34;combining-services-to-get-real-power&#34;&gt;Combining services to get real power&lt;/h2&gt;
&lt;p&gt;So how does all that work?&lt;/p&gt;
&lt;p&gt;Let‚Äôs review the diagram that illustrates the interconnection between involved services:&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;general-scheme_compressed.png&#34;
         alt=&#34;Services logical interconnection&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Services logical interconnection&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;With the help of Licence Manager service and Launch Templates, you can set up EC2 Auto Scaling Group for mac1.metal and leave the automated instance provisioning to the service.&lt;/p&gt;
&lt;h3 id=&#34;license-configuration&#34;&gt;License Configuration&lt;/h3&gt;
&lt;p&gt;First, you need to create a License Configuration so that the Host resource group can allocate the hots.&lt;/p&gt;
&lt;p&gt;Go to AWS License Manager -&amp;gt; Customer managed licenses -&amp;gt; Create customer-managed license.&lt;/p&gt;
&lt;p&gt;Specify &lt;strong&gt;Sockets&lt;/strong&gt; as the Licence type. You may skip setting the Number of Sockets. However, the actual limit of mac1.metal instances per account is regulated by Service Quota. The default number of mac instances allowed per account is 3. Therefore, consider &lt;a href=&#34;https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html&#34;&gt;increasing&lt;/a&gt; this to a more significant number.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;license-configuration_compressed.png&#34;
         alt=&#34;Licence configuration values&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Licence configuration values&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;host-resource-group&#34;&gt;Host resource group&lt;/h3&gt;
&lt;p&gt;Second, create the Host resource group: AWS License Manager -&amp;gt; Host resource groups -&amp;gt; Create host resource group.&lt;/p&gt;
&lt;p&gt;When creating the Host resource group, check ‚Äú&lt;strong&gt;Allocate hosts automatically&lt;/strong&gt;‚Äù and ‚Äú&lt;strong&gt;Release hosts automatically&lt;/strong&gt;‚Äù but leave ‚ÄúRecover hosts automatically‚Äù unchecked. Dedicated Host does &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html#dedicated-hosts-recovery-instances&#34;&gt;not support host recovery&lt;/a&gt; for mac1.metal.
However, Auto Scaling Group will maintain the desired number of instances if one fails the health check (which assumes the case of host failure as well).&lt;/p&gt;
&lt;p&gt;Also, I recommend specifying ‚Äúmac1‚Äù as an allowed Instance family for the sake of transparent resource management: only this instance type is permitted to allocate hosts in the group.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;host-resource-group_compressed.png&#34;
         alt=&#34;Host resource group configuration values&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Host resource group configuration values&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Optionally, you may specify the license association here (the Host group will pick any compatible license) or select the license you created on step one.&lt;/p&gt;
&lt;h3 id=&#34;launch-template&#34;&gt;Launch Template&lt;/h3&gt;
&lt;p&gt;Create Launch Template: EC2 -&amp;gt; Launch templates -&amp;gt; Create launch template.&lt;/p&gt;
&lt;p&gt;I will skip the description of all Launch Template parameters (but here is a nice &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html&#34;&gt;tutorial&lt;/a&gt;), if you don‚Äôt mind, and keep focus only on the items relevant to the current case.&lt;/p&gt;
&lt;p&gt;Specify mac1.metal as the Instance type. Later, in Advanced details: find the &lt;strong&gt;Tenancy&lt;/strong&gt; parameter and set it to ‚ÄúDedicated host‚Äù; for &lt;strong&gt;Target host by&lt;/strong&gt; select ‚ÄúHost resource group‚Äù, and once selected the new parameter &lt;strong&gt;Tenancy host resource group&lt;/strong&gt; will appear where you should choose your host group; select your license in &lt;strong&gt;License configurations&lt;/strong&gt; parameter.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;launch-template_compressed.png&#34;
         alt=&#34;Launch Template configuration values&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Launch Template configuration values&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;auto-scaling-group&#34;&gt;Auto Scaling Group&lt;/h3&gt;
&lt;p&gt;Finally, create the Auto Scaling Group: EC2 -&amp;gt; Auto Scaling groups -&amp;gt; Create Auto Scaling group.&lt;/p&gt;
&lt;p&gt;The vital thing to note here ‚Äî is the availability of the mac1.metal instance in particular AZ.&lt;/p&gt;
&lt;p&gt;Mac instances are available in us-east-1 and &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-ec2-mac-instances-additional-regions/&#34;&gt;7 more regions&lt;/a&gt;, but not every Availability Zone in the region supports it. So you must figure out which AZ supports the needed instance type.&lt;/p&gt;
&lt;p&gt;There is no documentation for that, but there is an AWS CLI command that can answer this question: &lt;a href=&#34;https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/describe-instance-type-offerings.html&#34;&gt;describe-instance-type-offerings ‚Äî AWS CLI 2.3.0 Command Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is an example for the us-east-1 region:
&lt;p&gt;&lt;details &gt;
&lt;summary markdown=&#34;span&#34; style=&#34;font-size: 0.8em; font-weight: bold&#34;&gt;üîç Click here to see the code snippet&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt; aws ec2 describe-instance-type-offerings --location-type availability-zone-id --filters &lt;span style=&#34;color:#40ffff&#34;&gt;Name&lt;/span&gt;=instance-type,Values=mac1.metal --region us-east-1 --output text

INSTANCETYPEOFFERINGS	mac1.metal	use1-az6	availability-zone-id
INSTANCETYPEOFFERINGS	mac1.metal	use1-az4	availability-zone-id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;Keep that nuance in mind when selecting a subnet for the mac1.metal instances.&lt;/p&gt;
&lt;p&gt;When you know the AZ, specify the respective Subnet in the Auto Scaling Group settings, and you&amp;rsquo;re ready to go!&lt;/p&gt;
&lt;h2 id=&#34;bring-infrastructure-as-code-here&#34;&gt;Bring Infrastructure as Code here&lt;/h2&gt;
&lt;p&gt;I suggest describing all that as a code. I prefer Terraform, and its AWS provider supports the needed resources. Except one.&lt;/p&gt;
&lt;p&gt;As of October 2021, resources supported :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/servicequotas_service_quota&#34;&gt;aws_servicequotas_service_quota&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/licensemanager_license_configuration&#34;&gt;aws_licensemanager_license_configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_template&#34;&gt;aws_launch_template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group&#34;&gt;aws_autoscaling_group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Host resource group is not yet supported by the provider, unfortunately. However, we can use CloudFormation in Terraform to overcome that: describe the Host resource group as &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudformation_stack&#34;&gt;aws_cloudformation_stack&lt;/a&gt; Terraform resource using CloudFormation template from a file.&lt;/p&gt;
&lt;p&gt;Here is how it looks like:
&lt;p&gt;&lt;details &gt;
&lt;summary markdown=&#34;span&#34; style=&#34;font-size: 0.8em; font-weight: bold&#34;&gt;üîç Click here to see the code snippet&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_licensemanager_license_configuration&amp;#34; &amp;#34;this&amp;#34;&lt;/span&gt; {
  name                     = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;local&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;full_name&lt;/span&gt;
  license_counting_type    = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Socket&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_cloudformation_stack&amp;#34; &amp;#34;this&amp;#34;&lt;/span&gt; {
  name          = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;local&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;full_name&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt; # the name of CloudFormation stack
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  template_body = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;file&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;${path.module}/resource-group-cf-stack-template.json&amp;#34;&lt;/span&gt;)
  parameters = {
    GroupName = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;local&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;full_name&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt; # the name for the Host group, passed to CloudFormation template
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  }
  on_failure = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;And the next code snippet explains the CloudFromation template (which is the &lt;code&gt;resource-group-cf-stack-template.json&lt;/code&gt; file in the code snippet above)&lt;/p&gt;
&lt;p&gt;&lt;details &gt;
&lt;summary markdown=&#34;span&#34; style=&#34;font-size: 0.8em; font-weight: bold&#34;&gt;üîç Click here to see the code snippet&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Parameters&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;GroupName&amp;#34;&lt;/span&gt; : {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Description&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;The name of Host Group&amp;#34;&lt;/span&gt;
    }
  },
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Resources&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;DedicatedHostGroup&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;AWS::ResourceGroups::Group&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Ref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;GroupName&amp;#34;&lt;/span&gt; },
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Configuration&amp;#34;&lt;/span&gt;: [
          {
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;AWS::ResourceGroups::Generic&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Parameters&amp;#34;&lt;/span&gt;: [
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;allowed-resource-types&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;AWS::EC2::Host&amp;#34;&lt;/span&gt;]
              },
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;deletion-protection&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;UNLESS_EMPTY&amp;#34;&lt;/span&gt;]
              }
            ]
          },
          {
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;AWS::EC2::HostManagement&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Parameters&amp;#34;&lt;/span&gt;: [
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;allowed-host-families&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;mac1&amp;#34;&lt;/span&gt;]
              },
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;auto-allocate-host&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;]
              },
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;auto-release-host&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;]
              },
              {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;any-host-based-license-configuration&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;]
              }
            ]
          }
        ]
      }
    }
  },
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Outputs&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;ResourceGroupARN&amp;#34;&lt;/span&gt; : {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ResourceGroupARN&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt; : { &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Fn::GetAtt&amp;#34;&lt;/span&gt; : [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;DedicatedHostGroup&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Arn&amp;#34;&lt;/span&gt;] }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;aws_cloudformation_stack&lt;/code&gt; resource will export the &lt;code&gt;DedicatedHostGroup&lt;/code&gt; attribute (see the code of CloudFromation template), which you will use later in the Launch Template resource.&lt;/p&gt;
&lt;h3 id=&#34;pro-tips&#34;&gt;Pro tips&lt;/h3&gt;
&lt;p&gt;If you manage an AWS Organization, I have good news: Host groups and Licenses are supported by &lt;a href=&#34;https://docs.aws.amazon.com/ram/latest/userguide/shareable.html&#34;&gt;Resource Access Manager&lt;/a&gt; service. Hence, you can host all mac instances in one account and share them with other accounts ‚Äî it might be helpful for costs allocation, for example. Also, check out &lt;a href=&#34;https://serhii.vasylenko.info/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/&#34;&gt;my blog about AWS RAM&lt;/a&gt; if you are very new to this service.&lt;/p&gt;
&lt;p&gt;To solve the ‚Äúwhich AZ supports mac metal‚Äù puzzle, you can leverage the &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ec2_instance_type_offerings&#34;&gt;aws_ec2_instance_type_offerings&lt;/a&gt; and &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/subnet_ids&#34;&gt;aws_subnet_ids&lt;/a&gt; data sources.&lt;/p&gt;
&lt;h2 id=&#34;costs-considerations&#34;&gt;Costs considerations&lt;/h2&gt;
&lt;p&gt;License Manager is a &lt;a href=&#34;https://aws.amazon.com/license-manager/pricing/&#34;&gt;free of charge service&lt;/a&gt;, as well as &lt;a href=&#34;https://aws.amazon.com/autoscaling/pricing/&#34;&gt;Auto Scaling&lt;/a&gt;, and &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2017/11/introducing-launch-templates-for-amazon-ec2-instances/&#34;&gt;Launch Template&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So it‚Äôs all about the price for mac1.metal Dedicated Host which is &lt;a href=&#34;https://aws.amazon.com/ec2/dedicated-hosts/pricing/&#34;&gt;$1.083 per hour&lt;/a&gt; as of October 2021. However, &lt;a href=&#34;https://docs.aws.amazon.com/savingsplans/latest/userguide/what-is-savings-plans.html&#34;&gt;Saving Plans&lt;/a&gt; can be applied.&lt;/p&gt;
&lt;p&gt;Please note that the minimum allocation time for that type of host is 24 hours. Maybe someday AWS will change that to 1-hour minimum someday (fingers crossed).&lt;/p&gt;
&lt;h2 id=&#34;oh-so-asg&#34;&gt;Oh. So. ASG.&lt;/h2&gt;
&lt;p&gt;The Auto Scaling for mac1.metal opens new possibilities for CI/CD: you can integrate that to your favorite tool (GitLab, Jenkins, whatsoever) using AWS Lambda and provision new instances when your development/testing environments need that. Or you can use other cool ASG stuff, such as Lifecycle hooks, to create even more custom scenarios.&lt;/p&gt;
&lt;p&gt;Considering the ‚Äúhidden‚Äù (undocumented) nature of the described setup, I suggest treating it as rather testing than production-ready for now. However, my tests show that everything works pretty well: hosts are allocated, instances are spawned, and the monthly bill grows.&lt;/p&gt;
&lt;p&gt;I suppose AWS will officially announce all this in the nearest future. Along with that, I am looking forward to the announcement of Monterey-based AMIs and maybe even M1 chip-based instances (will it be mac2.metal?).&lt;/p&gt;
&lt;p&gt;And I want to say thanks (thanks, pal!) to &lt;a href=&#34;https://github.com/hashicorp/terraform/issues/28531&#34;&gt;OliverKoo&lt;/a&gt;, who started digging into that back in April&#39;21.&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>AWS Resource Access Manager ‚Äî Multi Account Resource Governance</title>
            <link>https://serhii.vasylenko.info/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/</link>
            <pubDate>Sat, 25 Sep 2021 00:54:23 +0300</pubDate>
            
            <guid>https://serhii.vasylenko.info/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/</guid>
            <description>&lt;p&gt;With a multi-account approach of building the infrastructure, there is always a challenge of provision and governance of the resources to subordinate accounts within the Organization. Provision resources, keep them up to date, and decommission them properly ‚Äî that&amp;rsquo;s only a part of them.&lt;/p&gt;
&lt;p&gt;AWS has numerous solutions that help make this process reliable and secure, and the Resource Access Manager (RAM) is one of them.
In a nutshell, the RAM service allows you to share the AWS resources you create in one AWS account with other AWS accounts. They can be your organizations&#39; accounts, organizational units (OU), or even third-party accounts.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s see what the RAM is and review some of its usage examples.&lt;/p&gt;
&lt;h2 id=&#34;why-using-ram&#34;&gt;Why using RAM&lt;/h2&gt;
&lt;p&gt;There are several benefits of using the RAM service:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reduced operational overhead&lt;/strong&gt;: eliminate the need of provisioning the same kind of resource multiple times ‚Äî RAM does that for you&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplified security management&lt;/strong&gt;: AWS RAM-managed permissions (at least one per resource type) define the actions that principals with access to the resources (i.e., resource users) can perform on those resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistent experience&lt;/strong&gt;: you share the resource in its state and with its security configuration with an arbitrary number of accounts.&lt;/p&gt;
&lt;p&gt;That plays incredibly well in the case of organization-wide sharing: new accounts get the resources automatically. And the shared resource itself looks like a native resource in the account that accepts your sharing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Audit and visibility&lt;/strong&gt;: RAM integrates with the CloudWatch and CloudTrail.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;how-to-share-a-resource&#34;&gt;How to share a resource&lt;/h2&gt;
&lt;p&gt;When you share a resource, the AWS account that owns that resource retains full ownership of the resource.&lt;/p&gt;
&lt;p&gt;Sharing of the resource doesn&amp;rsquo;t change any permissions or quotas that apply to that resource. Also, you can share the resource only if you own it.&lt;/p&gt;
&lt;p&gt;Availability of the shared resources scopes to the Region: the users of your shared resources can access these resources only in the same Region where resources belong.&lt;/p&gt;
&lt;p&gt;Creation of resource share consists of three steps:
&lt;img loading=&#34;lazy&#34; src=&#34;ram-diagram-800.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Specify the share name and the resource(s) you want to share. It can be either one resource type or several. You can also skip the resources selection and do that later.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible to modify the resource share later (e.g., you want to add some resources to the share).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associate permissions with resource types you share. Some resources can have only one managed permission (will be attached automatically), and some can have multiple.&lt;/p&gt;
&lt;p&gt;You can check the Permissions Library in the AWS RAM Console to see what managed permissions are available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select who can use the resources you share: either external or Organization account or IAM role/user. If you share the resource with third parties, they will have to accept the sharing explicitly.&lt;/p&gt;
&lt;p&gt;Organization-wide resource share is accepted implicitly if resource sharing is enabled for the Organization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, review the summary page of the resource share and create it.&lt;/p&gt;
&lt;p&gt;Only specific actions are available to the users of shared resources. These actions mostly have the &amp;ldquo;read-only&amp;rdquo; nature and &lt;a href=&#34;https://docs.aws.amazon.com/ram/latest/userguide/shareable.html&#34;&gt;vary by resource type&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, the RAM service is &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ram_resource_share&#34;&gt;supported by Terraform&lt;/a&gt;, so the resource sharing configuration may look like that, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_ram_resource_share&amp;#34; &amp;#34;example&amp;#34;&lt;/span&gt; {
  name                      = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt;
  allow_external_principals = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;

  tags = {
    Environment = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Production&amp;#34;&lt;/span&gt;
  }
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_ram_resource_association&amp;#34; &amp;#34;example&amp;#34;&lt;/span&gt; {
  resource_arn       = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;aws_subnet&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;arn&lt;/span&gt;
  resource_share_arn = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;aws_ram_resource_share&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;arn&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example-use-cases&#34;&gt;Example use cases&lt;/h2&gt;
&lt;p&gt;One of the trivial but valuable examples of RAM service usage is sharing a Manged Prefix List.
Suppose you have some service user across your Organization, a self-hosted VPN server, for example. And you have a static set of IPs for that VPN: you trust these IPs and would like them to be allow-listed in your other services.
How to report these IPs to all organization accounts/users? And if the IP set changes, how to announce that change, and what should be done to reflect that change in services that depend on it, for example, Security Groups?&lt;/p&gt;
&lt;p&gt;The answer is a shared &lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/managed-prefix-lists.html#managed-prefix-lists-concepts&#34;&gt;Managed Prefix List&lt;/a&gt;. You create the list once in the account and share it across your Organization. Other accounts automatically get access to that list and can reference the list in their Security Groups. And when the list entry is changed, they do not need to perform any actions: their Security Groups will get the updated IPs implicitly.&lt;/p&gt;
&lt;p&gt;Another everyday use case of RAM is the VPC sharing that can form the foundation of the &lt;a href=&#34;https://aws.amazon.com/blogs/networking-and-content-delivery/vpc-sharing-a-new-approach-to-multiple-accounts-and-vpc-management/&#34;&gt;multi-account AWS architectures&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Of course, the RAM service is not the only way to organize and centralize resource management in AWS. There are Service Catalog, Control Tower, Systems Manager, Config, and others. However, the RAM is relatively simple to adopt but is capable of providing worthy outcomes.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>