<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>tutorials on Serhii Vasylenko</title>
        <link>https://serhii.vasylenko.info/tags/tutorials/</link>
        <description>Recent content in tutorials on Serhii Vasylenko</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 16 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://serhii.vasylenko.info/tags/tutorials/index.xml" rel="self" type="application/rss+xml" />
        <item>
            <title>Terraform Workflow â€” Working Individually and in a Team</title>
            <link>https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.html</link>
            <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
            
            <guid>https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.html</guid>
            <description>&lt;p&gt;The work with Terraform code may become tangled sometimes. Here are some guides on how to streamline it and make it transparent for you and your team.&lt;/p&gt;
&lt;p&gt;It is extremely helpful in a team, and can benefit you even if you work individually. A good workflow enables you to streamline a process, organize it, and make it less error-prone.&lt;/p&gt;
&lt;p&gt;This article summaries several approaches when working with Terraform, both individually and in a team. I tried to gather the most common ones, but you might also want to develop your own.&lt;/p&gt;
&lt;p&gt;The common requirement for all of them is a version control system (such as Git). This is how you ensure nothing is lost and all your code changes are properly versioned tracked.&lt;/p&gt;
&lt;p&gt;Table of contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-concepts&#34;&gt;Basic Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#core-individual-workflow&#34;&gt;Core individual workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#core-team-workflow&#34;&gt;Core team workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#team-workflow-with-automation&#34;&gt;Team workflow with automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#import-workflow&#34;&gt;Import workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;basic-concepts&#34;&gt;Basic Concepts&lt;/h1&gt;
&lt;p&gt;Letâ€™s define the basic actions first.&lt;/p&gt;
&lt;p&gt;All described workflows are built on top of three key steps: Write, Plan, and Apply. Nevertheless, their details and actions vary between workflows.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;tf-workflow.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;It&amp;rsquo;s a piece of cake, isn&amp;rsquo;t it? ðŸ˜†&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write&lt;/strong&gt; â€“ this is where you make changes to the code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Plan&lt;/strong&gt; â€“ this is where you review changes and decide whether to accept them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apply&lt;/strong&gt; â€“ this is where you accept changes and apply them against real infrastructure.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a simple idea with a variety of possible implementations.&lt;/p&gt;
&lt;h1 id=&#34;core-individual-workflow&#34;&gt;Core individual workflow&lt;/h1&gt;
&lt;p&gt;This is the most simple workflow if you work alone on a relatively small TF project. This workflow suits both local and remote backends well.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;tf-workflow-individual.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Let&amp;rsquo;s add a bit of Git&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;write&#34;&gt;Write&lt;/h3&gt;
&lt;p&gt;You clone the remote code repo or pull the latest changes, edit the configuration code, then run the &lt;code&gt;terraform validate&lt;/code&gt; and &lt;code&gt;terraform fmt&lt;/code&gt; commands to make sure your code works well.&lt;/p&gt;
&lt;h3 id=&#34;plan&#34;&gt;Plan&lt;/h3&gt;
&lt;p&gt;This is where you run the &lt;code&gt;terraform plan&lt;/code&gt; command to make sure that your changes do what you need. This is a good time to commit your code changes changes (or you can do it in the next step).&lt;/p&gt;
&lt;h3 id=&#34;apply&#34;&gt;Apply&lt;/h3&gt;
&lt;p&gt;This is when you run &lt;code&gt;terraform apply&lt;/code&gt; and introduce the changes to real infrastructure objects. Also, this is when you push committed changes to the remote repository.&lt;/p&gt;
&lt;h1 id=&#34;core-team-workflow&#34;&gt;Core team workflow&lt;/h1&gt;
&lt;p&gt;This workflow is good for when you work with configuration code in a team and want to use feature branches to manage the changes accurately.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;tf-core-workflow-team.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Don&amp;rsquo;t get scared, it is still simple, just follow the lines&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;write-1&#34;&gt;Write&lt;/h3&gt;
&lt;p&gt;Start by checking out a new branch, make your changes, and run the &lt;code&gt;terraform validate&lt;/code&gt; and &lt;code&gt;terraform fmt&lt;/code&gt; commands to make sure your code works well.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;terraform plan&lt;/code&gt; at this step will help ensure that you&amp;rsquo;ll get what you expect.&lt;/p&gt;
&lt;h3 id=&#34;plan-1&#34;&gt;Plan&lt;/h3&gt;
&lt;p&gt;This is where code and plan reviews happen.&lt;/p&gt;
&lt;p&gt;Add the output of the &lt;code&gt;terraform plan&lt;/code&gt; command to the Pull Request with your changes. It would be a good idea to add only the changed parts of the common output, which is the part that starts with &amp;ldquo;Terraform will perform the following actions&amp;rdquo; string.&lt;/p&gt;
&lt;h3 id=&#34;apply-1&#34;&gt;Apply&lt;/h3&gt;
&lt;p&gt;Once the PR is reviewed and merged to the upstream branch, it is safe to finally pull the upstream branch locally and apply the configuration with &lt;code&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;team-workflow-with-automation&#34;&gt;Team workflow with automation&lt;/h1&gt;
&lt;p&gt;In a nutshell, this workflow allows you to introduce a kind of smoke test for your infrastructure code (using &lt;code&gt;plan&lt;/code&gt;) and also to automate the feedback in the CI process.&lt;/p&gt;
&lt;p&gt;The automated part of this workflow consists of a speculative plan on commit and/or Pull Request (PR ), along with adding the output of &lt;code&gt;plan&lt;/code&gt; to the comment of the PR. A speculative plan mean just to show the changes, and not apply them afterward.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;tf-workflow-team-automation-1.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;I like when TF plan output is included to PR, but nobody likes to read others TF plans for some reason&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;write-2&#34;&gt;Write&lt;/h3&gt;
&lt;p&gt;This step is the same as in the previous workflow.&lt;/p&gt;
&lt;h3 id=&#34;plan-2&#34;&gt;Plan&lt;/h3&gt;
&lt;p&gt;This is where your CI tool does its job.&lt;/p&gt;
&lt;p&gt;Letâ€™s review this step by step:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You create a PR with the code changes you wish to implement.&lt;/li&gt;
&lt;li&gt;The CI pipeline is triggered by an event from your code repository (such as webhook push) and it runs a speculative plan against your code.&lt;/li&gt;
&lt;li&gt;The list of changes (a so-called &amp;ldquo;plan diff&amp;rdquo;) is added to PR for review by the CI.&lt;/li&gt;
&lt;li&gt;Once merged, the CI pipeline runs again and you get the final plan that&amp;rsquo;s ready to be applied to the infrastructure.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;apply-2&#34;&gt;Apply&lt;/h3&gt;
&lt;p&gt;Now that you have a branch (i.e. main) with the fresh code to apply, you need to pull it locally and run &lt;code&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also add the automated apply here â€“ step 5 in the picture below. This may be very useful for disposable environments such as testing, staging, development, and so on.&lt;/p&gt;
&lt;p&gt;The exact CI tool to be used here is up to you: Jenkins, GitHub Actions, and Travis CI all work well.&lt;/p&gt;
&lt;p&gt;An important thing to note is that the CI pipeline must be configured in a bi-directional way with your repository to get the code from it and report back with comments to PR.&lt;/p&gt;
&lt;p&gt;As an option, you may consider using Terraform Cloud which has a lot of functionality, including the above mentioned repo integration, even with the free subscription.&lt;/p&gt;
&lt;p&gt;If you have never worked with Terraform Cloud before and want to advice to get started, I&amp;rsquo;ll provide the links at the end of this article.&lt;/p&gt;
&lt;h1 id=&#34;import-workflow&#34;&gt;Import workflow&lt;/h1&gt;
&lt;p&gt;This workflow refers to a situation when you have some objects already created (i.e., up and running), and you need to manage them with Terraform.&lt;/p&gt;
&lt;p&gt;Suppose we already have an S3 bucket in AWS called &amp;ldquo;someassetsbucket&amp;rdquo; and we want to include it into our configuration code.â€Œâ€Œ&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;tf-workflow-import.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;prepare&#34;&gt;Prepare&lt;/h3&gt;
&lt;p&gt;You should create a resource block to be used later for the real object youâ€™re going to import.&lt;/p&gt;
&lt;p&gt;You donâ€™t need to fill the arguments in it at the start, so it may be just a blank resource block, for example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;resource &amp;quot;aws_s3_bucket&amp;quot; &amp;quot;someassetsbucket&amp;quot; {
â€Œâ€Œ
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;import&#34;&gt;Import&lt;/h3&gt;
&lt;p&gt;Now you need to import the information about the real object into your existing Terraform state file.&lt;/p&gt;
&lt;p&gt;This can be done with the &lt;code&gt;terraform import&lt;/code&gt; command, for example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;terraform import aws_s3_bucket.assets &amp;quot;someassetsbucket&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;â€ŒBe sure to also check the list of possible options import accepts with &lt;code&gt;terraform import -h&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;write-3&#34;&gt;Write&lt;/h3&gt;
&lt;p&gt;Now you need to write the corresponding Terraform code for this bucket.&lt;/p&gt;
&lt;p&gt;To avoid modifying your real object on the &lt;code&gt;terraform apply&lt;/code&gt; action, you should specify all needed arguments with the exact values from the import phase.&lt;/p&gt;
&lt;p&gt;You can see the details by running the &lt;code&gt;terraform state show&lt;/code&gt; command, for example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;terraform state show aws_s3_bucket.assets
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output of this command will be very similar to the configuration code. But it contains both arguments and attributes of the resource, so you need to clean it up before applying it.&lt;/p&gt;
&lt;p&gt;You can use one of the following tactics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;either copy/paste it, and then run &lt;code&gt;terraform validate&lt;/code&gt; and &lt;code&gt;terraform plan&lt;/code&gt; several times to make sure there are no errors like &amp;ldquo;argument is not expected here&amp;rdquo; or &amp;ldquo;this field cannot be set&amp;rdquo;&lt;/li&gt;
&lt;li&gt;or you can pick and write only the necessary arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In any case, be sure to refer to the documentation of the resource during this process.&lt;/p&gt;
&lt;h3 id=&#34;plan-3&#34;&gt;Plan&lt;/h3&gt;
&lt;p&gt;The goal is to have a &lt;code&gt;terraform plan&lt;/code&gt; output showing &amp;ldquo;~ update in-place&amp;rdquo; changes only.&lt;/p&gt;
&lt;p&gt;However, it is not always clear whether the real object will be modified or only the state file will be updated. This is why you should understand how a real object works and know its life cycle to make sure it is safe to apply the plan.&lt;/p&gt;
&lt;h3 id=&#34;apply-3&#34;&gt;Apply&lt;/h3&gt;
&lt;p&gt;This is usual the &lt;code&gt;terraform apply&lt;/code&gt; action.&lt;/p&gt;
&lt;p&gt;Once applied, your configuration and state file will correspond to the real object configuration.&lt;/p&gt;
&lt;h1 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h1&gt;
&lt;p&gt;Here is an overview of Terraform Cloud for those who never worked with it before: &lt;a href=&#34;https://www.terraform.io/docs/cloud/overview.html&#34;&gt;â€Œâ€ŒOverview of Terraform Cloud Features&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here is a nice tutorial to start with: &lt;a href=&#34;https://learn.hashicorp.com/collections/terraform/cloud-get-started&#34;&gt;Get Started - Terraform Cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, here is an overview of workflows at scale from the HashiCorp CTO which might be useful for more experienced Terraform users: &lt;a href=&#34;https://www.hashicorp.com/resources/terraform-workflow-best-practices-at-scale&#34;&gt;Terraform Workflow Best Practices at Scale&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thank you for reading. I hope you will try one of these workflows, or develop your own!â€Œâ€Œ&lt;/p&gt;
&lt;hr&gt;
&lt;h6 id=&#34;this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers&#34;&gt;This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.&lt;/h6&gt;
</description>
        </item>
        
        <item>
            <title>What are Terraform Modules and how do they work?</title>
            <link>https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html</link>
            <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
            
            <guid>https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html</guid>
            <description>&lt;p&gt;Surprisingly, a lot of beginners skip over Terraform modules for the sake of simplicity, or so they think. Later, they find themselves going through hundreds of lines of configuration code.&lt;/p&gt;
&lt;p&gt;I assume you already know some basics about Terraform or even tried to use it in some way before reading the article.&lt;/p&gt;
&lt;p&gt;Please note: I do not use real code examples with some specific provider like AWS or Google intentionally, just for the sake of simplicity.&lt;/p&gt;
&lt;h2 id=&#34;terraform-modules&#34;&gt;Terraform modules&lt;/h2&gt;
&lt;p&gt;You already write modules even if you think you donâ€™t.&lt;/p&gt;
&lt;p&gt;Even when you don&amp;rsquo;t create a module intentionally, if you use Terraform, you are already writing a module â€“ a so-called &amp;ldquo;root&amp;rdquo; module.&lt;/p&gt;
&lt;p&gt;Any number of Terraform configuration files &lt;code&gt;(.tf)&lt;/code&gt; in a directory (even one) forms a module.&lt;/p&gt;
&lt;h3 id=&#34;what-does-the-module-do&#34;&gt;What does the module do?&lt;/h3&gt;
&lt;p&gt;A Terraform module allows you to create logical abstraction on the top of some resource set. In other words, a module allows you to group resources together and reuse this group later, possibly many times.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume we have a virtual server with some features hosted in the cloud. What set of resources might describe that server? For example:
â€“ the virtual machine itself (created from some image)
â€“ an attached block device of specified size (for additional storage)
â€“ a static public IP mapped to the server&amp;rsquo;s virtual network interface
â€“ a set of firewall rules to be attached to the server
â€“ something else&amp;hellip; (i.e. another block device, additional network interface, etc)&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;1.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s assume that you need to create this server with a set of resources many times. This is where modules are really helpful â€“ you don&amp;rsquo;t want to repeat the same configuration code over and over again, do you?&lt;/p&gt;
&lt;p&gt;Here is an example that illustrates how our &amp;ldquo;server&amp;rdquo; module might be called.
&amp;ldquo;To call a module&amp;rdquo; means to use it in the configuration file.&lt;/p&gt;
&lt;p&gt;Here we create 5 instances of the &amp;ldquo;server&amp;rdquo; using single set of configurations (in the module):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module &amp;quot;server&amp;quot; {
    
    count         = 5
    
    source        = &amp;quot;./module_server&amp;quot;
    some_variable = some_value
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;modules-organisation-child-and-root&#34;&gt;Modules organisation: child and root&lt;/h3&gt;
&lt;p&gt;Of course, you would probably want to create more than one module. Here are some common examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for a network (i.e. VPC)&lt;/li&gt;
&lt;li&gt;for a static content hosting (i.e. buckets)&lt;/li&gt;
&lt;li&gt;for a load balancer and it&amp;rsquo;s related resources&lt;/li&gt;
&lt;li&gt;for a logging configuration&lt;/li&gt;
&lt;li&gt;and whatever else you consider a distinct logical component of the infrastructure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s say we have two different modules: a &amp;ldquo;server&amp;rdquo; module and a &amp;ldquo;network&amp;rdquo; module. The module called &amp;ldquo;network&amp;rdquo; is where we define and configure our virtual network and place servers in it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module &amp;quot;server&amp;quot; {
    source        = &amp;quot;./module_server&amp;quot;
    some_variable = some_value
}

module &amp;quot;network&amp;quot; {  
    source              = &amp;quot;./module_network&amp;quot;
    some_other_variable = some_other_value
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we have some custom modules, we can refer to them as &amp;ldquo;child&amp;rdquo; modules. And the configuration file where we call child modules relates to the root module.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;A child module can be sourced from a number of places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local paths&lt;/li&gt;
&lt;li&gt;official Terraform Registry (if you&amp;rsquo;re familiar with other registries, i.e. Docker Registry then you already understand the idea)&lt;/li&gt;
&lt;li&gt;Git repository (a custom one or GitHub/BitBucket)&lt;/li&gt;
&lt;li&gt;HTTP URL to .zip archive with module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But how can you pass resources details between modules?&lt;/p&gt;
&lt;p&gt;In our example, the servers should be created in a network. So how can we tell the &amp;ldquo;server&amp;rdquo; module to create VMs in a network which was created in a module called &amp;ldquo;network&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;This is where &lt;strong&gt;encapsulation&lt;/strong&gt; comes in.&lt;/p&gt;
&lt;h2 id=&#34;module-encapsulation&#34;&gt;Module encapsulation&lt;/h2&gt;
&lt;p&gt;Encapsulation in Terraform consists of two basic concepts: module scope and explicit resources exposure.&lt;/p&gt;
&lt;h3 id=&#34;module-scope&#34;&gt;Module Scope&lt;/h3&gt;
&lt;p&gt;All resource instances, names, and therefore, resource visibility, are isolated in a module&amp;rsquo;s scope. For example, module &amp;ldquo;A&amp;rdquo; can&amp;rsquo;t see and does not know about resources in module &amp;ldquo;B&amp;rdquo; by default.&lt;/p&gt;
&lt;p&gt;Resource visibility, sometimes called resource isolation, ensures that resources will have unique names within a module&amp;rsquo;s namespace. For example, with our 5 instances of the &amp;ldquo;server&amp;rdquo; module:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module.server[0].resource_type.resource_name
module.server[1].resource_type.resource_name
module.server[2].resource_type.resource_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On the other hand, we could create two instances of the same module with different names:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module &amp;quot;server-alpha&amp;quot; {    
    source        = &amp;quot;./module_server&amp;quot;
    some_variable = some_value
}
module &amp;quot;server-beta&amp;quot; {
    source        = &amp;quot;./module_server&amp;quot;
    some_variable = some_value
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, the naming or address of resources would be as follows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module.server-alpha.resource_type.resource_name

module.server-beta.resource_type.resource_name
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;explicit-resources-exposure&#34;&gt;Explicit resources exposure&lt;/h3&gt;
&lt;p&gt;If you want to access some details for the resources in another module, you&amp;rsquo;ll need to explicitly configure that.&lt;/p&gt;
&lt;p&gt;By default, our module &amp;ldquo;server&amp;rdquo; doesn&amp;rsquo;t know about the network that was created in the &amp;ldquo;network&amp;rdquo; module.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;3.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;So we must declare an &lt;code&gt;output&lt;/code&gt; value in the &amp;ldquo;network&amp;rdquo; module to export its resource, or an attribute of a resource, to other modules.&lt;/p&gt;
&lt;p&gt;The module &amp;ldquo;server&amp;rdquo; must declare a &lt;code&gt;variable&lt;/code&gt; to be used later as the input.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;4.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;This explicit declaration of the output is the way to expose some resource (or information about it) outside â€” to the scope of the &amp;lsquo;root&amp;rsquo; module, hence to make it available for other modules.&lt;/p&gt;
&lt;p&gt;Next, when we call the child module &amp;ldquo;server&amp;rdquo;  in the root module, we should assign the output from the &amp;ldquo;network&amp;rdquo; module to the variable of the &amp;ldquo;server&amp;rdquo; module:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;network_id = module.network.network_id
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is how the final code for calling our child modules will look like in result:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module &amp;quot;server&amp;quot; {
    count         = 5
    source        = &amp;quot;./module_server&amp;quot;
    some_variable = some_value
    network_id    = module.network.network_id
}

module &amp;quot;network&amp;quot; {  
    source              = &amp;quot;./module_network&amp;quot;
    some_other_variable = some_other_value
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This example configuration would create 5 instances of the same server, with all the necessary resources, in the network we created with as a separate module.&lt;/p&gt;
&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h3&gt;
&lt;p&gt;Now you should understand what modules are and what do they do.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re at the beginning of your Terraform journey, here are some suggestions for the next steps.&lt;/p&gt;
&lt;p&gt;I encourage you to take this short tutorial from HashiCorp, the creators of Terraform, about modules:  &lt;a href=&#34;https://learn.hashicorp.com/collections/terraform/modules&#34;&gt;&amp;ldquo;Organize Configuration&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, there is a great comprehensive study guide which covers everything from beginner to advanced concepts about Terraform: &lt;a href=&#34;https://learn.hashicorp.com/tutorials/terraform/associate-study?in=terraform/certification&#34;&gt;&amp;ldquo;Study Guide - Terraform Associate Certification&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The modular code structure makes your configuration more flexible and yet easy to be understood by others. The latter is especially useful in teamwork.&lt;/p&gt;
&lt;hr&gt;
&lt;h6 id=&#34;this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers&#34;&gt;This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.&lt;/h6&gt;
</description>
        </item>
        
        <item>
            <title>Terraform explained in English</title>
            <link>https://serhii.vasylenko.info/2020/05/02/Terraform-explained-for-managers.html</link>
            <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://serhii.vasylenko.info/2020/05/02/Terraform-explained-for-managers.html</guid>
            <description>&lt;p&gt;You might have heard about Terraform before, but if you have never tried it, this blog can help you to get the main point.&lt;/p&gt;
&lt;h2 id=&#34;a-few-words-about-infrastructure-as-code&#34;&gt;A few words about â€œInfrastructure as Code&amp;quot;&lt;/h2&gt;
&lt;p&gt;First of all, Terraform is the way to manage the infrastructure in the form of code. The same way developers write the code to create applications, Terraform code can create the resources in virtual data centers (i.e., clouds).&lt;/p&gt;
&lt;p&gt;Infrastructure as Code, or IaC, is when you describe and manage your infrastructure asâ€¦ (guess what?) â€¦code, literally.&lt;/p&gt;
&lt;p&gt;In a nutshell, that means you can define all the elements (servers, networks, storage, etc.) and resources (memory, CPU, etc.) of your infrastructure in configuration files, and manage it in a way similar to how you handle the source code of the applications: branches, releases, and all that stuff.&lt;/p&gt;
&lt;p&gt;And the main idea behind the IaC approach is that it manages the state of things and must remain the single source of truth (configuration truth) for your infrastructure.&lt;/p&gt;
&lt;p&gt;First, you define the state via the code. Then IaC tool (Terraform, for example) applies this state to the infrastructure: all that is missing according to the code will be created, all that differs from the code will be changed, and all that exists in the infrastructure but is not described via code â€” will be destroyed.&lt;/p&gt;
&lt;h2 id=&#34;why-and-when-do-you-need-the-terraform-for-a-project&#34;&gt;Why and when do you need the Terraform for a project?&lt;/h2&gt;
&lt;p&gt;Terraform is a specific tool, hence like any other tool, it has its particular application area. There is no strict definition of project kind that needs Terraform (surprise!), but in general, you need to consider using Terraform if you answer â€˜yesâ€™ to one of the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you have multiple logical elements of the same kind (in plural) in your infrastructure, i.e., several web servers, several application servers, several database servers?&lt;/li&gt;
&lt;li&gt;Do you have numerous environments (or workspaces) where you run your applications, i.e., development, staging, QA, production?&lt;/li&gt;
&lt;li&gt;Do you spend a significant amount of time managing the changes in the environment(s) where you run your applications?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;Terraform works with the source code of configuration and interprets the code into real objects inside on-premise or cloud platforms.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;how-it-works-optimized.png&#34;
         alt=&#34;How Terraform works&#34; width=&#34;800&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;How Terraform works in a nutshell&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Terraform supports many platforms: cloud providers such as AWS, Azure, GCP, DigitalOcean, and other platforms such as OVH, 1&amp;amp;1, Hetzner, etc. It also supports infrastructure software such as Docker, Kubernetes, Chef, and even databases and monitoring software. That is why Terraform is so popular â€” it is an actual Swiss knife in the operations world.&lt;/p&gt;
&lt;p&gt;So to create, change, or destroy the infrastructure, Terraform needs the source code.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;source code&lt;/strong&gt; is a set of configuration files that defines your infrastructure state. The code uses its syntax, but it looks very user-friendly. Here is an example: the following configuration block describes the virtual server (EC2 instance) in AWS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_instance&amp;#34; &amp;#34;web_server&amp;#34;&lt;/span&gt; {
  ami           = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ami-a1b2c3d4&amp;#34;&lt;/span&gt;
  instance_type = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;t3.micro&amp;#34;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Terraform can automatically detect the dependencies between resources described in the code and also allows you to add custom dependencies when needed.&lt;/p&gt;
&lt;p&gt;When you apply the code the first time, Terraform creates a so-called â€œ&lt;strong&gt;state file&lt;/strong&gt;,&amp;quot; which Terraform uses to map your code to resources created in the hosting platform. Terraform will use each subsequent â€œapply&amp;quot; action to compare the code changes with the sate file to decide what should be done (and in what order) against real infrastructure.&lt;/p&gt;
&lt;p&gt;One of the essential functions of the state file is the management of dependencies between the resources. For example (some technical nuances are omitted for simplicity): if you have a server created inside some network and you are going to change the network configuration in Terraform code, Terraform will know it should change that server configuration, or the server should be re-created inside the updated network.&lt;/p&gt;
&lt;h2 id=&#34;what-does-terraform-consist-of&#34;&gt;What does Terraform consist of:&lt;/h2&gt;
&lt;p&gt;Terraform configuration code consists of several elements: providers, resources, modules, input variables, output values, local values, expressions, functions.&lt;/p&gt;
&lt;h3 id=&#34;provider&#34;&gt;Provider&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Provider&lt;/strong&gt; is an entity that defines what exactly is possible to do with the cloud or on-premises infrastructure platform you manage via Terraform.&lt;/p&gt;
&lt;p&gt;It translates your code into proper API calls to the hosting provider, transforming your configuration into real object: servers, networks, databases, and so on.&lt;/p&gt;
&lt;h3 id=&#34;resource&#34;&gt;Resource&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Resource&lt;/strong&gt; is the essential part of the configuration code. That is where the definition of infrastructure objects happens.&lt;/p&gt;
&lt;p&gt;Resources are the main building blocks of the whole code. A resource can represent some object in the hosting provider (example: server) or the part of a compound object (example: attachable storage for a server)&lt;/p&gt;
&lt;p&gt;Every resource has a type and local name. For example, here is how EC2 instance configuration may look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_instance&amp;#34; &amp;#34;web_server&amp;#34;&lt;/span&gt; {
  ami           = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ami-a1b2c3d4&amp;#34;&lt;/span&gt;
  instance_type = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;t3.micro&amp;#34;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;aws_instance&lt;/code&gt; is a resource type, and &lt;code&gt;web_server&lt;/code&gt; is the local resource name. Later, when Terraform applies this code, it will create an EC2 instance with some particular ID in AWS.&lt;/p&gt;
&lt;p&gt;Once created, Terraform will store the ID in the state file with mapping information that logically connects it with &lt;code&gt;web_server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ami&lt;/code&gt;, &lt;code&gt;instance_type&lt;/code&gt;, and &lt;code&gt;private_ip&lt;/code&gt; are the arguments with values that define the actual state of the resource. However, there are many value types, depending on the particular argument and particular resource type, so I will not focus on them here.&lt;/p&gt;
&lt;h3 id=&#34;modules&#34;&gt;Modules&lt;/h3&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;module-example.png&#34;
         alt=&#34;Terraform module&#34; width=&#34;800&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Terraform module&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt; is the kind of logical containers or groups for resources you define and use together. The purpose of modules is the grouping of resources and the possibility of reusing the same code with different variables.&lt;/p&gt;
&lt;p&gt;Letâ€™s get back to the example with the EC2 instance and say you need to have a static public IP address with it. In such a case, here is how the module for web server may look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_instance&amp;#34; &amp;#34;web_server&amp;#34;&lt;/span&gt; {
  ami           = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ami-a1b2c3d4&amp;#34;&lt;/span&gt;
  instance_type = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;t3.micro&amp;#34;&lt;/span&gt;
  }
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_eip&amp;#34; &amp;#34;web_server_public_ip&amp;#34;&lt;/span&gt; {
  instance      = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;${aws_instance.web_server.id}&amp;#34;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Having these two resources together allows us to think of it as a stand-alone unit you can reuse later, for example, in our development, staging, and production environments. And not by copying and pasting it, but via reference to the module defined only once.&lt;/p&gt;
&lt;p&gt;Please note: we specified an instance argument inside the &lt;code&gt;aws_eip&lt;/code&gt; resource to reference another resource details (the ID of an instance). It is possible because of the way how Terraform treats dependencies. For example, when it detects the dependency (or you define it explicitly), Terraform creates the leading resource first. Only after the resource is created and available Terraform will create the dependent one.&lt;/p&gt;
&lt;p&gt;The modules is a kind of standalone topic in Terraform. There is &lt;a href=&#34;https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html&#34;&gt;a separate article in my blog&lt;/a&gt; that explains what modules are and how do they work.&lt;/p&gt;
&lt;h3 id=&#34;variables&#34;&gt;Variables&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Input variables&lt;/strong&gt; work as parameters for the modules so module code could be reusable. Letâ€™s look at the previous example: it has some hardcoded values â€” instance image ID and instance type. Here is how you can make it more abstract and reusable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;image_id&amp;#34;&lt;/span&gt; {
  type          = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;
  }
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;instance_type&amp;#34;&lt;/span&gt; {
  type          = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;
  }
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aws_instance&amp;#34; &amp;#34;web_server&amp;#34;&lt;/span&gt; {
  ami           = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;var&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image_id&lt;/span&gt;
  instance_type = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;var&lt;/span&gt;.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;instance_type&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Values for the variables then can be passed either via CLI and environment variables (if you have only the one, so-called root module) or via explicit values in the block where you call a module, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;web_server_production&amp;#34;&lt;/span&gt; {
  source        = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;./modules/web_server&amp;#34;&lt;/span&gt;
  image_id      = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ami-a1b2c3d4&amp;#34;&lt;/span&gt;
  instance_type = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;m5.large&amp;#34;&lt;/span&gt;
  }
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;web_server_development&amp;#34;&lt;/span&gt; {
  source        = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;./modules/web_server&amp;#34;&lt;/span&gt;
  image_id      = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ami-a2b3c4d5&amp;#34;&lt;/span&gt;
  instance_type = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;t3.micro&amp;#34;&lt;/span&gt;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Output values&lt;/strong&gt; are similar to the &amp;ldquo;return&amp;rdquo; of a function in development language. You can use them for dependencies management (for example, when a module requires something from another module) and print specific values at the end of Terraform work (for example, to be used for notification in the CI/CD process).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Local values&lt;/strong&gt;, &lt;strong&gt;expressions&lt;/strong&gt;, &lt;strong&gt;functions&lt;/strong&gt; â€” three more things that augment the capabilities of Terraform and make it more similar to a programming language (which is excellent, by the way).&lt;/p&gt;
&lt;p&gt;The local values are used inside modules for extended data manipulations.&lt;/p&gt;
&lt;p&gt;The expressions are used to set the values (for many things), such as the value of some argument in resource configuration. For example, they used either to refer something (just as we referenced instance ID &lt;code&gt;&amp;quot;${aws_instance.web_server.id}&amp;quot;&lt;/code&gt; in the example above) or to compute the value within your configuration.&lt;/p&gt;
&lt;p&gt;The functions in Terraform are built-in jobs you can call to transform and combine values. For example, the &lt;code&gt;tolist()&lt;/code&gt; function converts its argument to a list value.&lt;/p&gt;
&lt;h2 id=&#34;and-this-is-it&#34;&gt;And this is it?&lt;/h2&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;done%20or.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Yes, in short words â€” this is what Terraform is. Not rocket science if it&amp;rsquo;s about to manage a small infrastructure, but it gets more complicated with bigger infrastructure. Like any other engineering tool, though.&lt;/p&gt;
&lt;h2 id=&#34;okay-what-next&#34;&gt;Okay, what next?&lt;/h2&gt;
&lt;p&gt;If you read down to this point, then it means it is worth &amp;ldquo;get your hands dirty&amp;rdquo; and to try building your Infrastructure with Terraform. There are plenty of courses and books (and the &amp;ldquo;Terraform up and running&amp;rdquo; is one of the most popular). Still, my learning path started from the following: &lt;a href=&#34;https://learn.hashicorp.com/terraform&#34;&gt;Official guide from Hashicorp&lt;/a&gt; â€” comprehensive and free guide from Terraform developers. Just pick your favorite cloud (AWS, Azure, GCP) and go through the topics.&lt;/p&gt;
&lt;p&gt;Another thing worth your attention is &lt;a href=&#34;https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca&#34;&gt;A Comprehensive Guide to Terraform&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you finish this guide, I suggest jumping into the more real-world things and describing the infrastructure of the most common project you work with.&lt;/p&gt;
&lt;p&gt;Your hands-on experience is the best way to learn Terraform!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>