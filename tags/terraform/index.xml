<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>terraform on Serhii Vasylenko</title>
        <link>https://serhii.vasylenko.info/tags/terraform/</link>
        <description>Recent content in terraform on Serhii Vasylenko</description>
        <image>
            <url>https://serhii.vasylenko.info/assets/img/website-logo.png</url>
            <link>https://serhii.vasylenko.info/tags/terraform/</link>
        </image>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <managingEditor>email-from-blog@vasylenko.info (Serhii Vasylenko)</managingEditor>
        <webMaster>email-from-blog@vasylenko.info (Serhii Vasylenko)</webMaster>
        <lastBuildDate>Sun, 16 Jan 2022 01:59:51 +0200</lastBuildDate><atom:link href="https://serhii.vasylenko.info/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
        <item>
            <title>Some Techniques to Enhance Your Terraform Proficiency</title>
            <link>https://serhii.vasylenko.info/2022/01/16/some-techniques-to-enhance-your-terraform-proficiency/</link>
            <pubDate>Sun, 16 Jan 2022 01:59:51 +0200</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">009d86d5f56c5c84299d35b176ec9316</guid>
            <description>Learn what cool things Terraform can do with its built-in functionality</description>
            <media:content url="https://serhii.vasylenko.info/2022/01/16/some-techniques-to-enhance-your-terraform-proficiency/cover-image.png"/>
            <content>
                <![CDATA[<p>Terraform built-in functionality is very feature-rich: functions, expressions,  and meta-arguments provide many ways to shape the code and fit it to a particular use case. I want to share a few valuable practices to boost your Terraform expertise in this blog.</p>
<div class="attention">
    Some code examples in this article will work with Terraform version 0.15 and onwards. But if you&rsquo;re still using 0.14 or lower, here&rsquo;s another motivation for you to upgrade.
</div>
<h2 id="conditional-resources-creation">Conditional resources creation</h2>
<p><figure>
    <img loading="lazy" src="condiitonal-resource-creation.png"/> 
</figure>

Let&rsquo;s start from the most popular one (although, still may be new for somebody): whether to create a resource depending on some fact, e.g., the value of a variable. Terraform meta-argument <code>count</code> helps to describe that kind of logic.</p>
<p>Here is how it may look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#6ab825;font-weight:bold">data</span> <span style="color:#ed9d13">&#34;aws_ssm_parameter&#34;</span> <span style="color:#ed9d13">&#34;ami_id&#34;</span> {
  <span style="color:#bbb">count</span>    = <span style="color:#24909d">var</span>.<span style="color:#bbb">ami_channel</span> == <span style="color:#ed9d13">&#34;&#34;</span> ? <span style="color:#3677a9">0</span> : <span style="color:#3677a9">1</span>

  <span style="color:#bbb">name</span>     = local.ami_channels[<span style="color:#24909d">var</span>.ami_channel]
}
</code></pre></div><p>The notation <code>var.ami_channel == &quot;&quot; ? 0 : 1</code> is called <em>conditional expression</em> and means the following: if my variable is empty (<code>var.ami_channel == &quot;&quot;</code> — hence, true) then set the count to 0, otherwise set to 1.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">condition ? true_val : false_val
</code></pre></div><p>In this illustration, I want to get the AMI ID from the SSM Parameter only if the AMI channel (e.g., beta or alpha) is specified. Otherwise, providing that the <code>ami_channel</code> variable is an empty string by default (&quot;&quot;), the data source should not be created.</p>
<p>When following this method, keep in mind that the resource address will contain the index identifier. So when I need to use the value of the SSM parameter from our example, I need to reference it the following way:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#bbb">ami_id</span> = <span style="color:#24909d">data</span>.aws_ssm_parameter.ami_id[<span style="color:#3677a9">0</span>].value
</code></pre></div><p>The <code>count</code> meta-argument can also be used when you need to conditionally create a Terraform module.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#6ab825;font-weight:bold">module</span> <span style="color:#ed9d13">&#34;bucket&#34;</span> {
  <span style="color:#bbb">count</span>             = <span style="color:#24909d">var</span>.<span style="color:#bbb">create_bucket</span> == <span style="color:#6ab825;font-weight:bold">true</span> ? <span style="color:#3677a9">1</span> : <span style="color:#3677a9">0</span>
  <span style="color:#bbb">source</span>            = <span style="color:#ed9d13">&#34;./modules/s3_bucket&#34;</span>

  <span style="color:#bbb">name</span>              = <span style="color:#ed9d13">&#34;my-unique-bucket&#34;</span>
  ...
}
</code></pre></div><p>The <code>var.create_bucket == true ? 1 : 0</code>  expression can be written even shorter: <code>var.create_bucket ? 1 : 0</code>  because the <code>create_bucket</code> variable has boolean type, apparently.</p>
<p>But what if you need to produce more than one instance of a resource or module? And still be able to avoid their creation.</p>
<p>Another meta-argument — <code>for_each</code> — will do the trick.</p>
<p>For example, this is how it looks for a module:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#6ab825;font-weight:bold">module</span> <span style="color:#ed9d13">&#34;bucket&#34;</span> {
  <span style="color:#bbb">for_each</span>          = <span style="color:#24909d">var</span>.<span style="color:#bbb">bucket_names</span> == [] ? [] : <span style="color:#24909d">var</span>.bucket_names
  <span style="color:#bbb">source</span>            = <span style="color:#ed9d13">&#34;./modules/s3_bucket&#34;</span>
  
  <span style="color:#bbb">name</span>              = <span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">${</span><span style="color:#24909d">each</span>.key<span style="color:#ed9d13">}</span><span style="color:#ed9d13">&#34;</span>
  <span style="color:#bbb">enable_encryption</span> = <span style="color:#6ab825;font-weight:bold">true</span>
  ...
}
</code></pre></div><p>In this illustration, I also used a conditional expression that makes Terraform iterate through the set of values of <code>var.bucket_names</code> if it&rsquo;s not empty and create several modules. Otherwise, do not iterate at all and do not create anything.</p>
<p>The same can be done for the resources. For example, when you need to create an arbitrary number of security group rules, e.g., to allowlist some IPs for your bastion host:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_security_group_rule&#34;</span> <span style="color:#ed9d13">&#34;allowlist&#34;</span> {
  <span style="color:#bbb">for_each</span>           = <span style="color:#24909d">var</span>.<span style="color:#bbb">cidr_blocks</span> == [] ? [] : <span style="color:#24909d">var</span>.cidr_blocks
  <span style="color:#bbb">type</span>               = <span style="color:#ed9d13">&#34;ingress&#34;</span>
  <span style="color:#bbb">from_port</span>          = <span style="color:#3677a9">22</span>
  <span style="color:#bbb">to_port</span>            = <span style="color:#3677a9">22</span>
  <span style="color:#bbb">protocol</span>           = <span style="color:#ed9d13">&#34;tcp&#34;</span>
  <span style="color:#bbb">cidr_blocks</span>        = [<span style="color:#24909d">each</span>.value]
  <span style="color:#bbb">security_group_id</span>  = aws_security_group.bastion.id
}
</code></pre></div><p>And just like with the <code>count</code> meta-argument, with the  <code>for_each</code>, resource addresses will have the identifier named by the values provided to <code>for_each</code>.
For example, here is how I would reference a resource created in the module with <code>for_each</code> described earlier:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#bbb">bucket_name</span> = <span style="color:#24909d">module</span>.bucket[<span style="color:#ed9d13">&#34;photos&#34;</span>].name
</code></pre></div><h2 id="conditional-resource-arguments-attributes-setting">Conditional resource arguments (attributes) setting</h2>
<figure>
    <img loading="lazy" src="conditional-resource-argument.png"/> 
</figure>

<p>Now let&rsquo;s go deeper and see how resource arguments can be conditionally set (or not).
First, let&rsquo;s review the conditional argument value setting with the <code>null</code> data type:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_launch_template&#34;</span> <span style="color:#ed9d13">&#34;this&#34;</span> {
  <span style="color:#bbb">name</span>     = <span style="color:#ed9d13">&#34;my-launch-template&#34;</span>
  ...
  <span style="color:#bbb">key_name</span> = <span style="color:#24909d">var</span>.use_default_keypair ? <span style="color:#24909d">var</span>.keypair_name : null
  ...
</code></pre></div><p>Here I want to skip the usage of the EC2 Key Pair for the Launch Template in some instances and Terraform allows me to write the conditional expression that will set the <code>null</code> value for the argument. It means the <em>absence</em> or <em>omission</em> and Terraform would behave the same as if you did not specify the argument at all.</p>
<p>Dynamic blocks are another case where conditional creation suits best. Take a look at the following piece of CloudFront resource code where I want to either describe the configuration for the custom error response or omit that completely:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_cloudfront_distribution&#34;</span> <span style="color:#ed9d13">&#34;cdn&#34;</span> {
  <span style="color:#bbb">enabled</span> = <span style="color:#6ab825;font-weight:bold">true</span>
  ...
  dynamic <span style="color:#ed9d13">&#34;custom_error_response&#34;</span> {
    <span style="color:#bbb">for_each</span> = <span style="color:#24909d">var</span>.<span style="color:#bbb">custom_error_response</span> == null ? [] : [<span style="color:#24909d">var</span>.custom_error_response]
    <span style="color:#bbb">iterator</span> = cer
    content {
      <span style="color:#bbb">error_code</span>            =<span style="color:#24909d"> lookup</span>(cer.value, <span style="color:#ed9d13">&#34;error_code&#34;</span>, null)
      <span style="color:#bbb">error_caching_min_ttl</span> =<span style="color:#24909d"> lookup</span>(cer.value, <span style="color:#ed9d13">&#34;error_caching_min_ttl&#34;</span>, null)
      <span style="color:#bbb">response_code</span>         =<span style="color:#24909d"> lookup</span>(cer.value, <span style="color:#ed9d13">&#34;response_code&#34;</span>, null)
      <span style="color:#bbb">response_page_path</span>    =<span style="color:#24909d"> lookup</span>(cer.value, <span style="color:#ed9d13">&#34;response_page_path&#34;</span>, null)
    }
  }
  ...
}
</code></pre></div><p>The <code>custom_error_response</code> variable is <code>null</code> by default, but it has the <code>object</code> type, and users can assign the variable with the required nested specifications if needed. And when they do it, Terraform will add the <code>custom_error_response</code> block to the resource configuration. Otherwise, it will be omitted entirely.</p>
<h2 id="convert-types-with-ease">Convert types with ease</h2>
<p><figure>
    <img loading="lazy" src="types-converstion.png"/> 
</figure>

Ok, let&rsquo;s move to the less conditional things now 😅</p>
<p>Terraform has several type conversion functions: <code>tobool()</code>, <code>tolist()</code>,<code>tomap()</code>, <code>tonumber()</code>, <code>toset()</code>, and <code>tostring()</code>. Their purpose is to convert the input values to the compatible types.</p>
<p>For example, suppose I need to pass the set to the <code>for_each</code> (it accepts only sets and maps types of value), but I got the list as an input; let&rsquo;s say I got it as an output from another module. In such a case, I would do something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#bbb">for_each</span> = <span style="color:#24909d">toset</span>(<span style="color:#24909d">var</span>.remote_access_ports)
</code></pre></div><p>However, I can make my code cleaner and avoid the explicit conversion — I just need to define the value type in the configuration block of the <code>my_list</code> variable. Terraform will do the conversion automatically when the value is assigned.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#6ab825;font-weight:bold">variable</span> <span style="color:#ed9d13">&#34;remote_access_ports&#34;</span> {
  <span style="color:#bbb">description</span> = <span style="color:#ed9d13">&#34;Ports for remote access&#34;</span>
  <span style="color:#bbb">type</span>        = set(string)
}
</code></pre></div><p>While Terraform can do a lot of implicit conversions for you, explicit type conversions are practical during values normalization or when you need to calculate some complex value for a variable. For example, the Local Values, known as <code>locals</code>, are the most suitable place for doing that.</p>
<p>By the way, although there is a <code>tolist()</code> function, there is no such thing as the <code>tostring()</code> function. But what if you need to convert the list to string in Terraform?</p>
<p>The <code>one()</code> function can help here: it takes a list, set, or tuple value with either zero or one element and returns either <code>null</code> or that one element in the form of string.</p>
<p>It&rsquo;s useful in cases when a resource created using conditional expression is represented as either a zero- or one-element list, and you need to get a single value which may be either <code>null</code> or <code>string</code>, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_kms_key&#34;</span> <span style="color:#ed9d13">&#34;main&#34;</span> {
  <span style="color:#bbb">count</span>               = <span style="color:#24909d">var</span>.ebs_encrypted ? <span style="color:#3677a9">1</span> : <span style="color:#3677a9">0</span>

  <span style="color:#bbb">enable_key_rotation</span> = <span style="color:#6ab825;font-weight:bold">true</span>
  <span style="color:#bbb">tags</span>                = <span style="color:#24909d">var</span>.tags
}
<span style="color:#6ab825;font-weight:bold">
</span><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_kms_alias&#34;</span> <span style="color:#ed9d13">&#34;main&#34;</span> {
  <span style="color:#bbb">count</span>         = <span style="color:#24909d">var</span>.ebs_encrypted ? <span style="color:#3677a9">1</span> : <span style="color:#3677a9">0</span>

  <span style="color:#bbb">name</span>          = <span style="color:#ed9d13">&#34;alias/encrypt-ebs&#34;</span>
  <span style="color:#bbb">target_key_id</span> = one(aws_kms_key.main[*]key_id)
}

</code></pre></div><h2 id="write-yaml-or-json-as-terraform-code-hcl">Write YAML or JSON as Terraform code (HCL)</h2>
<p><figure>
    <img loading="lazy" src="write-yaml-json-as-terraform-code.png"/> 
</figure>

Sometimes you need to supply JSON or YAML files to the services you manage with Terraform. For example, if you want to create something with CloudFormation using Terraform (and I am not kidding). Sometimes the AWS Terraform provider does not support the needed resource, and you want to maintain the whole infrastructure code using only one tool.</p>
<p>Instead of maintaining another file in JSON or YAML format, you can embed JSON or YAML code management into HCL by taking benefit of the  <code>jsonencode()</code> or <code>yamlencode()</code>  functions.</p>
<p>The attractiveness of this approach is that you can reference other Terraform resources or their attributes right in the code of your object, and you have more freedom in terms of the code syntax and its formatting comparable to native JSON or YAML.</p>
<p>Here is how it looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform">locals {
	<span style="color:#bbb">some_string</span> = <span style="color:#ed9d13">&#34;ult&#34;</span>
  <span style="color:#bbb">myjson_object</span> =<span style="color:#24909d"> jsonencode</span>({
    <span style="color:#ed9d13">&#34;Hashicorp Products&#34;</span>: {
      Terra: <span style="color:#ed9d13">&#34;form&#34;</span>
      Con:   <span style="color:#ed9d13">&#34;sul&#34;</span>
      Vag:   <span style="color:#ed9d13">&#34;rant&#34;</span>
      Va:    local.some_string
    }
  })
}
</code></pre></div><p>The value of the <code>myjson_object</code> local variable would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#6ab825;font-weight:bold">&#34;Hashicorp Products&#34;</span>: {
    <span style="color:#6ab825;font-weight:bold">&#34;Con&#34;</span>: <span style="color:#ed9d13">&#34;sul&#34;</span>,
    <span style="color:#6ab825;font-weight:bold">&#34;Terra&#34;</span>: <span style="color:#ed9d13">&#34;form&#34;</span>,
    <span style="color:#6ab825;font-weight:bold">&#34;Va&#34;</span>: <span style="color:#ed9d13">&#34;ult&#34;</span>,
    <span style="color:#6ab825;font-weight:bold">&#34;Vag&#34;</span>: <span style="color:#ed9d13">&#34;rant&#34;</span>
  }
}
</code></pre></div><p>And here is a piece of real-world example:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform">locals {
  <span style="color:#bbb">cf_template_body</span> =<span style="color:#24909d"> jsonencode</span>({
    Resources : {
      DedicatedHostGroup : {
        Type : <span style="color:#ed9d13">&#34;AWS::ResourceGroups::Group&#34;</span>
        Properties : {
          Name : <span style="color:#24909d">var</span>.service_name
          Configuration : [
            {
              Type : <span style="color:#ed9d13">&#34;AWS::EC2::HostManagement&#34;</span>
              Parameters : [
                {
                  Name : <span style="color:#ed9d13">&#34;auto-allocate-host&#34;</span>
                  Values : [<span style="color:#24909d">var</span>.auto_allocate_host]
                },
			...
			...
</code></pre></div><h2 id="templatize-stuff">Templatize stuff</h2>
<p><figure>
    <img loading="lazy" src="templatize-stuff.png"/> 
</figure>

The last case in this blog but not the least by its efficacy — render source file content as a template in Terraform.</p>
<p>Let&rsquo;s review the following scenario: you launch an EC2 instance and want to supply it with a bash script (via the user-data parameter) for some additional configuration at launch.</p>
<p>Suppose we have the following bash script <code>instance-init.sh</code> that sets the hostname and registers our instance in a monitoring system:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#cd2828;font-weight:bold">#!/bin/bash
</span><span style="color:#cd2828;font-weight:bold"></span>
hostname example.com
bash /opt/system-init/register-monitoring.sh
</code></pre></div><p>But what if you want to set a different hostname per instance, and some instances should not be registered in the monitoring system?</p>
<p>In such a case, here is how the script file content will look:</p>
<pre tabindex="0"><code class="language-gotemplate" data-lang="gotemplate">#!/bin/bash

hostname ${system_hostname}
%{ if register_monitoring }
bash /opt/system-init/register-monitoring.sh
%{endif}
</code></pre><p>And when you supply this file as an argument for the EC2 instance resource in Terraform, you will use the <code>templatefile()</code> function to make the magic happen:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-terraform" data-lang="terraform"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34;</span> <span style="color:#ed9d13">&#34;web&#34;</span> {
  <span style="color:#bbb">ami</span>           = <span style="color:#24909d">var</span>.my_ami_id
  <span style="color:#bbb">instance_type</span> = <span style="color:#24909d">var</span>.instance_type
  ...
  <span style="color:#bbb">user_data</span> = <span style="color:#24909d">templatefile</span>(<span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">${</span>path.<span style="color:#24909d">module</span><span style="color:#ed9d13">}</span><span style="color:#ed9d13">/instance-init.tftpl&#34;</span>, {
    <span style="color:#bbb">system_hostname</span>     = <span style="color:#24909d">var</span>.system_hostname
    <span style="color:#bbb">register_monitoring</span> = <span style="color:#24909d">var</span>.add_to_monitoring
  })
  ...
}
</code></pre></div><p>And of course, you can create a template from any file type. The only requirement here is that the template file must exist on the disk at the beginning of the Terraform execution.</p>
<h2 id="key-takeaways">Key takeaways</h2>
<p>Terraform is far beyond the standard resource management operations. With the power of built-in functions, you can write more versatile code and reusable Terraform modules.</p>
<p>✅ Use <a href="https://www.terraform.io/language/expressions/conditionals">conditional expressions</a> with <a href="https://www.terraform.io/language/meta-arguments/count">count</a> and <a href="https://www.terraform.io/language/meta-arguments/for_each">for_each</a> meta-arguments, when the creation of a resource depends on some context or user input.</p>
<p>✅ Take advantage of <a href="https://www.terraform.io/language/expressions/types#type-conversion">implicit type conversion</a> when working with input variables and their values to keep your code cleaner.</p>
<p>✅ Embed YAML and JSON-based objects right into your Terraform code using built-in <a href="https://www.terraform.io/language/functions/jsonencode">encoding</a> <a href="https://www.terraform.io/language/functions/yamlencode">functions</a>.</p>
<p>✅ And when you need to pass some files to the managed service, you can treat them as <a href="https://www.terraform.io/language/functions/templatefile">templates</a> and make them multipurpose.</p>
<p>Thank you for reading down to this point! 🤗</p>
<p>If you have some favorite Terraform tricks — I would love to know!</p>
]]>
            </content>
        </item>
        
        <item>
            <title>Guide to Using Terraform in CI/CD</title>
            <link>https://serhii.vasylenko.info/2021/11/24/guide-to-using-terraform-in-ci/cd/</link>
            <pubDate>Wed, 24 Nov 2021 22:20:45 +0200</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">e85bdae73a7056172fc1bab1cabfdbbe</guid>
            <description>How to configure, how to run, and what to mind for when using Terraform in CI/CD</description>
            <media:content url="https://serhii.vasylenko.info/2021/11/24/guide-to-using-terraform-in-ci/cd/cover-image.png"/>
            <content>
                <![CDATA[<p>Terraform by itself automates a lot of things: it creates, changes, and versions your cloud resources. Although many teams run Terraform locally (sometimes with wrapper scripts), running Terraform in CI/CD can boost the organization&rsquo;s performance and ensure consistent deployments.</p>
<p>In this article, I would like to review different approaches to integrating Terraform into generic deployment pipelines.</p>
<h1 id="where-to-store-the-terraform-code">Where to store the Terraform code</h1>
<p>Storing Terraform code in the same repository as the application code or maintaining a separate repository for the infrastructure?</p>
<p>This question has no strict and clear answer, but here are some insights that may help you decide:</p>
<ul>
<li>The Terraform and application code coupled together represent one unit, so it&rsquo;s simple to maintain by one team;</li>
<li>Conversely, if you have a dedicated team that manages infrastructure (e.g., platform team), a separate repository for infrastructure is more convenient because it&rsquo;s a standalone project in that case.</li>
<li>When infrastructure code is stored with the application, sometimes you have to deal with additional rules for the pipeline to separate triggers for these code parts. But sometimes (e.g., serverless apps) changes to either part (app/infra) should trigger the deployment.</li>
</ul>
<div class="attention">
    There is no right or wrong approach, but whichever you choose, remember to follow the <strong>Don’t Repeat Yourself (DRY)</strong> principle: make the infrastructure code modular by logically grouping resources into higher abstractions and reusing these modules.
</div>
<h1 id="preparing-terraform-execution-environment">Preparing Terraform execution environment</h1>
<p>Running Terraform locally generally means that all dependencies are already in-place: you have the binary installed and present in the user&rsquo;s <code>PATH</code> and perhaps even some providers already stored in the <code>.terraform</code> directory.</p>
<p>But when you shift Terraform runs from your local machine to stateless pipelines, this is not the case. However, you can still have a pre-built environment — this will speed up the pipeline execution and provide control over the process.</p>
<p>Docker image with a Terraform binary is one of the popular solutions that address this. Once created, you can execute Terraform within a container context with configuration files mounted as a Docker volume.</p>
<p>You can use the official <a href="https://hub.docker.com/r/hashicorp/terraform/">image from Hashicorp</a>, but sometimes it makes sense to maintain your own Docker images with additional tools you may need. For instance, you can bake the <code>tfsec</code> tool into the image to use it for security inspection and have it ready inside the Docker container without the need to install it every time.</p>
<p>Here is an example of a Dockerfile that builds an image with a custom Terraform version (you can override it as a build argument) and a <code>tfsec</code> tool. This example also shows how to verify the installed Terraform binary to make sure it&rsquo;s signed by HashiCorp before we run it.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#6ab825;font-weight:bold">FROM</span><span style="color:#ed9d13"> alpine:3.14</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#6ab825;font-weight:bold">ARG</span> <span style="color:#40ffff">TERRAFORM_VERSION</span>=<span style="color:#3677a9">1</span>.0.11<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#6ab825;font-weight:bold">ARG</span> <span style="color:#40ffff">TFSEC_VERSION</span>=<span style="color:#3677a9">0</span>.59.0<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#6ab825;font-weight:bold">RUN</span> apk add --no-cache --virtual .sig-check gnupg<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#6ab825;font-weight:bold">RUN</span> wget -O /usr/bin/tfsec https://github.com/aquasecurity/tfsec/releases/download/v<span style="color:#ed9d13">${</span><span style="color:#40ffff">TFSEC_VERSION</span><span style="color:#ed9d13">}</span>/tfsec-linux-amd64 <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; chmod +x /usr/bin/tfsec<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#6ab825;font-weight:bold">RUN</span> <span style="color:#24909d">cd</span> /tmp <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; wget <span style="color:#ed9d13">&#34;https://releases.hashicorp.com/terraform/</span><span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span><span style="color:#ed9d13">/terraform_</span><span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span><span style="color:#ed9d13">_linux_amd64.zip&#34;</span> <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; wget https://keybase.io/hashicorp/pgp_keys.asc <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; gpg --import pgp_keys.asc <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; gpg --fingerprint --list-signatures <span style="color:#ed9d13">&#34;HashiCorp Security&#34;</span> | grep -q <span style="color:#ed9d13">&#34;C874 011F 0AB4 0511 0D02  1055 3436 5D94 72D7 468F&#34;</span> || <span style="color:#24909d">exit</span> <span style="color:#3677a9">1</span> <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; gpg --fingerprint --list-signatures <span style="color:#ed9d13">&#34;HashiCorp Security&#34;</span> | grep -q <span style="color:#ed9d13">&#34;34365D9472D7468F&#34;</span> || <span style="color:#24909d">exit</span> <span style="color:#3677a9">1</span> <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; wget https://releases.hashicorp.com/terraform/<span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span>/terraform_<span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span>_SHA256SUMS <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; wget https://releases.hashicorp.com/terraform/<span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span>/terraform_<span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span>_SHA256SUMS.sig <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; gpg --verify terraform_<span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span>_SHA256SUMS.sig terraform_<span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span>_SHA256SUMS || <span style="color:#24909d">exit</span> <span style="color:#3677a9">1</span> <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; sha256sum -c terraform_<span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span>_SHA256SUMS 2&gt;&amp;<span style="color:#3677a9">1</span> | grep -q <span style="color:#ed9d13">&#34;terraform_</span><span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span><span style="color:#ed9d13">_linux_amd64.zip: OK&#34;</span> || <span style="color:#24909d">exit</span> <span style="color:#3677a9">1</span> <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; unzip terraform_<span style="color:#ed9d13">${</span><span style="color:#40ffff">TERRAFORM_VERSION</span><span style="color:#ed9d13">}</span>_linux_amd64.zip -d /bin <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>    &amp;&amp; rm -rf /tmp/* &amp;&amp; apk del .sig-check<span style="color:#a61717;background-color:#e3d2d2">
</span></code></pre></div><p>But the main functionality of Terraform is delivered by provider plugins. It takes time to download the provider: for example, the AWS provider is about 250MB, and in a large scale, with hundreds of Terraform runs per day, this makes a difference.</p>
<p>There are two common ways to deal with it: either use a shared cache available to your pipeline workloads or bake provider binaries into the runtime environment (i.e., Docker image).</p>
<p>The critical element for both approaches is the configuration of the plugin cache directory path. By default, Terraform looks for plugins and downloads them in the <code>.terraform</code> directory, which is local to the main project directory. But you can override this, and you can leverage the <code>TF_PLUGIN_CACHE_DIR</code> environment variable to do that.</p>
<p>If supported by your CI/CD tool, the shared cache can significantly reduce the operational burden because all your pipeline runtime environments can use it to get the needed provider versions.</p>
<p>So all you have to do is to maintain the provider versions in the shared cache and instruct Terraform to use it:</p>
<ul>
<li>Mount the cache directory to the pipeline runtime (i.e., docker container) and specify its internal path</li>
<li>Set the value of the <code>TF_PLUGIN_CACHE_DIR</code> environment variable accordingly</li>
</ul>
<p>On the other hand, you can bake the provider binaries into the Docker image and inject the value for the <code>TF_PLUGIN_CACHE_DIR</code> environment variable right into the Dockerfile.</p>
<div class="attention">
    This approach takes more operational effort <strong>but makes the Terraform environment self-sufficient and stateless</strong>. It also allows you to set strict boundaries around permitted provider versions as a security measure.
</div>
<h1 id="planning-and-applying-changes">Planning and Applying changes</h1>
<p>Now let&rsquo;s review the ways to automate planning and applying of changes. Although <code>terraform apply</code> can do both, it&rsquo;s sometimes useful to separate these actions.</p>
<h2 id="initialization">Initialization</h2>
<p>CI/CD pipelines generally run in stateless environments. Thus, every subsequent run of Terraform looks like a fresh start, so the project needs to be initialized before other actions can be performed.</p>
<p>The usage of the <code>init</code> command in CI/CD slightly differs from its common local usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; terraform init -input=<span style="color:#24909d">false</span>
</code></pre></div><p>The <code>-input=false</code> option prevents Terraform CLI from asking for user actions (it will throw an error if the input was required).</p>
<p><em>Also, there is <code>-no-color</code> option that prevents the usage of color codes in a shell, so the output will look much cleaner if your CI/CD logging system cannot render the terminal formatting.</em></p>
<p>Another option of the init command that is useful in CI — is the <code>-backend-config</code>. That option allows you to override the backend configuration in your code or define it if you prefer to use partial configuration, thus creating more uniform pipelines.</p>
<p>For example, here is how you can use the same code with different roles in different environments on AWS:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; terraform init -input=<span style="color:#24909d">false</span> <span style="color:#ed9d13">\
</span><span style="color:#ed9d13"></span>-backend-config=<span style="color:#ed9d13">&#34;role_arn=arn:aws:iam::012345678901:role/QADeploymentAutomation&#34;</span>
</code></pre></div><p>Terraform <code>init</code> produces two artifacts:</p>
<ul>
<li><code>.terraform</code> directory, which Terraform uses to manage cached provider plugins and modules, and record backend information</li>
<li><code>.terraform.lock.hcl</code> file, which Terraform uses to track provider dependencies</li>
</ul>
<p>They both must be present in the project directory to successfully run the subsequent plan and apply commands.</p>
<p>However, I suggest checking in <code>.terraform.lock.hcl</code> to your repository as suggested by HashiCorp (<a href="https://www.terraform.io/docs/language/dependency-lock.html">Dependency Lock File</a>): this way you will be able to control dependencies more thoroughly, and you will not worry about transferring this file between build stages.</p>
<h2 id="plan">Plan</h2>
<p>The  <code>terraform plan</code> command helps you validate the changes manually. However, there are ways to use it in automation as well.</p>
<p>By default, Terraform prints the plan output in a human-friendly format but also supports machine-readable JSON. With additional command-line options, you can extend your CI experience.</p>
<p>For example, you can use your validation conditions to decide whether to apply the changes automatically; or you can parse the plan details and integrate the summary into a Pull Request description. Let’s review a simple example that illustrates it.</p>
<p>First, you need to save the plan output to the file:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; terraform plan -input=<span style="color:#24909d">false</span> -compact-warnings -out=plan.file
</code></pre></div><p>The main point here is the <code>-out</code> option — it tells Terraform to save its output into a binary plan file, and we will talk about it in the next paragraph.</p>
<p>The <code>-compact-warnings</code> option suppresses the warning-level messages produced by Terraform.</p>
<p>Also, the <code>plan</code> command has the <code>-detailed-exitcode</code> option that returns detailed exit codes when the command exits. For example, you can leverage this in a script that wraps Terraform and adds more conditional logic to its execution, because CIs will generally fail the pipeline on a command’s non-zero exit code. However, that may add complexity to the pipeline logic.</p>
<p>So if you need to get detailed info about the plan, I suggest parsing the plan output.</p>
<p>When you have a plan file, you can read it in JSON format and parse it. Here is a code snippet that illustrates that:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; terraform show -json plan.file| jq -r <span style="color:#ed9d13">&#39;([.resource_changes[]?.change.actions?]|flatten)|{&#34;create&#34;:(map(select(.==&#34;create&#34;))|length),&#34;update&#34;:(map(select(.==&#34;update&#34;))|length),&#34;delete&#34;:(map(select(.==&#34;delete&#34;))|length)}&#39;</span>
{
  <span style="color:#ed9d13">&#34;create&#34;</span>: 1,
  <span style="color:#ed9d13">&#34;update&#34;</span>: 0,
  <span style="color:#ed9d13">&#34;delete&#34;</span>: <span style="color:#3677a9">0</span>
}
</code></pre></div><p>Another way to see the information about changes, is to run the <code>plan</code> command with <code>-json</code> option and parse its output to stdout (available starting from Terraform 1.0.5):</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; terraform plan -json|jq <span style="color:#ed9d13">&#39;select( .type == &#34;change_summary&#34;)|.&#34;@message&#34;&#39;</span>
<span style="color:#ed9d13">&#34;Plan: 1 to add, 0 to change, 0 to destroy.&#34;</span>
</code></pre></div><p><div class="attention">
    This technique can make your Pull Request messages more informative and improve your collaboration with teammates.
</div>
You can write a custom script/function that sends a Pull Request comment to VCS using its API. Or you can try the existing features of your VCS: with GitHub Actions, you can use the <a href="https://github.com/marketplace/actions/terraform-pr-commenter">Terraform PR Commenter</a> or similar action to achieve that; for GitLab, there is a built-in functionality that integrates plan results into the Merge Request — <a href="https://docs.gitlab.com/ee/user/infrastructure/iac/mr_integration.html">Terraform integration in Merge Requests</a>.</p>
<p>You can find more information about the specification of the JSON output here — <a href="https://www.terraform.io/docs/internals/json-format.html">Terraform JSON Output Format</a>.</p>
<h2 id="apply">Apply</h2>
<p>When the plan file is ready, and the proposed changes are expected and approved, it&rsquo;s time to <code>apply</code> them.</p>
<p>Here is how the <code>apply</code> command may look like in automation:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">terraform apply -input=<span style="color:#24909d">false</span> -compact-warnings plan.file
</code></pre></div><p>Here, the <code>plan.file</code> is the file we got from the previous plan step.</p>
<p>Alternatively, you might want to omit the planning phase at all. In that case, the following command will apply the configuration immediately, without the need for a plan:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">terraform apply -input=<span style="color:#24909d">false</span> -compact-warnings -auto-approve
</code></pre></div><p>Here, the <code>-auto-approve</code> option tells Terraform to create the plan implicitly and skip the interactive approval of that plan before applying.</p>
<p>Whichever way you choose, keep in mind the destructive nature of the apply command. Hence, the fully automated apply of configuration generally works well with environments that tolerate unexpected downtimes, such as development or testing. Whereas plan review is recommended for production-grade environments, and in that case, the <code>apply</code> job is configured for a manual trigger.</p>
<h1 id="dealing-with-stateless-environments">Dealing with stateless environments</h1>
<p>If you run <code>init</code>, <code>plan</code>, and <code>apply</code> commands in different environments, you need to care for some artifacts produced by Terraform:</p>
<ul>
<li>The <code>.terraform</code> directory with information about modules, providers, and the state file (even in the case of remote state).</li>
<li>The <code>.terraform.lock.hcl</code> file — the dependency lock file which Terraform uses to check the integrity of provider versions used for the project. If your VCS does not track it, you&rsquo;ll need to pass that file to the <code>plan</code> and <code>apply</code> commands to make them work after <code>init</code>.</li>
<li>The output file of the <code>plan</code> command is essential for the <code>apply</code> command, so treat it as a vital artifact. This file includes a full copy of the project configuration, the state, and variables passed to the <code>plan</code> command (if any). Therefore, mind the security precautions because sensitive information may be present there.</li>
</ul>
<p>There is one shortcut, though. You can execute the <code>init</code> and <code>plan</code> commands within the same step/stage and transfer the artifacts only once — to the <code>apply</code> execution.</p>
<h1 id="using-the-command-line-and-environments-variables">Using the command-line and environments variables</h1>
<p>Last but not least, a few words about ways to maximize the advantage of variables when running Terraform in CI.</p>
<p>There are two common ways how you can pass values for the variables used in the configuration:</p>
<ol>
<li>Using a <code>-var-file</code> option with the variable definitions file — a filename ending in <code>.tfvars</code> or <code>.tfvars.json</code>. For example:
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">terraform apply -var-file=development.tfvars -input=<span style="color:#24909d">false</span> -no-color -compact-warnings -auto-approve
</code></pre></div>Also, Terraform can automatically load the variables from files named exactly <code>terraform.tfvars</code> or <code>terraform.tfvars.json</code>: with that approach, you don’t need to specify the tfvar file as a command option explicitly.</li>
<li>Using environment variables with the prefix <code>TF_VAR_</code>. Implicitly, Terraform always looks for the environment variables (within its process context) with that prefix, so the same &ldquo;instance_type&rdquo; variables from the example above can be passed as follows:
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#24909d">export</span> <span style="color:#40ffff">TF_VAR_instance_type</span>=t3.nano
terraform -input=<span style="color:#24909d">false</span> -no-color -compact-warnings -auto-approve
</code></pre></div></li>
</ol>
<p>The latter method is widely used in CI because modern CI/CD tools support the management of the environment variables for automation jobs.</p>
<p>Please refer to the following official documentation if you want to know more about variables — <a href="https://www.terraform.io/docs/language/values/variables.html">Terraform Input Variables</a>.</p>
<p>Along with that, Terraform supports several configuration parameters in the form of environment variables. These parameters are optional; however, they can simplify the automation management and streamline its code.</p>
<ul>
<li><code>TF_INPUT</code> — when set to &ldquo;false&rdquo; or &ldquo;0&rdquo;, this tells Terraform to behave the same way as with the <code>-input=false</code> flag;</li>
<li><code>TF_CLI_ARGS</code> — can contain a set of command-line options that will be passed to one or another Terraform command. Therefore, the following notation can simplify the execution of <code>apply</code> and <code>plan</code> commands by unifying their options for CI:
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#24909d">export</span> <span style="color:#40ffff">TF_CLI_ARGS</span>=<span style="color:#ed9d13">&#34;-input=false -no-color -compact-warnings&#34;</span>
terraform plan ...
terraform apply ...
</code></pre></div>You can advantage this even more when using this variable as the environment configuration of stages or jobs in a CI/CD tool.</li>
<li><code>TF_IN_AUTOMATION</code>  — when set to any non-empty value (e.g., &ldquo;true&rdquo;), Terraform stops suggesting commands run after the one you execute, hence producing less output.</li>
</ul>
<h1 id="key-takeaways">Key takeaways</h1>
<p>There are two primary outcomes from automating Terraform executions: consistent results and integrating with the code or project management solutions. Although the exact implementation of Terraform in CI may vary per project or team, try to aim the following goals when working on it:</p>
<ul>
<li>Ease of code management</li>
<li>A secure and controlled execution environment</li>
<li>Coherent runs of init, plan, apply phases</li>
<li>Leveraging of built-in Terraform capabilities</li>
</ul>
<h5 id="i-originally-wrote-this-article-for-the-spaceliftio-technical-blog-but-i-decided-to-keep-it-here-as-well-for-the-history-the-canonical-link-to-their-blog-has-been-set-accordingly">I originally wrote this article for the Spacelift.io technical blog. But I decided to keep it here as well, for the history. The canonical link to their blog has been set accordingly.</h5>
]]>
            </content>
        </item>
        
        <item>
            <title>Apply Cloudfront Security Headers With Terraform</title>
            <link>https://serhii.vasylenko.info/2021/11/05/apply-cloudfront-security-headers-with-terraform/</link>
            <pubDate>Fri, 05 Nov 2021 14:20:58 +0200</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">f515b1f59c0c5a95c4b9a1a06c7d17b0</guid>
            <description>This blog explains how to use Response Headers Policy and Terraform to configure security headers for CloudFront Distribution</description>
            <media:content url="https://serhii.vasylenko.info/2021/11/05/apply-cloudfront-security-headers-with-terraform/cover-image.png"/>
            <content>
                <![CDATA[<p>In November 2021, AWS announced Response Headers Policies — native support of response headers in CloudFront. You can read the full announcement here: <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/amazon-cloudfront-introduces-response-headers-policies/">Amazon CloudFront introduces Response Headers Policies</a></p>
<p>I said &ldquo;native&rdquo; because previously you could set response headers either using <a href="https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.html">CloudFront Functions</a> or <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/adding-http-security-headers-using-lambdaedge-and-amazon-cloudfront/">Lambda@Edge</a>.</p>
<p>And one of the common use cases for that was to set security headers. Now you don&rsquo;t need to add intermediate requests processing to modify the headers: CloudFront does that for you <strong>with no additional fee</strong>.</p>
<h2 id="manage-security-headers-as-code">Manage Security Headers as Code</h2>
<p>Starting from the <a href="https://github.com/hashicorp/terraform-provider-aws/blob/main/CHANGELOG.md#3640-november-04-2021">3.64.0</a> version of Terraform AWS provider, you can create the security headers policies and apply them for your distribution.</p>
<p>Let&rsquo;s see how that looks!</p>
<p>First, you need to describe the <code>aws_cloudfront_response_headers_policy</code> resource:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_cloudfront_response_headers_policy&#34; &#34;security_headers_policy&#34;</span> {
  name = <span style="color:#ed9d13">&#34;my-security-headers-policy&#34;</span>
  <span style="color:#6ab825;font-weight:bold">security_headers_config</span> {
    <span style="color:#6ab825;font-weight:bold">content_type_options</span> {
      override = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">frame_options</span> {
      frame_option = <span style="color:#ed9d13">&#34;DENY&#34;</span>
      override     = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">referrer_policy</span> {
      referrer_policy = <span style="color:#ed9d13">&#34;same-origin&#34;</span>
      override        = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">xss_protection</span> {
      mode_block = <span style="color:#6ab825;font-weight:bold">true</span>
      protection = <span style="color:#6ab825;font-weight:bold">true</span>
      override   = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">strict_transport_security</span> {
      access_control_max_age_sec = <span style="color:#ed9d13">&#34;63072000&#34;</span>
      include_subdomains         = <span style="color:#6ab825;font-weight:bold">true</span>
      preload                    = <span style="color:#6ab825;font-weight:bold">true</span>
      override                   = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">content_security_policy</span> {
      content_security_policy = <span style="color:#ed9d13">&#34;frame-ancestors &#39;none&#39;; default-src &#39;none&#39;; img-src &#39;self&#39;; script-src &#39;self&#39;; style-src &#39;self&#39;; object-src &#39;none&#39;&#34;</span>
      override                = <span style="color:#6ab825;font-weight:bold">true</span>
    }
  }
}
</code></pre></div><p>List of security headers used:</p>
<ul>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-content-type-options">X-Content-Type-Options</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-frame-options">X-Frame-Options</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#referrer-policy">Referrer Policy</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-xss-protection">X-XSS-Protection</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#http-strict-transport-security">Strict Transport Security</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#content-security-policy">Content Security Policy</a></li>
</ul>
<p>The values for the security headers can be different, of course. However, the provided ones cover the majority of cases. And you can always get the up to date info about these headers and possible values here: <a href="https://infosec.mozilla.org/guidelines/web_security">Mozilla web Security Guidelines</a></p>
<p>Also, you could notice that provided example uses the <code>override</code> argument a lot. The <code>override</code> argument tells CloudFront to set these values for specified headers despite the values received from the origin. This way, you can enforce your security headers configuration.</p>
<p>Once you have the <code>aws_cloudfront_response_headers_policy</code> resource, you can refer to it in the code of <code>aws_cloudfront_distribution</code> resource inside cache behavior block (default or ordered). For example, in your <code>default_cache_behavior</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_cloudfront_distribution&#34; &#34;test&#34;</span> {
  <span style="color:#6ab825;font-weight:bold">default_cache_behavior</span> {
    target_origin_id           = <span style="color:#6ab825;font-weight:bold">aws_s3_bucket</span>.<span style="color:#6ab825;font-weight:bold">my_origin</span>.<span style="color:#6ab825;font-weight:bold">id</span>
    allowed_methods            = [<span style="color:#ed9d13">&#34;GET&#34;, &#34;HEAD&#34;, &#34;OPTIONS&#34;</span>]
    cached_methods             = [<span style="color:#ed9d13">&#34;GET&#34;, &#34;HEAD&#34;</span>]
    viewer_protocol_policy     = <span style="color:#ed9d13">&#34;redirect-to-https&#34;</span><span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">    # some arguments skipped from listing for the sake of simplicity
</span><span style="color:#999;font-style:italic"></span>    
    response_headers_policy_id = <span style="color:#6ab825;font-weight:bold">aws_cloudfront_response_headers_policy</span>.<span style="color:#6ab825;font-weight:bold">security_headers_policy</span>.<span style="color:#6ab825;font-weight:bold">id</span>
    
  }<span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">  # some arguments skipped from listing for the sake of simplicity
</span><span style="color:#999;font-style:italic"></span>}
</code></pre></div><h3 id="security-scan-results">Security Scan Results</h3>
<p>Here is what Mozilla Observatory reports about my test CF distribution where I enabled the policy described above:</p>
<figure>
    <img loading="lazy" src="observatory-results.png"
         alt="Scan summary for CloudFront distribution with security headers policy"/> <figcaption>
            <p>Scan summary for CloudFront distribution with security headers policy</p>
        </figcaption>
</figure>

<p>So with just minimum effort, you can greatly boost your web application security posture.</p>
<h3 id="more-to-read">More to read:</h3>
<ul>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_response_headers_policy">Terraform Resource: aws_cloudfront_response_headers_policy</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/creating-response-headers-policies.html">Creating response headers policies - Amazon CloudFront</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html">Using the managed response headers policies - Amazon CloudFront</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-response-headers-policies.html">Understanding response headers policies - Amazon CloudFront</a></li>
</ul>
]]>
            </content>
        </item>
        
        <item>
            <title>Terraforming mac1.metal at AWS</title>
            <link>https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html</link>
            <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">b59ec6d3701cd18d92607e4c6a6503dd</guid>
            <description>How to manage mac1.metal EC2 instances with Terraform</description>
            <media:content url="https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html2021-01-20-terraforming-mac1-metal-at-AWS.jpg"/>
            <content>
                <![CDATA[<div class="updatenotice">
    Updated on the 23rd of October, 2021: Terraform AWS provider now <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_host">supports</a> Dedicated Hosts natively
</div>
<p>In November 2021, AWS <a href="https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/">announced</a> the support for Mac mini instances.</p>
<p>I believe this is huge, even despite the number of constraints this solution has. This offering opens the door to seamless macOS CI/CD integration into existing AWS infrastructure.</p>
<p>So here is a quick-start example of creating the dedicated host and the instance altogether using Terraform.</p>
<p>I intentionally used some hardcoded values for the sake of simplicity in the example.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_ec2_host&#34; &#34;example_host&#34;</span> {
  instance_type     = <span style="color:#ed9d13">&#34;mac1.metal&#34;</span>
  availability_zone = <span style="color:#ed9d13">&#34;us-east-1a&#34;</span>
}

<span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;example_instance&#34;</span> {
  ami           = <span style="color:#6ab825;font-weight:bold">data</span>.<span style="color:#6ab825;font-weight:bold">aws_ami</span>.<span style="color:#6ab825;font-weight:bold">mac1metal</span>.<span style="color:#6ab825;font-weight:bold">id</span>
  host_id       = <span style="color:#6ab825;font-weight:bold">aws_ec2_host</span>.<span style="color:#6ab825;font-weight:bold">example_host</span>.<span style="color:#6ab825;font-weight:bold">id</span>
  instance_type = <span style="color:#ed9d13">&#34;mac1.metal&#34;</span>
  subnet_id     = <span style="color:#6ab825;font-weight:bold">data</span>.<span style="color:#6ab825;font-weight:bold">aws_subnet</span>.<span style="color:#6ab825;font-weight:bold">example_subnet</span>.<span style="color:#6ab825;font-weight:bold">id</span>
}

<span style="color:#6ab825;font-weight:bold">data</span> <span style="color:#ed9d13">&#34;aws_subnet&#34; &#34;example_subnet&#34;</span> {
  availability_zone = <span style="color:#ed9d13">&#34;us-east-1a&#34;</span>
  <span style="color:#6ab825;font-weight:bold">filter</span> {
    name   = <span style="color:#ed9d13">&#34;tag:Tier&#34;</span><span style="color:#999;font-style:italic"> # you should omit this filter if you don&#39;t distinguish your subnets on private and public 
</span><span style="color:#999;font-style:italic"></span>    values = [<span style="color:#ed9d13">&#34;private&#34;</span>]
  }
}

<span style="color:#6ab825;font-weight:bold">data</span> <span style="color:#ed9d13">&#34;aws_ami&#34; &#34;mac1metal&#34;</span> {
  owners      = [<span style="color:#ed9d13">&#34;amazon&#34;</span>]
  most_recent = <span style="color:#6ab825;font-weight:bold">true</span>
  <span style="color:#6ab825;font-weight:bold">filter</span> {
    name   = <span style="color:#ed9d13">&#34;name&#34;</span>
    values = [<span style="color:#ed9d13">&#34;amzn-ec2-macos-11*&#34;</span>]<span style="color:#999;font-style:italic"> # get latest BigSur AMI
</span><span style="color:#999;font-style:italic"></span>  }
}
</code></pre></div><p>Simple as that, yes. Now, you can integrate it into your CI system and have the Mac instance with the underlying host in a bundle.</p>
<p>💡 Pro tip: you can leverage the <code>aws_ec2_instance_type_offerings</code> <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ec2_instance_type_offerings">Data Source</a> and use its output with <code>aws_subnet</code> source to avoid availability zone hardcoding.</p>
<p>To make the code more uniform and reusable, you can wrap it into a <a href="https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html">Terraform module</a> that accepts specific parameters (such as <code>instance_type</code> or <code>availability_zone</code>) as input variables.</p>
]]>
            </content>
        </item>
        
        <item>
            <title>Terraform Workflow — Working Individually and in a Team</title>
            <link>https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.html</link>
            <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">5ecaef6db275b898f1823d89b89b3bef</guid>
            <description>An overview of best practices for working with Terraform individually or in a team</description>
            <media:content url="https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.htmltf-workflows.jpeg"/>
            <content>
                <![CDATA[<p>The work with Terraform code may become tangled sometimes. Here are some guides on how to streamline it and make it transparent for you and your team.</p>
<p>It is extremely helpful in a team, and can benefit you even if you work individually. A good workflow enables you to streamline a process, organize it, and make it less error-prone.</p>
<p>This article summaries several approaches when working with Terraform, both individually and in a team. I tried to gather the most common ones, but you might also want to develop your own.</p>
<p>The common requirement for all of them is a version control system (such as Git). This is how you ensure nothing is lost and all your code changes are properly versioned tracked.</p>
<p>Table of contents:</p>
<ul>
<li><a href="#basic-concepts">Basic Concepts</a></li>
<li><a href="#core-individual-workflow">Core individual workflow</a></li>
<li><a href="#core-team-workflow">Core team workflow</a></li>
<li><a href="#team-workflow-with-automation">Team workflow with automation</a></li>
<li><a href="#import-workflow">Import workflow</a></li>
</ul>
<h1 id="basic-concepts">Basic Concepts</h1>
<p>Let’s define the basic actions first.</p>
<p>All described workflows are built on top of three key steps: Write, Plan, and Apply. Nevertheless, their details and actions vary between workflows.</p>
<p><img loading="lazy" src="tf-workflow.png" alt=""  />

<em>It&rsquo;s a piece of cake, isn&rsquo;t it? 😆</em></p>
<p><strong>Write</strong> – this is where you make changes to the code.</p>
<p><strong>Plan</strong> – this is where you review changes and decide whether to accept them.</p>
<p><strong>Apply</strong> – this is where you accept changes and apply them against real infrastructure.</p>
<p>It&rsquo;s a simple idea with a variety of possible implementations.</p>
<h1 id="core-individual-workflow">Core individual workflow</h1>
<p>This is the most simple workflow if you work alone on a relatively small TF project. This workflow suits both local and remote backends well.</p>
<p><img loading="lazy" src="tf-workflow-individual.png" alt=""  />

<em>Let&rsquo;s add a bit of Git</em></p>
<h3 id="write">Write</h3>
<p>You clone the remote code repo or pull the latest changes, edit the configuration code, then run the <code>terraform validate</code> and <code>terraform fmt</code> commands to make sure your code works well.</p>
<h3 id="plan">Plan</h3>
<p>This is where you run the <code>terraform plan</code> command to make sure that your changes do what you need. This is a good time to commit your code changes changes (or you can do it in the next step).</p>
<h3 id="apply">Apply</h3>
<p>This is when you run <code>terraform apply</code> and introduce the changes to real infrastructure objects. Also, this is when you push committed changes to the remote repository.</p>
<h1 id="core-team-workflow">Core team workflow</h1>
<p>This workflow is good for when you work with configuration code in a team and want to use feature branches to manage the changes accurately.</p>
<p><img loading="lazy" src="tf-core-workflow-team.png" alt=""  />

<em>Don&rsquo;t get scared, it is still simple, just follow the lines</em></p>
<h3 id="write-1">Write</h3>
<p>Start by checking out a new branch, make your changes, and run the <code>terraform validate</code> and <code>terraform fmt</code> commands to make sure your code works well.</p>
<p>Running <code>terraform plan</code> at this step will help ensure that you&rsquo;ll get what you expect.</p>
<h3 id="plan-1">Plan</h3>
<p>This is where code and plan reviews happen.</p>
<p>Add the output of the <code>terraform plan</code> command to the Pull Request with your changes. It would be a good idea to add only the changed parts of the common output, which is the part that starts with &ldquo;Terraform will perform the following actions&rdquo; string.</p>
<h3 id="apply-1">Apply</h3>
<p>Once the PR is reviewed and merged to the upstream branch, it is safe to finally pull the upstream branch locally and apply the configuration with <code>terraform apply</code>.</p>
<h1 id="team-workflow-with-automation">Team workflow with automation</h1>
<p>In a nutshell, this workflow allows you to introduce a kind of smoke test for your infrastructure code (using <code>plan</code>) and also to automate the feedback in the CI process.</p>
<p>The automated part of this workflow consists of a speculative plan on commit and/or Pull Request (PR ), along with adding the output of <code>plan</code> to the comment of the PR. A speculative plan mean just to show the changes, and not apply them afterward.</p>
<p><img loading="lazy" src="tf-workflow-team-automation-1.png" alt=""  />

<em>I like when TF plan output is included to PR, but nobody likes to read others TF plans for some reason&hellip;</em></p>
<h3 id="write-2">Write</h3>
<p>This step is the same as in the previous workflow.</p>
<h3 id="plan-2">Plan</h3>
<p>This is where your CI tool does its job.</p>
<p>Let’s review this step by step:</p>
<ol>
<li>You create a PR with the code changes you wish to implement.</li>
<li>The CI pipeline is triggered by an event from your code repository (such as webhook push) and it runs a speculative plan against your code.</li>
<li>The list of changes (a so-called &ldquo;plan diff&rdquo;) is added to PR for review by the CI.</li>
<li>Once merged, the CI pipeline runs again and you get the final plan that&rsquo;s ready to be applied to the infrastructure.</li>
</ol>
<h3 id="apply-2">Apply</h3>
<p>Now that you have a branch (i.e. main) with the fresh code to apply, you need to pull it locally and run <code>terraform apply</code>.</p>
<p>You can also add the automated apply here – step 5 in the picture below. This may be very useful for disposable environments such as testing, staging, development, and so on.</p>
<p>The exact CI tool to be used here is up to you: Jenkins, GitHub Actions, and Travis CI all work well.</p>
<p>An important thing to note is that the CI pipeline must be configured in a bi-directional way with your repository to get the code from it and report back with comments to PR.</p>
<p>As an option, you may consider using Terraform Cloud which has a lot of functionality, including the above mentioned repo integration, even with the free subscription.</p>
<p>If you have never worked with Terraform Cloud before and want to advice to get started, I&rsquo;ll provide the links at the end of this article.</p>
<h1 id="import-workflow">Import workflow</h1>
<p>This workflow refers to a situation when you have some objects already created (i.e., up and running), and you need to manage them with Terraform.</p>
<p>Suppose we already have an S3 bucket in AWS called &ldquo;someassetsbucket&rdquo; and we want to include it into our configuration code.‌‌</p>
<p><img loading="lazy" src="tf-workflow-import.png" alt=""  />
</p>
<h3 id="prepare">Prepare</h3>
<p>You should create a resource block to be used later for the real object you’re going to import.</p>
<p>You don’t need to fill the arguments in it at the start, so it may be just a blank resource block, for example:</p>
<pre tabindex="0"><code>resource &quot;aws_s3_bucket&quot; &quot;someassetsbucket&quot; {
‌‌
}
</code></pre><h3 id="import">Import</h3>
<p>Now you need to import the information about the real object into your existing Terraform state file.</p>
<p>This can be done with the <code>terraform import</code> command, for example:</p>
<pre tabindex="0"><code>terraform import aws_s3_bucket.assets &quot;someassetsbucket&quot;
</code></pre><p>‌Be sure to also check the list of possible options import accepts with <code>terraform import -h</code></p>
<h3 id="write-3">Write</h3>
<p>Now you need to write the corresponding Terraform code for this bucket.</p>
<p>To avoid modifying your real object on the <code>terraform apply</code> action, you should specify all needed arguments with the exact values from the import phase.</p>
<p>You can see the details by running the <code>terraform state show</code> command, for example:</p>
<pre tabindex="0"><code>terraform state show aws_s3_bucket.assets
</code></pre><p>The output of this command will be very similar to the configuration code. But it contains both arguments and attributes of the resource, so you need to clean it up before applying it.</p>
<p>You can use one of the following tactics:</p>
<ul>
<li>either copy/paste it, and then run <code>terraform validate</code> and <code>terraform plan</code> several times to make sure there are no errors like &ldquo;argument is not expected here&rdquo; or &ldquo;this field cannot be set&rdquo;</li>
<li>or you can pick and write only the necessary arguments</li>
</ul>
<p>In any case, be sure to refer to the documentation of the resource during this process.</p>
<h3 id="plan-3">Plan</h3>
<p>The goal is to have a <code>terraform plan</code> output showing &ldquo;~ update in-place&rdquo; changes only.</p>
<p>However, it is not always clear whether the real object will be modified or only the state file will be updated. This is why you should understand how a real object works and know its life cycle to make sure it is safe to apply the plan.</p>
<h3 id="apply-3">Apply</h3>
<p>This is usual the <code>terraform apply</code> action.</p>
<p>Once applied, your configuration and state file will correspond to the real object configuration.</p>
<h1 id="wrapping-up">Wrapping up</h1>
<p>Here is an overview of Terraform Cloud for those who never worked with it before: <a href="https://www.terraform.io/docs/cloud/overview.html">‌‌Overview of Terraform Cloud Features</a></p>
<p>And here is a nice tutorial to start with: <a href="https://learn.hashicorp.com/collections/terraform/cloud-get-started">Get Started - Terraform Cloud</a></p>
<p>Also, here is an overview of workflows at scale from the HashiCorp CTO which might be useful for more experienced Terraform users: <a href="https://www.hashicorp.com/resources/terraform-workflow-best-practices-at-scale">Terraform Workflow Best Practices at Scale</a></p>
<p>Thank you for reading. I hope you will try one of these workflows, or develop your own!‌‌</p>
<hr>
<h6 id="this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers">This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.</h6>
]]>
            </content>
        </item>
        
        <item>
            <title>Terraform Certification Tips</title>
            <link>https://serhii.vasylenko.info/2020/09/15/terraform-certification-tips.html</link>
            <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">e31208d7d4c65613474da2bcbaef6ddb</guid>
            <description>Summary of a learning path to HashiCorp Certified — Terraform Associate</description>
            <media:content url="https://serhii.vasylenko.info/2020/09/15/terraform-certification-tips.htmlterraform-associate.png"/>
            <content>
                <![CDATA[<p>I successfully passed the &ldquo;HashiCorp Certified — Terraform Associate&rdquo; exam last Friday and decided to share some advice for exam preparation.</p>
<h2 id="make-yourself-a-plan">Make yourself a plan</h2>
<p>Make a list of things you are going to go through: links to the study materials, practice tasks, some labs, some articles on relative blogs (Medium, Dev.to, etc.).
It should look at a &ldquo;todo&rdquo; or &ldquo;check&rdquo;-list. It may seem silly at first glance, but the list with checkboxes does its &ldquo;cognitive magic&rdquo;. When you go point by point, marking items as &ldquo;done&rdquo;, you feel the progress and this motivates you to keep going further.
For example, you can make a plan from the resources I outlined below in this article.</p>
<p>I encourage you to explore the Internet for something by yourself as well. Who knows, perhaps you will find some learning course that fits you better. And that is great! However, when you find it, take extra 5-10 minutes to go through its curriculum and create a list with lessons.</p>
<p>It feels so nice to cross out items off the todo list, believe me 😄
<img loading="lazy" src="todo-list.jpg" alt=""  />
</p>
<h2 id="go-through-the-official-study-guide">Go through the official Study Guide</h2>
<p>Despite your findings on the Internet, I strongly suggest going through the official study guide</p>
<p><a href="https://learn.hashicorp.com/tutorials/terraform/associate-study">Study Guide - Terraform Associate Certification</a></p>
<p>It took me about 20 hours to complete it (including practice tasks based on topics in the guide), and it was the core of my studying. I did not buy or search for some third-party course intentionally because I did have some Terraform experience before starting the preparation. But give the official guide a chance even if you found some course. It is well-made and matches real exam questions very precisely.</p>
<p>Also, there is an official <a href="https://learn.hashicorp.com/tutorials/terraform/associate-review">Exam Review</a>. Someone might find this even better because it is a direct mapping of each exam objective to HashiCorp&rsquo;s documentation and training.</p>
<h2 id="take-additional-tutorials">Take additional tutorials</h2>
<p>Here is a list of additional tutorials and materials I suggest adding into your learning program:</p>
<h4 id="official-guides--documentation">Official guides / documentation:</h4>
<ul>
<li><a href="https://learn.hashicorp.com/collections/terraform/automation">Automate Terraform</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/cloud">Collaborate using Terraform Cloud</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/0-13">Terraform tutorials</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/modules">Reuse Configuration with Modules</a></li>
<li><a href="https://www.hashicorp.com/resources/a-practitioner-s-guide-to-using-hashicorp-terraform-cloud-with-github">A Practitioner’s Guide to Using HashiCorp Terraform Cloud with GitHub</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/policy">Enforce Policy with Sentinel</a></li>
</ul>
<h4 id="third-party-articles-and-guides">Third-party articles and guides:</h4>
<ul>
<li><a href="https://prefetch.net/blog/2020/04/27/using-the-terraform-console-to-debug-interpolation-syntax/">Using the terraform console to debug interpolation syntax</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL5VXZTK6spA2HF5Kf0rI9RDRHF9Hopffr">YouTube playlist with exam-like questions review</a></li>
</ul>
<h2 id="find-yourself-some-practice">Find yourself some practice</h2>
<h4 id="mockup-a-project">Mockup a project</h4>
<p>You can greatly improve your practice by mocking some real business cases.</p>
<p>If you already work in some company you can set up the project you&rsquo;re working with using Terraform. If you don’t have a real project or afraid to accidentally violate NDA, try this open-source demo project: <a href="https://github.com/gothinkster/realworld">Real World Example Apps</a>.</p>
<p>It is a collection of different codebases for front-end and back-end used to build the same project. Just find the combination that suits your experience better and try to build the infrastructure for it using Terraform.</p>
<p><img loading="lazy" src="real-world-demo.jpg" alt=""  />
</p>
<h4 id="answer-forum-topics">Answer forum topics</h4>
<p>Last but not least advice — try to answer some questions on the official <a href="https://discuss.hashicorp.com/c/terraform-core/">Terraform forum</a>.</p>
<p>This is a nice way to test your knowledge, help others, and develop the community around Terraform. Just register there, look for the latest topics, and have fun!</p>
<p><img loading="lazy" src="tf-forum.jpg" alt=""  />
</p>
<h4 id="-i-sincerely-wish-you-exciting-preparation-and-a-successful-exam-">🍀 I sincerely wish you exciting preparation and a successful exam! 🍀</h4>
]]>
            </content>
        </item>
        
        <item>
            <title>What are Terraform Modules and how do they work?</title>
            <link>https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html</link>
            <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">701d1f90a61dcbb6b1edac29a46381f8</guid>
            <description>Explanation of Terraform modules and their main concepts in English.</description>
            <media:content url="https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.htmlterraform-modules.jpeg"/>
            <content>
                <![CDATA[<p>Surprisingly, a lot of beginners skip over Terraform modules for the sake of simplicity, or so they think. Later, they find themselves going through hundreds of lines of configuration code.</p>
<p>I assume you already know some basics about Terraform or even tried to use it in some way before reading the article.</p>
<p>Please note: I do not use real code examples with some specific provider like AWS or Google intentionally, just for the sake of simplicity.</p>
<h2 id="terraform-modules">Terraform modules</h2>
<p>You already write modules even if you think you don’t.</p>
<p>Even when you don&rsquo;t create a module intentionally, if you use Terraform, you are already writing a module – a so-called &ldquo;root&rdquo; module.</p>
<p>Any number of Terraform configuration files <code>(.tf)</code> in a directory (even one) forms a module.</p>
<h3 id="what-does-the-module-do">What does the module do?</h3>
<p>A Terraform module allows you to create logical abstraction on the top of some resource set. In other words, a module allows you to group resources together and reuse this group later, possibly many times.</p>
<p>Let&rsquo;s assume we have a virtual server with some features hosted in the cloud. What set of resources might describe that server? For example:
– the virtual machine itself (created from some image)
– an attached block device of specified size (for additional storage)
– a static public IP mapped to the server&rsquo;s virtual network interface
– a set of firewall rules to be attached to the server
– something else&hellip; (i.e. another block device, additional network interface, etc)</p>
<p><img loading="lazy" src="1.png" alt=""  />
</p>
<p>Now let&rsquo;s assume that you need to create this server with a set of resources many times. This is where modules are really helpful – you don&rsquo;t want to repeat the same configuration code over and over again, do you?</p>
<p>Here is an example that illustrates how our &ldquo;server&rdquo; module might be called.
&ldquo;To call a module&rdquo; means to use it in the configuration file.</p>
<p>Here we create 5 instances of the &ldquo;server&rdquo; using single set of configurations (in the module):</p>
<pre tabindex="0"><code>module &quot;server&quot; {
    
    count         = 5
    
    source        = &quot;./module_server&quot;
    some_variable = some_value
}
</code></pre><h3 id="modules-organisation-child-and-root">Modules organisation: child and root</h3>
<p>Of course, you would probably want to create more than one module. Here are some common examples:</p>
<ul>
<li>for a network (i.e. VPC)</li>
<li>for a static content hosting (i.e. buckets)</li>
<li>for a load balancer and it&rsquo;s related resources</li>
<li>for a logging configuration</li>
<li>and whatever else you consider a distinct logical component of the infrastructure</li>
</ul>
<p>Let&rsquo;s say we have two different modules: a &ldquo;server&rdquo; module and a &ldquo;network&rdquo; module. The module called &ldquo;network&rdquo; is where we define and configure our virtual network and place servers in it:</p>
<pre tabindex="0"><code>module &quot;server&quot; {
    source        = &quot;./module_server&quot;
    some_variable = some_value
}

module &quot;network&quot; {  
    source              = &quot;./module_network&quot;
    some_other_variable = some_other_value
}
</code></pre><p>Once we have some custom modules, we can refer to them as &ldquo;child&rdquo; modules. And the configuration file where we call child modules relates to the root module.</p>
<p><img loading="lazy" src="2.png" alt=""  />
</p>
<p>A child module can be sourced from a number of places:</p>
<ul>
<li>local paths</li>
<li>official Terraform Registry (if you&rsquo;re familiar with other registries, i.e. Docker Registry then you already understand the idea)</li>
<li>Git repository (a custom one or GitHub/BitBucket)</li>
<li>HTTP URL to .zip archive with module</li>
</ul>
<p>But how can you pass resources details between modules?</p>
<p>In our example, the servers should be created in a network. So how can we tell the &ldquo;server&rdquo; module to create VMs in a network which was created in a module called &ldquo;network&rdquo;?</p>
<p>This is where <strong>encapsulation</strong> comes in.</p>
<h2 id="module-encapsulation">Module encapsulation</h2>
<p>Encapsulation in Terraform consists of two basic concepts: module scope and explicit resources exposure.</p>
<h3 id="module-scope">Module Scope</h3>
<p>All resource instances, names, and therefore, resource visibility, are isolated in a module&rsquo;s scope. For example, module &ldquo;A&rdquo; can&rsquo;t see and does not know about resources in module &ldquo;B&rdquo; by default.</p>
<p>Resource visibility, sometimes called resource isolation, ensures that resources will have unique names within a module&rsquo;s namespace. For example, with our 5 instances of the &ldquo;server&rdquo; module:</p>
<pre tabindex="0"><code>module.server[0].resource_type.resource_name
module.server[1].resource_type.resource_name
module.server[2].resource_type.resource_name
</code></pre><p>On the other hand, we could create two instances of the same module with different names:</p>
<pre tabindex="0"><code>module &quot;server-alpha&quot; {    
    source        = &quot;./module_server&quot;
    some_variable = some_value
}
module &quot;server-beta&quot; {
    source        = &quot;./module_server&quot;
    some_variable = some_value
}
</code></pre><p>In this case, the naming or address of resources would be as follows:</p>
<pre tabindex="0"><code>module.server-alpha.resource_type.resource_name

module.server-beta.resource_type.resource_name
</code></pre><h3 id="explicit-resources-exposure">Explicit resources exposure</h3>
<p>If you want to access some details for the resources in another module, you&rsquo;ll need to explicitly configure that.</p>
<p>By default, our module &ldquo;server&rdquo; doesn&rsquo;t know about the network that was created in the &ldquo;network&rdquo; module.</p>
<p><img loading="lazy" src="3.png" alt=""  />
</p>
<p>So we must declare an <code>output</code> value in the &ldquo;network&rdquo; module to export its resource, or an attribute of a resource, to other modules.</p>
<p>The module &ldquo;server&rdquo; must declare a <code>variable</code> to be used later as the input.</p>
<p><img loading="lazy" src="4.png" alt=""  />
</p>
<p>This explicit declaration of the output is the way to expose some resource (or information about it) outside — to the scope of the &lsquo;root&rsquo; module, hence to make it available for other modules.</p>
<p>Next, when we call the child module &ldquo;server&rdquo;  in the root module, we should assign the output from the &ldquo;network&rdquo; module to the variable of the &ldquo;server&rdquo; module:</p>
<pre tabindex="0"><code>network_id = module.network.network_id
</code></pre><p>Here is how the final code for calling our child modules will look like in result:</p>
<pre tabindex="0"><code>module &quot;server&quot; {
    count         = 5
    source        = &quot;./module_server&quot;
    some_variable = some_value
    network_id    = module.network.network_id
}

module &quot;network&quot; {  
    source              = &quot;./module_network&quot;
    some_other_variable = some_other_value
}
</code></pre><p>This example configuration would create 5 instances of the same server, with all the necessary resources, in the network we created with as a separate module.</p>
<h3 id="wrap-up">Wrap up</h3>
<p>Now you should understand what modules are and what do they do.</p>
<p>If you&rsquo;re at the beginning of your Terraform journey, here are some suggestions for the next steps.</p>
<p>I encourage you to take this short tutorial from HashiCorp, the creators of Terraform, about modules:  <a href="https://learn.hashicorp.com/collections/terraform/modules">&ldquo;Organize Configuration&rdquo;</a></p>
<p>Also, there is a great comprehensive study guide which covers everything from beginner to advanced concepts about Terraform: <a href="https://learn.hashicorp.com/tutorials/terraform/associate-study?in=terraform/certification">&ldquo;Study Guide - Terraform Associate Certification&rdquo;</a></p>
<p>The modular code structure makes your configuration more flexible and yet easy to be understood by others. The latter is especially useful in teamwork.</p>
<hr>
<h6 id="this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers">This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.</h6>
]]>
            </content>
        </item>
        
        <item>
            <title>Terraform CLI shortcuts</title>
            <link>https://serhii.vasylenko.info/2020/08/25/terraform-cli-shortcuts.html</link>
            <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">13f3aff0fd1d66455aacc876aca317a5</guid>
            <description>A bunch of small tools I use to simplify Terraform workflow</description>
            <media:content url="https://serhii.vasylenko.info/2020/08/25/terraform-cli-shortcuts.html2020-08-25-terraform-cli-shortcuts.jpg"/>
            <content>
                <![CDATA[<p>Here is some CLI shortcuts I use day-to-day to simplify and speed-up my Terraform workflow.
Requirements &mdash; bash-compatible interpreter, because aliases and functions described below will work with bash, zsh and ohmyzsh.</p>
<p>In order to use any of described aliases of functions, you need to place it in your <code>~/.bashrc</code> or <code>~/.zshrc</code> file (or any other configuration file you have for your shell).</p>
<p>Then just source this file, for example: <code>source ~/.zshrc</code></p>
<h2 id="function-list-outputs-and-variables-of-given-module">Function: list outputs and variables of given module</h2>
<p>You need to provide the path to module directory, and this function will list all declared variables and outputs module has. It comes very useful when you don&rsquo;t remember them all and just need to take a quick look.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#999;font-style:italic">## TerraForm MOdule Explained</span>
<span style="color:#6ab825;font-weight:bold">function</span> tfmoe {
  <span style="color:#24909d">echo</span> -e <span style="color:#ed9d13">&#34;\nOutputs:&#34;</span>
  grep -r <span style="color:#ed9d13">&#34;output \&#34;.*\&#34;&#34;</span> <span style="color:#40ffff">$1</span> |awk <span style="color:#ed9d13">&#39;{print &#34;\t&#34;,$2}&#39;</span> |tr -d <span style="color:#ed9d13">&#39;&#34;&#39;</span>
  <span style="color:#24909d">echo</span> -e <span style="color:#ed9d13">&#34;\nVariables:&#34;</span>
  grep -r <span style="color:#ed9d13">&#34;variable \&#34;.*\&#34;&#34;</span> <span style="color:#40ffff">$1</span> |awk <span style="color:#ed9d13">&#39;{print &#34;\t&#34;,$2}&#39;</span> |tr -d <span style="color:#ed9d13">&#39;&#34;&#39;</span>
}</code></pre></div>
<p>Example usage:</p>
<pre tabindex="0"><code class="language-terminal" data-lang="terminal">user@localhost $: tfmoe ./module_alb

Outputs:
	 alb_arn

Variables:
	 acm_certificate_arn
	 lb_name
	 alb_sg_list
	 subnets_id_list
	 tags
</code></pre><h2 id="function-pre-fill-module-directory-with-configuration-files">Function: pre-fill module directory with configuration files</h2>
<p>You need to provide a path to the module directory and this function will create a bunch of empty &lsquo;default&rsquo; .tf files in it.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#999;font-style:italic">#TerraForm MOdule Initialize</span>
<span style="color:#6ab825;font-weight:bold">function</span> tfmoi {
  touch <span style="color:#40ffff">$1</span>/variables.tf
  touch <span style="color:#40ffff">$1</span>/outputs.tf
  touch <span style="color:#40ffff">$1</span>/versions.tf
  touch <span style="color:#40ffff">$1</span>/main.tf
}
</code></pre></div><p>Example usage:</p>
<pre tabindex="0"><code class="language-terminal" data-lang="terminal">user@localhost $: mkdir ./module_foo &amp;&amp; temoi $_

user@localhost $: ls ./module_foo
main.tf      outputs.tf   variables.tf versions.tf
</code></pre><h2 id="aliases">Aliases</h2>
<p>The purpose of these aliases is just to keep you from typing long commands when you want to do a simple action.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#24909d">alias</span> <span style="color:#40ffff">tf</span>=<span style="color:#ed9d13">&#39;terraform&#39;</span>

<span style="color:#24909d">alias</span> <span style="color:#40ffff">tfv</span>=<span style="color:#ed9d13">&#39;terraform validate&#39;</span>

<span style="color:#24909d">alias</span> <span style="color:#40ffff">tfi</span>=<span style="color:#ed9d13">&#39;terraform init&#39;</span>

<span style="color:#24909d">alias</span> <span style="color:#40ffff">tfp</span>=<span style="color:#ed9d13">&#39;terraform plan&#39;</span> 
</code></pre></div><p>This one is useful because it makes format tool to go in-depth (recursively) through directories.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#24909d">alias</span> <span style="color:#40ffff">tfm</span>=<span style="color:#ed9d13">&#39;terraform fmt -recursive&#39;</span>
</code></pre></div><p>Example usage:</p>
<pre tabindex="0"><code class="language-terminal" data-lang="terminal">user@localhost $: tfm 
module_ecs_cluster/ecs.tf
module_alb/alb.tf
</code></pre>]]>
            </content>
        </item>
        
        <item>
            <title>Terraform explained in English</title>
            <link>https://serhii.vasylenko.info/2020/05/02/Terraform-explained-for-managers.html</link>
            <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
            <author>email-from-blog@vasylenko.info (Serhii Vasylenko)</author>
            <guid isPermaLink="false">8adc962bf9a5d4270dd8d68314326c77</guid>
            <description>For those who want to understand the engineering team better and speak with it in the same language — terraform explained.</description>
            <media:content url="https://serhii.vasylenko.info/2020/05/02/Terraform-explained-for-managers.htmlcover-image.png"/>
            <content>
                <![CDATA[<p>You might have heard about Terraform before, but if you have never tried it, this blog can help you to get the main point.</p>
<h2 id="a-few-words-about-infrastructure-as-code">A few words about “Infrastructure as Code&quot;</h2>
<p>First of all, Terraform is the way to manage the infrastructure in the form of code. The same way developers write the code to create applications, Terraform code can create the resources in virtual data centers (i.e., clouds).</p>
<p>Infrastructure as Code, or IaC, is when you describe and manage your infrastructure as… (guess what?) …code, literally.</p>
<p>In a nutshell, that means you can define all the elements (servers, networks, storage, etc.) and resources (memory, CPU, etc.) of your infrastructure in configuration files, and manage it in a way similar to how you handle the source code of the applications: branches, releases, and all that stuff.</p>
<p>And the main idea behind the IaC approach is that it manages the state of things and must remain the single source of truth (configuration truth) for your infrastructure.</p>
<p>First, you define the state via the code. Then IaC tool (Terraform, for example) applies this state to the infrastructure: all that is missing according to the code will be created, all that differs from the code will be changed, and all that exists in the infrastructure but is not described via code — will be destroyed.</p>
<h2 id="why-and-when-do-you-need-the-terraform-for-a-project">Why and when do you need the Terraform for a project?</h2>
<p>Terraform is a specific tool, hence like any other tool, it has its particular application area. There is no strict definition of project kind that needs Terraform (surprise!), but in general, you need to consider using Terraform if you answer ‘yes’ to one of the following questions:</p>
<ul>
<li>Do you have multiple logical elements of the same kind (in plural) in your infrastructure, i.e., several web servers, several application servers, several database servers?</li>
<li>Do you have numerous environments (or workspaces) where you run your applications, i.e., development, staging, QA, production?</li>
<li>Do you spend a significant amount of time managing the changes in the environment(s) where you run your applications?</li>
</ul>
<h2 id="how-does-it-work">How does it work?</h2>
<p>Terraform works with the source code of configuration and interprets the code into real objects inside on-premise or cloud platforms.</p>
<figure>
    <img loading="lazy" src="how-it-works-optimized.png"
         alt="How Terraform works" width="800"/> <figcaption>
            <p>How Terraform works in a nutshell</p>
        </figcaption>
</figure>

<p>Terraform supports many platforms: cloud providers such as AWS, Azure, GCP, DigitalOcean, and other platforms such as OVH, 1&amp;1, Hetzner, etc. It also supports infrastructure software such as Docker, Kubernetes, Chef, and even databases and monitoring software. That is why Terraform is so popular — it is an actual Swiss knife in the operations world.</p>
<p>So to create, change, or destroy the infrastructure, Terraform needs the source code.</p>
<p>The <strong>source code</strong> is a set of configuration files that defines your infrastructure state. The code uses its syntax, but it looks very user-friendly. Here is an example: the following configuration block describes the virtual server (EC2 instance) in AWS.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;web_server&#34;</span> {
  ami           = <span style="color:#ed9d13">&#34;ami-a1b2c3d4&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;t3.micro&#34;</span>
  }
</code></pre></div><p>Terraform can automatically detect the dependencies between resources described in the code and also allows you to add custom dependencies when needed.</p>
<p>When you apply the code the first time, Terraform creates a so-called “<strong>state file</strong>,&quot; which Terraform uses to map your code to resources created in the hosting platform. Terraform will use each subsequent “apply&quot; action to compare the code changes with the sate file to decide what should be done (and in what order) against real infrastructure.</p>
<p>One of the essential functions of the state file is the management of dependencies between the resources. For example (some technical nuances are omitted for simplicity): if you have a server created inside some network and you are going to change the network configuration in Terraform code, Terraform will know it should change that server configuration, or the server should be re-created inside the updated network.</p>
<h2 id="what-does-terraform-consist-of">What does Terraform consist of:</h2>
<p>Terraform configuration code consists of several elements: providers, resources, modules, input variables, output values, local values, expressions, functions.</p>
<h3 id="provider">Provider</h3>
<p><strong>Provider</strong> is an entity that defines what exactly is possible to do with the cloud or on-premises infrastructure platform you manage via Terraform.</p>
<p>It translates your code into proper API calls to the hosting provider, transforming your configuration into real object: servers, networks, databases, and so on.</p>
<h3 id="resource">Resource</h3>
<p><strong>Resource</strong> is the essential part of the configuration code. That is where the definition of infrastructure objects happens.</p>
<p>Resources are the main building blocks of the whole code. A resource can represent some object in the hosting provider (example: server) or the part of a compound object (example: attachable storage for a server)</p>
<p>Every resource has a type and local name. For example, here is how EC2 instance configuration may look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;web_server&#34;</span> {
  ami           = <span style="color:#ed9d13">&#34;ami-a1b2c3d4&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;t3.micro&#34;</span>
  }
</code></pre></div><p>The <code>aws_instance</code> is a resource type, and <code>web_server</code> is the local resource name. Later, when Terraform applies this code, it will create an EC2 instance with some particular ID in AWS.</p>
<p>Once created, Terraform will store the ID in the state file with mapping information that logically connects it with <code>web_server</code>.</p>
<p>The <code>ami</code>, <code>instance_type</code>, and <code>private_ip</code> are the arguments with values that define the actual state of the resource. However, there are many value types, depending on the particular argument and particular resource type, so I will not focus on them here.</p>
<h3 id="modules">Modules</h3>
<figure>
    <img loading="lazy" src="module-example.png"
         alt="Terraform module" width="800"/> <figcaption>
            <p>Terraform module</p>
        </figcaption>
</figure>

<p><strong>Modules</strong> is the kind of logical containers or groups for resources you define and use together. The purpose of modules is the grouping of resources and the possibility of reusing the same code with different variables.</p>
<p>Let’s get back to the example with the EC2 instance and say you need to have a static public IP address with it. In such a case, here is how the module for web server may look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;web_server&#34;</span> {
  ami           = <span style="color:#ed9d13">&#34;ami-a1b2c3d4&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;t3.micro&#34;</span>
  }
<span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_eip&#34; &#34;web_server_public_ip&#34;</span> {
  instance      = <span style="color:#ed9d13">&#34;${aws_instance.web_server.id}&#34;</span>
  }
</code></pre></div><p>Having these two resources together allows us to think of it as a stand-alone unit you can reuse later, for example, in our development, staging, and production environments. And not by copying and pasting it, but via reference to the module defined only once.</p>
<p>Please note: we specified an instance argument inside the <code>aws_eip</code> resource to reference another resource details (the ID of an instance). It is possible because of the way how Terraform treats dependencies. For example, when it detects the dependency (or you define it explicitly), Terraform creates the leading resource first. Only after the resource is created and available Terraform will create the dependent one.</p>
<p>The modules is a kind of standalone topic in Terraform. There is <a href="https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html">a separate article in my blog</a> that explains what modules are and how do they work.</p>
<h3 id="variables">Variables</h3>
<p><strong>Input variables</strong> work as parameters for the modules so module code could be reusable. Let’s look at the previous example: it has some hardcoded values — instance image ID and instance type. Here is how you can make it more abstract and reusable:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">variable</span> <span style="color:#ed9d13">&#34;image_id&#34;</span> {
  type          = <span style="color:#6ab825;font-weight:bold">string</span>
  }
<span style="color:#6ab825;font-weight:bold">variable</span> <span style="color:#ed9d13">&#34;instance_type&#34;</span> {
  type          = <span style="color:#6ab825;font-weight:bold">string</span>
  }
<span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;web_server&#34;</span> {
  ami           = <span style="color:#6ab825;font-weight:bold">var</span>.<span style="color:#6ab825;font-weight:bold">image_id</span>
  instance_type = <span style="color:#6ab825;font-weight:bold">var</span>.<span style="color:#6ab825;font-weight:bold">instance_type</span>
  }
</code></pre></div><p>Values for the variables then can be passed either via CLI and environment variables (if you have only the one, so-called root module) or via explicit values in the block where you call a module, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">module</span> <span style="color:#ed9d13">&#34;web_server_production&#34;</span> {
  source        = <span style="color:#ed9d13">&#34;./modules/web_server&#34;</span>
  image_id      = <span style="color:#ed9d13">&#34;ami-a1b2c3d4&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;m5.large&#34;</span>
  }
<span style="color:#6ab825;font-weight:bold">module</span> <span style="color:#ed9d13">&#34;web_server_development&#34;</span> {
  source        = <span style="color:#ed9d13">&#34;./modules/web_server&#34;</span>
  image_id      = <span style="color:#ed9d13">&#34;ami-a2b3c4d5&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;t3.micro&#34;</span>
 }
</code></pre></div><p><strong>Output values</strong> are similar to the &ldquo;return&rdquo; of a function in development language. You can use them for dependencies management (for example, when a module requires something from another module) and print specific values at the end of Terraform work (for example, to be used for notification in the CI/CD process).</p>
<p><strong>Local values</strong>, <strong>expressions</strong>, <strong>functions</strong> — three more things that augment the capabilities of Terraform and make it more similar to a programming language (which is excellent, by the way).</p>
<p>The local values are used inside modules for extended data manipulations.</p>
<p>The expressions are used to set the values (for many things), such as the value of some argument in resource configuration. For example, they used either to refer something (just as we referenced instance ID <code>&quot;${aws_instance.web_server.id}&quot;</code> in the example above) or to compute the value within your configuration.</p>
<p>The functions in Terraform are built-in jobs you can call to transform and combine values. For example, the <code>tolist()</code> function converts its argument to a list value.</p>
<h2 id="and-this-is-it">And this is it?</h2>
<figure>
    <img loading="lazy" src="done%20or.png"/> 
</figure>

<p>Yes, in short words — this is what Terraform is. Not rocket science if it&rsquo;s about to manage a small infrastructure, but it gets more complicated with bigger infrastructure. Like any other engineering tool, though.</p>
<h2 id="okay-what-next">Okay, what next?</h2>
<p>If you read down to this point, then it means it is worth &ldquo;get your hands dirty&rdquo; and to try building your Infrastructure with Terraform. There are plenty of courses and books (and the &ldquo;Terraform up and running&rdquo; is one of the most popular). Still, my learning path started from the following: <a href="https://learn.hashicorp.com/terraform">Official guide from Hashicorp</a> — comprehensive and free guide from Terraform developers. Just pick your favorite cloud (AWS, Azure, GCP) and go through the topics.</p>
<p>Another thing worth your attention is <a href="https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca">A Comprehensive Guide to Terraform</a>.</p>
<p>Once you finish this guide, I suggest jumping into the more real-world things and describing the infrastructure of the most common project you work with.</p>
<p>Your hands-on experience is the best way to learn Terraform!</p>
]]>
            </content>
        </item>
        
    </channel>
</rss>