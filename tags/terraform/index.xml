<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>terraform on Serhii Vasylenko</title>
    <link>https://serhii.vasylenko.info/tags/terraform/</link>
    <description>Recent content in terraform on Serhii Vasylenko</description>
    <image>
      <url>https://serhii.vasylenko.info/assets/img/website-logo-open-graph.jpeg</url>
      <link>https://serhii.vasylenko.info/assets/img/website-logo-open-graph.jpeg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Nov 2021 14:20:58 +0200</lastBuildDate><atom:link href="https://serhii.vasylenko.info/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apply Cloudfront Security Headers With Terraform</title>
      <link>https://serhii.vasylenko.info/2021/11/05/apply-cloudfront-security-headers-with-terraform/</link>
      <pubDate>Fri, 05 Nov 2021 14:20:58 +0200</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/11/05/apply-cloudfront-security-headers-with-terraform/</guid>
      <description>This blog explains how to use Response Headers Policy and Terraform to configure security headers for CloudFront Distribution</description>
      <content:encoded><![CDATA[<p>In November 2021, AWS announced Response Headers Policies — native support of response headers in CloudFront. You can read the full announcement here: <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/amazon-cloudfront-introduces-response-headers-policies/">Amazon CloudFront introduces Response Headers Policies</a></p>
<p>I said &ldquo;native&rdquo; because previously you could set response headers either using <a href="https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.html">CloudFront Functions</a> or <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/adding-http-security-headers-using-lambdaedge-and-amazon-cloudfront/">Lambda@Edge</a>.</p>
<p>And one of the common use cases for that was to set security headers. So now you don&rsquo;t need to add intermediate requests processing to modify the headers: CloudFront does that for you <strong>with no additional fee</strong>.</p>
<h2 id="manage-security-headers-as-code">Manage Security Headers as Code</h2>
<p>Starting from the <a href="https://github.com/hashicorp/terraform-provider-aws/blob/main/CHANGELOG.md#3640-november-04-2021">3.64.0</a> version of Terraform AWS provider, you can create the security headers policies and apply them for your distribution.</p>
<p>Let&rsquo;s see how that looks!</p>
<p>First, you need to describe the <code>aws_cloudfront_response_headers_policy</code> resource:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">31
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_cloudfront_response_headers_policy&#34; &#34;security_headers_policy&#34;</span> {
  name = <span style="color:#ed9d13">&#34;my-security-headers-policy&#34;</span>
  <span style="color:#6ab825;font-weight:bold">security_headers_config</span> {
    <span style="color:#6ab825;font-weight:bold">content_type_options</span> {
      override = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">frame_options</span> {
      frame_option = <span style="color:#ed9d13">&#34;DENY&#34;</span>
      override     = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">referrer_policy</span> {
      referrer_policy = <span style="color:#ed9d13">&#34;same-origin&#34;</span>
      override        = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">xss_protection</span> {
      mode_block = <span style="color:#6ab825;font-weight:bold">true</span>
      protection = <span style="color:#6ab825;font-weight:bold">true</span>
      override   = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">strict_transport_security</span> {
      access_control_max_age_sec = <span style="color:#ed9d13">&#34;63072000&#34;</span>
      include_subdomains         = <span style="color:#6ab825;font-weight:bold">true</span>
      preload                    = <span style="color:#6ab825;font-weight:bold">true</span>
      override                   = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">content_security_policy</span> {
      content_security_policy = <span style="color:#ed9d13">&#34;frame-ancestors &#39;none&#39;; default-src &#39;none&#39;; img-src &#39;self&#39;; script-src &#39;self&#39;; style-src &#39;self&#39;; object-src &#39;none&#39;&#34;</span>
      override                = <span style="color:#6ab825;font-weight:bold">true</span>
    }
  }
}
</code></pre></td></tr></table>
</div>
</div><p>List of security headers used:</p>
<ul>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-content-type-options">X-Content-Type-Options</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-frame-options">X-Frame-Options</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#referrer-policy">Referrer Policy</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-xss-protection">X-XSS-Protection</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#http-strict-transport-security">Strict Transport Security</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#content-security-policy">Content Security Policy</a></li>
</ul>
<p>The values for the security headers can be different, of course. However, the provided ones cover the majority of cases. And you can always get the up to date info about these headers and possible values here: <a href="https://infosec.mozilla.org/guidelines/web_security">Mozilla web Security Guidelines</a></p>
<p>Also, you could notice that provided example uses the <code>override</code> argument a lot. The <code>override</code> argument tells CloudFront to set these values for specified headers despite the values received from the origin. This way, you can enforce your security headers configuration.</p>
<p>Once you have the <code>aws_cloudfront_response_headers_policy</code> resource, you can refer to it in the code of <code>aws_cloudfront_distribution</code> resource inside cache behavior block (default or ordered). For example, in your <code>default_cache_behavior</code>:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_cloudfront_distribution&#34; &#34;test&#34;</span> {
  <span style="color:#6ab825;font-weight:bold">default_cache_behavior</span> {
    target_origin_id           = <span style="color:#6ab825;font-weight:bold">aws_s3_bucket</span>.<span style="color:#6ab825;font-weight:bold">my_origin</span>.<span style="color:#6ab825;font-weight:bold">id</span>
    allowed_methods            = [<span style="color:#ed9d13">&#34;GET&#34;, &#34;HEAD&#34;, &#34;OPTIONS&#34;</span>]
    cached_methods             = [<span style="color:#ed9d13">&#34;GET&#34;, &#34;HEAD&#34;</span>]
    viewer_protocol_policy     = <span style="color:#ed9d13">&#34;redirect-to-https&#34;</span><span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">    # some arguments skipped from listing for the sake of simplicity
</span><span style="color:#999;font-style:italic"></span>    
    response_headers_policy_id = <span style="color:#6ab825;font-weight:bold">aws_cloudfront_response_headers_policy</span>.<span style="color:#6ab825;font-weight:bold">security_headers_policy</span>.<span style="color:#6ab825;font-weight:bold">id</span>
    
  }<span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">  # some arguments skipped from listing for the sake of simplicity
</span><span style="color:#999;font-style:italic"></span>}
</code></pre></td></tr></table>
</div>
</div><h3 id="more-to-read">More to read:</h3>
<ul>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_response_headers_policy">Terraform Resource: Resource: aws_cloudfront_response_headers_policy</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/creating-response-headers-policies.html">Creating response headers policies - Amazon CloudFront</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html">Using the managed response headers policies - Amazon CloudFront</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-response-headers-policies.html">Understanding response headers policies - Amazon CloudFront</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Terraforming mac1.metal at AWS</title>
      <link>https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html</guid>
      <description>How to manage mac1.metal EC2 instances with Terraform</description>
      <content:encoded><![CDATA[<div class="updatenotice">
    Updated on the 23rd of October, 2021: Terraform AWS provider now <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_host">supports</a> Dedicated Hosts natively
</div>
<p>In November 2021, AWS <a href="https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/">announced</a> the support for Mac mini instances.</p>
<p>I believe this is huge, even despite the number of constraints this solution has. This offering opens the door to seamless macOS CI/CD integration into existing AWS infrastructure.</p>
<p>So here is a quick-start example of creating the dedicated host and the instance altogether using Terraform.</p>
<p>I intentionally used some hardcoded values for the sake of simplicity in the example.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">28
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_ec2_host&#34; &#34;example_host&#34;</span> {
  instance_type     = <span style="color:#ed9d13">&#34;mac1.metal&#34;</span>
  availability_zone = <span style="color:#ed9d13">&#34;us-east-1a&#34;</span>
}

<span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;example_instance&#34;</span> {
  ami           = <span style="color:#6ab825;font-weight:bold">data</span>.<span style="color:#6ab825;font-weight:bold">aws_ami</span>.<span style="color:#6ab825;font-weight:bold">mac1metal</span>.<span style="color:#6ab825;font-weight:bold">id</span>
  host_id       = <span style="color:#6ab825;font-weight:bold">aws_ec2_host</span>.<span style="color:#6ab825;font-weight:bold">example_host</span>.<span style="color:#6ab825;font-weight:bold">id</span>
  instance_type = <span style="color:#ed9d13">&#34;mac1.metal&#34;</span>
  subnet_id     = <span style="color:#6ab825;font-weight:bold">data</span>.<span style="color:#6ab825;font-weight:bold">aws_subnet</span>.<span style="color:#6ab825;font-weight:bold">example_subnet</span>.<span style="color:#6ab825;font-weight:bold">id</span>
}

<span style="color:#6ab825;font-weight:bold">data</span> <span style="color:#ed9d13">&#34;aws_subnet&#34; &#34;example_subnet&#34;</span> {
  availability_zone = <span style="color:#ed9d13">&#34;us-east-1a&#34;</span>
  <span style="color:#6ab825;font-weight:bold">filter</span> {
    name   = <span style="color:#ed9d13">&#34;tag:Tier&#34;</span><span style="color:#999;font-style:italic"> # you should omit this filter if you don&#39;t distinguish your subnets on private and public 
</span><span style="color:#999;font-style:italic"></span>    values = [<span style="color:#ed9d13">&#34;private&#34;</span>]
  }
}

<span style="color:#6ab825;font-weight:bold">data</span> <span style="color:#ed9d13">&#34;aws_ami&#34; &#34;mac1metal&#34;</span> {
  owners      = [<span style="color:#ed9d13">&#34;amazon&#34;</span>]
  most_recent = <span style="color:#6ab825;font-weight:bold">true</span>
  <span style="color:#6ab825;font-weight:bold">filter</span> {
    name   = <span style="color:#ed9d13">&#34;name&#34;</span>
    values = [<span style="color:#ed9d13">&#34;amzn-ec2-macos-11*&#34;</span>]<span style="color:#999;font-style:italic"> # get latest BigSur AMI
</span><span style="color:#999;font-style:italic"></span>  }
}
</code></pre></td></tr></table>
</div>
</div><p>Simple as that, yes. Now, you can integrate it into your CI system and have the Mac instance with the underlying host in a bundle.</p>
<p>💡 Pro tip: you can leverage the <code>aws_ec2_instance_type_offerings</code> <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ec2_instance_type_offerings">Data Source</a> and use its output with <code>aws_subnet</code> source to avoid availability zone hardcoding.</p>
<p>To make the code more uniform and reusable, you can wrap it into a <a href="https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html">Terraform module</a> that accepts specific parameters (such as <code>instance_type</code> or <code>availability_zone</code>) as input variables.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Terraform Workflow — Working Individually and in a Team</title>
      <link>https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.html</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.html</guid>
      <description>An overview of best practices for working with Terraform individually or in a team</description>
      <content:encoded><![CDATA[<p>The work with Terraform code may become tangled sometimes. Here are some guides on how to streamline it and make it transparent for you and your team.</p>
<p>It is extremely helpful in a team, and can benefit you even if you work individually. A good workflow enables you to streamline a process, organize it, and make it less error-prone.</p>
<p>This article summaries several approaches when working with Terraform, both individually and in a team. I tried to gather the most common ones, but you might also want to develop your own.</p>
<p>The common requirement for all of them is a version control system (such as Git). This is how you ensure nothing is lost and all your code changes are properly versioned tracked.</p>
<p>Table of contents:</p>
<ul>
<li><a href="#basic-concepts">Basic Concepts</a></li>
<li><a href="#core-individual-workflow">Core individual workflow</a></li>
<li><a href="#core-team-workflow">Core team workflow</a></li>
<li><a href="#team-workflow-with-automation">Team workflow with automation</a></li>
<li><a href="#import-workflow">Import workflow</a></li>
</ul>
<h1 id="basic-concepts">Basic Concepts</h1>
<p>Let’s define the basic actions first.</p>
<p>All described workflows are built on top of three key steps: Write, Plan, and Apply. Nevertheless, their details and actions vary between workflows.</p>
<p><img loading="lazy" src="tf-workflow.png" alt=""  />

<em>It&rsquo;s a piece of cake, isn&rsquo;t it? 😆</em></p>
<p><strong>Write</strong> – this is where you make changes to the code.</p>
<p><strong>Plan</strong> – this is where you review changes and decide whether to accept them.</p>
<p><strong>Apply</strong> – this is where you accept changes and apply them against real infrastructure.</p>
<p>It&rsquo;s a simple idea with a variety of possible implementations.</p>
<h1 id="core-individual-workflow">Core individual workflow</h1>
<p>This is the most simple workflow if you work alone on a relatively small TF project. This workflow suits both local and remote backends well.</p>
<p><img loading="lazy" src="tf-workflow-individual.png" alt=""  />

<em>Let&rsquo;s add a bit of Git</em></p>
<h3 id="write">Write</h3>
<p>You clone the remote code repo or pull the latest changes, edit the configuration code, then run the <code>terraform validate</code> and <code>terraform fmt</code> commands to make sure your code works well.</p>
<h3 id="plan">Plan</h3>
<p>This is where you run the <code>terraform plan</code> command to make sure that your changes do what you need. This is a good time to commit your code changes changes (or you can do it in the next step).</p>
<h3 id="apply">Apply</h3>
<p>This is when you run <code>terraform apply</code> and introduce the changes to real infrastructure objects. Also, this is when you push committed changes to the remote repository.</p>
<h1 id="core-team-workflow">Core team workflow</h1>
<p>This workflow is good for when you work with configuration code in a team and want to use feature branches to manage the changes accurately.</p>
<p><img loading="lazy" src="tf-core-workflow-team.png" alt=""  />

<em>Don&rsquo;t get scared, it is still simple, just follow the lines</em></p>
<h3 id="write-1">Write</h3>
<p>Start by checking out a new branch, make your changes, and run the <code>terraform validate</code> and <code>terraform fmt</code> commands to make sure your code works well.</p>
<p>Running <code>terraform plan</code> at this step will help ensure that you&rsquo;ll get what you expect.</p>
<h3 id="plan-1">Plan</h3>
<p>This is where code and plan reviews happen.</p>
<p>Add the output of the <code>terraform plan</code> command to the Pull Request with your changes. It would be a good idea to add only the changed parts of the common output, which is the part that starts with &ldquo;Terraform will perform the following actions&rdquo; string.</p>
<h3 id="apply-1">Apply</h3>
<p>Once the PR is reviewed and merged to the upstream branch, it is safe to finally pull the upstream branch locally and apply the configuration with <code>terraform apply</code>.</p>
<h1 id="team-workflow-with-automation">Team workflow with automation</h1>
<p>In a nutshell, this workflow allows you to introduce a kind of smoke test for your infrastructure code (using <code>plan</code>) and also to automate the feedback in the CI process.</p>
<p>The automated part of this workflow consists of a speculative plan on commit and/or Pull Request (PR ), along with adding the output of <code>plan</code> to the comment of the PR. A speculative plan mean just to show the changes, and not apply them afterward.</p>
<p><img loading="lazy" src="tf-workflow-team-automation-1.png" alt=""  />

<em>I like when TF plan output is included to PR, but nobody likes to read others TF plans for some reason&hellip;</em></p>
<h3 id="write-2">Write</h3>
<p>This step is the same as in the previous workflow.</p>
<h3 id="plan-2">Plan</h3>
<p>This is where your CI tool does its job.</p>
<p>Let’s review this step by step:</p>
<ol>
<li>You create a PR with the code changes you wish to implement.</li>
<li>The CI pipeline is triggered by an event from your code repository (such as webhook push) and it runs a speculative plan against your code.</li>
<li>The list of changes (a so-called &ldquo;plan diff&rdquo;) is added to PR for review by the CI.</li>
<li>Once merged, the CI pipeline runs again and you get the final plan that&rsquo;s ready to be applied to the infrastructure.</li>
</ol>
<h3 id="apply-2">Apply</h3>
<p>Now that you have a branch (i.e. main) with the fresh code to apply, you need to pull it locally and run <code>terraform apply</code>.</p>
<p>You can also add the automated apply here – step 5 in the picture below. This may be very useful for disposable environments such as testing, staging, development, and so on.</p>
<p>The exact CI tool to be used here is up to you: Jenkins, GitHub Actions, and Travis CI all work well.</p>
<p>An important thing to note is that the CI pipeline must be configured in a bi-directional way with your repository to get the code from it and report back with comments to PR.</p>
<p>As an option, you may consider using Terraform Cloud which has a lot of functionality, including the above mentioned repo integration, even with the free subscription.</p>
<p>If you have never worked with Terraform Cloud before and want to advice to get started, I&rsquo;ll provide the links at the end of this article.</p>
<h1 id="import-workflow">Import workflow</h1>
<p>This workflow refers to a situation when you have some objects already created (i.e., up and running), and you need to manage them with Terraform.</p>
<p>Suppose we already have an S3 bucket in AWS called &ldquo;someassetsbucket&rdquo; and we want to include it into our configuration code.‌‌</p>
<p><img loading="lazy" src="tf-workflow-import.png" alt=""  />
</p>
<h3 id="prepare">Prepare</h3>
<p>You should create a resource block to be used later for the real object you’re going to import.</p>
<p>You don’t need to fill the arguments in it at the start, so it may be just a blank resource block, for example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">resource &#34;aws_s3_bucket&#34; &#34;someassetsbucket&#34; {
‌‌
}
</code></pre></td></tr></table>
</div>
</div><h3 id="import">Import</h3>
<p>Now you need to import the information about the real object into your existing Terraform state file.</p>
<p>This can be done with the <code>terraform import</code> command, for example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">terraform import aws_s3_bucket.assets &#34;someassetsbucket&#34;
</code></pre></td></tr></table>
</div>
</div><p>‌Be sure to also check the list of possible options import accepts with <code>terraform import -h</code></p>
<h3 id="write-3">Write</h3>
<p>Now you need to write the corresponding Terraform code for this bucket.</p>
<p>To avoid modifying your real object on the <code>terraform apply</code> action, you should specify all needed arguments with the exact values from the import phase.</p>
<p>You can see the details by running the <code>terraform state show</code> command, for example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">terraform state show aws_s3_bucket.assets
</code></pre></td></tr></table>
</div>
</div><p>The output of this command will be very similar to the configuration code. But it contains both arguments and attributes of the resource, so you need to clean it up before applying it.</p>
<p>You can use one of the following tactics:</p>
<ul>
<li>either copy/paste it, and then run <code>terraform validate</code> and <code>terraform plan</code> several times to make sure there are no errors like &ldquo;argument is not expected here&rdquo; or &ldquo;this field cannot be set&rdquo;</li>
<li>or you can pick and write only the necessary arguments</li>
</ul>
<p>In any case, be sure to refer to the documentation of the resource during this process.</p>
<h3 id="plan-3">Plan</h3>
<p>The goal is to have a <code>terraform plan</code> output showing &ldquo;~ update in-place&rdquo; changes only.</p>
<p>However, it is not always clear whether the real object will be modified or only the state file will be updated. This is why you should understand how a real object works and know its life cycle to make sure it is safe to apply the plan.</p>
<h3 id="apply-3">Apply</h3>
<p>This is usual the <code>terraform apply</code> action.</p>
<p>Once applied, your configuration and state file will correspond to the real object configuration.</p>
<h1 id="wrapping-up">Wrapping up</h1>
<p>Here is an overview of Terraform Cloud for those who never worked with it before: <a href="https://www.terraform.io/docs/cloud/overview.html">‌‌Overview of Terraform Cloud Features</a></p>
<p>And here is a nice tutorial to start with: <a href="https://learn.hashicorp.com/collections/terraform/cloud-get-started">Get Started - Terraform Cloud</a></p>
<p>Also, here is an overview of workflows at scale from the HashiCorp CTO which might be useful for more experienced Terraform users: <a href="https://www.hashicorp.com/resources/terraform-workflow-best-practices-at-scale">Terraform Workflow Best Practices at Scale</a></p>
<p>Thank you for reading. I hope you will try one of these workflows, or develop your own!‌‌</p>
<hr>
<h6 id="this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers">This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.</h6>
]]></content:encoded>
    </item>
    
    <item>
      <title>Terraform Certification Tips</title>
      <link>https://serhii.vasylenko.info/2020/09/15/terraform-certification-tips.html</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/09/15/terraform-certification-tips.html</guid>
      <description>Summary of a learning path to HashiCorp Certified — Terraform Associate</description>
      <content:encoded><![CDATA[<p>I successfully passed the &ldquo;HashiCorp Certified — Terraform Associate&rdquo; exam last Friday and decided to share some advice for exam preparation.</p>
<h2 id="make-yourself-a-plan">Make yourself a plan</h2>
<p>Make a list of things you are going to go through: links to the study materials, practice tasks, some labs, some articles on relative blogs (Medium, Dev.to, etc.).
It should look at a &ldquo;todo&rdquo; or &ldquo;check&rdquo;-list. It may seem silly at first glance, but the list with checkboxes does its &ldquo;cognitive magic&rdquo;. When you go point by point, marking items as &ldquo;done&rdquo;, you feel the progress and this motivates you to keep going further.
For example, you can make a plan from the resources I outlined below in this article.</p>
<p>I encourage you to explore the Internet for something by yourself as well. Who knows, perhaps you will find some learning course that fits you better. And that is great! However, when you find it, take extra 5-10 minutes to go through its curriculum and create a list with lessons.</p>
<p>It feels so nice to cross out items off the todo list, believe me 😄
<img loading="lazy" src="todo-list.jpg" alt=""  />
</p>
<h2 id="go-through-the-official-study-guide">Go through the official Study Guide</h2>
<p>Despite your findings on the Internet, I strongly suggest going through the official study guide</p>
<p><a href="https://learn.hashicorp.com/tutorials/terraform/associate-study">Study Guide - Terraform Associate Certification</a></p>
<p>It took me about 20 hours to complete it (including practice tasks based on topics in the guide), and it was the core of my studying. I did not buy or search for some third-party course intentionally because I did have some Terraform experience before starting the preparation. But give the official guide a chance even if you found some course. It is well-made and matches real exam questions very precisely.</p>
<p>Also, there is an official <a href="https://learn.hashicorp.com/tutorials/terraform/associate-review">Exam Review</a>. Someone might find this even better because it is a direct mapping of each exam objective to HashiCorp&rsquo;s documentation and training.</p>
<h2 id="take-additional-tutorials">Take additional tutorials</h2>
<p>Here is a list of additional tutorials and materials I suggest adding into your learning program:</p>
<h4 id="official-guides--documentation">Official guides / documentation:</h4>
<ul>
<li><a href="https://learn.hashicorp.com/collections/terraform/automation">Automate Terraform</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/cloud">Collaborate using Terraform Cloud</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/0-13">Terraform tutorials</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/modules">Reuse Configuration with Modules</a></li>
<li><a href="https://www.hashicorp.com/resources/a-practitioner-s-guide-to-using-hashicorp-terraform-cloud-with-github">A Practitioner’s Guide to Using HashiCorp Terraform Cloud with GitHub</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/policy">Enforce Policy with Sentinel</a></li>
</ul>
<h4 id="third-party-articles-and-guides">Third-party articles and guides:</h4>
<ul>
<li><a href="https://prefetch.net/blog/2020/04/27/using-the-terraform-console-to-debug-interpolation-syntax/">Using the terraform console to debug interpolation syntax</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL5VXZTK6spA2HF5Kf0rI9RDRHF9Hopffr">YouTube playlist with exam-like questions review</a></li>
</ul>
<h2 id="find-yourself-some-practice">Find yourself some practice</h2>
<h4 id="mockup-a-project">Mockup a project</h4>
<p>You can greatly improve your practice by mocking some real business cases.</p>
<p>If you already work in some company you can set up the project you&rsquo;re working with using Terraform. If you don’t have a real project or afraid to accidentally violate NDA, try this open-source demo project: <a href="https://github.com/gothinkster/realworld">Real World Example Apps</a>.</p>
<p>It is a collection of different codebases for front-end and back-end used to build the same project. Just find the combination that suits your experience better and try to build the infrastructure for it using Terraform.</p>
<p><img loading="lazy" src="real-world-demo.jpg" alt=""  />
</p>
<h4 id="answer-forum-topics">Answer forum topics</h4>
<p>Last but not least advice — try to answer some questions on the official <a href="https://discuss.hashicorp.com/c/terraform-core/">Terraform forum</a>.</p>
<p>This is a nice way to test your knowledge, help others, and develop the community around Terraform. Just register there, look for the latest topics, and have fun!</p>
<p><img loading="lazy" src="tf-forum.jpg" alt=""  />
</p>
<h4 id="-i-sincerely-wish-you-exciting-preparation-and-a-successful-exam-">🍀 I sincerely wish you exciting preparation and a successful exam! 🍀</h4>
]]></content:encoded>
    </item>
    
    <item>
      <title>What are Terraform Modules and how do they work?</title>
      <link>https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html</guid>
      <description>Explanation of Terraform modules and their main concepts in English.</description>
      <content:encoded><![CDATA[<p>Surprisingly, a lot of beginners skip over Terraform modules for the sake of simplicity, or so they think. Later, they find themselves going through hundreds of lines of configuration code.</p>
<p>I assume you already know some basics about Terraform or even tried to use it in some way before reading the article.</p>
<p>Please note: I do not use real code examples with some specific provider like AWS or Google intentionally, just for the sake of simplicity.</p>
<h2 id="terraform-modules">Terraform modules</h2>
<p>You already write modules even if you think you don’t.</p>
<p>Even when you don&rsquo;t create a module intentionally, if you use Terraform, you are already writing a module – a so-called &ldquo;root&rdquo; module.</p>
<p>Any number of Terraform configuration files <code>(.tf)</code> in a directory (even one) forms a module.</p>
<h3 id="what-does-the-module-do">What does the module do?</h3>
<p>A Terraform module allows you to create logical abstraction on the top of some resource set. In other words, a module allows you to group resources together and reuse this group later, possibly many times.</p>
<p>Let&rsquo;s assume we have a virtual server with some features hosted in the cloud. What set of resources might describe that server? For example:
– the virtual machine itself (created from some image)
– an attached block device of specified size (for additional storage)
– a static public IP mapped to the server&rsquo;s virtual network interface
– a set of firewall rules to be attached to the server
– something else&hellip; (i.e. another block device, additional network interface, etc)</p>
<p><img loading="lazy" src="1.png" alt=""  />
</p>
<p>Now let&rsquo;s assume that you need to create this server with a set of resources many times. This is where modules are really helpful – you don&rsquo;t want to repeat the same configuration code over and over again, do you?</p>
<p>Here is an example that illustrates how our &ldquo;server&rdquo; module might be called.
&ldquo;To call a module&rdquo; means to use it in the configuration file.</p>
<p>Here we create 5 instances of the &ldquo;server&rdquo; using single set of configurations (in the module):</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module &#34;server&#34; {
    
    count         = 5
    
    source        = &#34;./module_server&#34;
    some_variable = some_value
}
</code></pre></td></tr></table>
</div>
</div><h3 id="modules-organisation-child-and-root">Modules organisation: child and root</h3>
<p>Of course, you would probably want to create more than one module. Here are some common examples:</p>
<ul>
<li>for a network (i.e. VPC)</li>
<li>for a static content hosting (i.e. buckets)</li>
<li>for a load balancer and it&rsquo;s related resources</li>
<li>for a logging configuration</li>
<li>and whatever else you consider a distinct logical component of the infrastructure</li>
</ul>
<p>Let&rsquo;s say we have two different modules: a &ldquo;server&rdquo; module and a &ldquo;network&rdquo; module. The module called &ldquo;network&rdquo; is where we define and configure our virtual network and place servers in it:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module &#34;server&#34; {
    source        = &#34;./module_server&#34;
    some_variable = some_value
}

module &#34;network&#34; {  
    source              = &#34;./module_network&#34;
    some_other_variable = some_other_value
}
</code></pre></td></tr></table>
</div>
</div><p>Once we have some custom modules, we can refer to them as &ldquo;child&rdquo; modules. And the configuration file where we call child modules relates to the root module.</p>
<p><img loading="lazy" src="2.png" alt=""  />
</p>
<p>A child module can be sourced from a number of places:</p>
<ul>
<li>local paths</li>
<li>official Terraform Registry (if you&rsquo;re familiar with other registries, i.e. Docker Registry then you already understand the idea)</li>
<li>Git repository (a custom one or GitHub/BitBucket)</li>
<li>HTTP URL to .zip archive with module</li>
</ul>
<p>But how can you pass resources details between modules?</p>
<p>In our example, the servers should be created in a network. So how can we tell the &ldquo;server&rdquo; module to create VMs in a network which was created in a module called &ldquo;network&rdquo;?</p>
<p>This is where <strong>encapsulation</strong> comes in.</p>
<h2 id="module-encapsulation">Module encapsulation</h2>
<p>Encapsulation in Terraform consists of two basic concepts: module scope and explicit resources exposure.</p>
<h3 id="module-scope">Module Scope</h3>
<p>All resource instances, names, and therefore, resource visibility, are isolated in a module&rsquo;s scope. For example, module &ldquo;A&rdquo; can&rsquo;t see and does not know about resources in module &ldquo;B&rdquo; by default.</p>
<p>Resource visibility, sometimes called resource isolation, ensures that resources will have unique names within a module&rsquo;s namespace. For example, with our 5 instances of the &ldquo;server&rdquo; module:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module.server[0].resource_type.resource_name
module.server[1].resource_type.resource_name
module.server[2].resource_type.resource_name
</code></pre></td></tr></table>
</div>
</div><p>On the other hand, we could create two instances of the same module with different names:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module &#34;server-alpha&#34; {    
    source        = &#34;./module_server&#34;
    some_variable = some_value
}
module &#34;server-beta&#34; {
    source        = &#34;./module_server&#34;
    some_variable = some_value
}
</code></pre></td></tr></table>
</div>
</div><p>In this case, the naming or address of resources would be as follows:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module.server-alpha.resource_type.resource_name

module.server-beta.resource_type.resource_name
</code></pre></td></tr></table>
</div>
</div><h3 id="explicit-resources-exposure">Explicit resources exposure</h3>
<p>If you want to access some details for the resources in another module, you&rsquo;ll need to explicitly configure that.</p>
<p>By default, our module &ldquo;server&rdquo; doesn&rsquo;t know about the network that was created in the &ldquo;network&rdquo; module.</p>
<p><img loading="lazy" src="3.png" alt=""  />
</p>
<p>So we must declare an <code>output</code> value in the &ldquo;network&rdquo; module to export its resource, or an attribute of a resource, to other modules.</p>
<p>The module &ldquo;server&rdquo; must declare a <code>variable</code> to be used later as the input.</p>
<p><img loading="lazy" src="4.png" alt=""  />
</p>
<p>This explicit declaration of the output is the way to expose some resource (or information about it) outside — to the scope of the &lsquo;root&rsquo; module, hence to make it available for other modules.</p>
<p>Next, when we call the child module &ldquo;server&rdquo;  in the root module, we should assign the output from the &ldquo;network&rdquo; module to the variable of the &ldquo;server&rdquo; module:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">network_id = module.network.network_id
</code></pre></td></tr></table>
</div>
</div><p>Here is how the final code for calling our child modules will look like in result:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module &#34;server&#34; {
    count         = 5
    source        = &#34;./module_server&#34;
    some_variable = some_value
    network_id    = module.network.network_id
}

module &#34;network&#34; {  
    source              = &#34;./module_network&#34;
    some_other_variable = some_other_value
}
</code></pre></td></tr></table>
</div>
</div><p>This example configuration would create 5 instances of the same server, with all the necessary resources, in the network we created with as a separate module.</p>
<h3 id="wrap-up">Wrap up</h3>
<p>Now you should understand what modules are and what do they do.</p>
<p>If you&rsquo;re at the beginning of your Terraform journey, here are some suggestions for the next steps.</p>
<p>I encourage you to take this short tutorial from HashiCorp, the creators of Terraform, about modules:  <a href="https://learn.hashicorp.com/collections/terraform/modules">&ldquo;Organize Configuration&rdquo;</a></p>
<p>Also, there is a great comprehensive study guide which covers everything from beginner to advanced concepts about Terraform: <a href="https://learn.hashicorp.com/tutorials/terraform/associate-study?in=terraform/certification">&ldquo;Study Guide - Terraform Associate Certification&rdquo;</a></p>
<p>The modular code structure makes your configuration more flexible and yet easy to be understood by others. The latter is especially useful in teamwork.</p>
<hr>
<h6 id="this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers">This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.</h6>
]]></content:encoded>
    </item>
    
    <item>
      <title>Terraform CLI shortcuts</title>
      <link>https://serhii.vasylenko.info/2020/08/25/terraform-cli-shortcuts.html</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/08/25/terraform-cli-shortcuts.html</guid>
      <description>A bunch of small tools I use to simplify Terraform workflow</description>
      <content:encoded><![CDATA[<p>Here is some CLI shortcuts I use day-to-day to simplify and speed-up my Terraform workflow.
Requirements &mdash; bash-compatible interpreter, because aliases and functions described below will work with bash, zsh and ohmyzsh.</p>
<p>In order to use any of described aliases of functions, you need to place it in your <code>~/.bashrc</code> or <code>~/.zshrc</code> file (or any other configuration file you have for your shell).</p>
<p>Then just source this file, for example: <code>source ~/.zshrc</code></p>
<h2 id="function-list-outputs-and-variables-of-given-module">Function: list outputs and variables of given module</h2>
<p>You need to provide the path to module directory, and this function will list all declared variables and outputs module has. It comes very useful when you don&rsquo;t remember them all and just need to take a quick look.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#999;font-style:italic">## TerraForm MOdule Explained</span>
<span style="color:#6ab825;font-weight:bold">function</span> tfmoe {
  <span style="color:#24909d">echo</span> -e <span style="color:#ed9d13">&#34;\nOutputs:&#34;</span>
  grep -r <span style="color:#ed9d13">&#34;output \&#34;.*\&#34;&#34;</span> <span style="color:#40ffff">$1</span> |awk <span style="color:#ed9d13">&#39;{print &#34;\t&#34;,$2}&#39;</span> |tr -d <span style="color:#ed9d13">&#39;&#34;&#39;</span>
  <span style="color:#24909d">echo</span> -e <span style="color:#ed9d13">&#34;\nVariables:&#34;</span>
  grep -r <span style="color:#ed9d13">&#34;variable \&#34;.*\&#34;&#34;</span> <span style="color:#40ffff">$1</span> |awk <span style="color:#ed9d13">&#39;{print &#34;\t&#34;,$2}&#39;</span> |tr -d <span style="color:#ed9d13">&#39;&#34;&#39;</span>
}</code></pre></td></tr></table>
</div>
</div>
<p>Example usage:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">user@localhost $: tfmoe ./module_alb

Outputs:
	 alb_arn

Variables:
	 acm_certificate_arn
	 lb_name
	 alb_sg_list
	 subnets_id_list
	 tags
</code></pre></td></tr></table>
</div>
</div><h2 id="function-pre-fill-module-directory-with-configuration-files">Function: pre-fill module directory with configuration files</h2>
<p>You need to provide a path to the module directory and this function will create a bunch of empty &lsquo;default&rsquo; .tf files in it.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#999;font-style:italic">#TerraForm MOdule Initialize</span>
<span style="color:#6ab825;font-weight:bold">function</span> tfmoi {
  touch <span style="color:#40ffff">$1</span>/variables.tf
  touch <span style="color:#40ffff">$1</span>/outputs.tf
  touch <span style="color:#40ffff">$1</span>/versions.tf
  touch <span style="color:#40ffff">$1</span>/main.tf
}
</code></pre></td></tr></table>
</div>
</div><p>Example usage:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">user@localhost $: mkdir ./module_foo &amp;&amp; temoi $_

user@localhost $: ls ./module_foo
main.tf      outputs.tf   variables.tf versions.tf
</code></pre></td></tr></table>
</div>
</div><h2 id="aliases">Aliases</h2>
<p>The purpose of these aliases is just to keep you from typing long commands when you want to do a simple action.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#24909d">alias</span> <span style="color:#40ffff">tf</span>=<span style="color:#ed9d13">&#39;terraform&#39;</span>

<span style="color:#24909d">alias</span> <span style="color:#40ffff">tfv</span>=<span style="color:#ed9d13">&#39;terraform validate&#39;</span>

<span style="color:#24909d">alias</span> <span style="color:#40ffff">tfi</span>=<span style="color:#ed9d13">&#39;terraform init&#39;</span>

<span style="color:#24909d">alias</span> <span style="color:#40ffff">tfp</span>=<span style="color:#ed9d13">&#39;terraform plan&#39;</span> 
</code></pre></td></tr></table>
</div>
</div><p>This one is useful because it makes format tool to go in-depth (recursively) through directories.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#24909d">alias</span> <span style="color:#40ffff">tfm</span>=<span style="color:#ed9d13">&#39;terraform fmt -recursive&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>Example usage:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">user@localhost $: tfm 
module_ecs_cluster/ecs.tf
module_alb/alb.tf
</code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Terraform explained for managers</title>
      <link>https://serhii.vasylenko.info/2020/05/02/Terraform-explained-for-managers.html</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/05/02/Terraform-explained-for-managers.html</guid>
      <description>For those who want to understand the engineering team better and speak on the same technical language - terraform explained.</description>
      <content:encoded><![CDATA[<h2 id="this-article-was-written-a-long-time-ago-in-a-galaxy-far-far-away">This article was written a long time ago in a galaxy far, far away&hellip;</h2>
<p>As a team leader, I have to speak with my teammates on the same language — technical language&hellip;</p>
<p>For example, I have a good technical background, yet sometimes I have a feeling that my teammates see that I don’t understand them when we discuss some project or a task in-depth. Moreover, I know they are right. Of course, there are plenty of managers who do not have a technical background and they perform great. And some might say that technical skills are not the priority for a manager.</p>
<p>But I think that +1 to skills is always better than +0. Of course, it is a question of time and personal interests, one way or another.</p>
<p>This is why I decided to share my experience and explain Terraform in one blog post.</p>
<p>The language of this article will be ‘techie’ but not too much. This is because I want to highlight the main parts the Terraform consists of. Although, this is not technical documentation (I hope). Code examples will be based on AWS cloud configuration, although in-depth knowledge of AWS is not required to understand them.</p>
<h3 id="a-few-words-about-infrastructure-as-code">A few words about “Infrastructure as Code”</h3>
<p>IaC is when you describe and manage your infrastructure as… (guess what?) …code. Literally.</p>
<p>In a nutshell that means you can define all the elements (servers, networks, storage, etc.) and resources (memory, cpu, etc) of your infrastructure via configuration files in the version control system (Git, SVN, etc.), and manage it in a way similar to how you manage the source code of the applications: branches, releases, and all that stuff.</p>
<p>And the main idea behind the IaC approach is that it manages the state of things and must be the single source of truth (configuration truth) for your infrastructure. You define the state via the code (at first) and then IaC tool (Terraform, for example) applies this state on the infrastructure: all that is missing according to the code will be created, all that differs from the code will be changed and all that exists in the infrastructure but is not described via code — will be destroyed.</p>
<h3 id="why-and-when-do-you-need-the-terraform-for-a-project">Why and when do you need the Terraform for a project?</h3>
<p>Terraform is a specific tool, hence like any other tool it has its particular application area. There is no strict definition of project kind that needs Terraform (surprise!) but in general, you need to consider using Terraform if you answer ‘yes’ to one of the following questions:</p>
<ul>
<li>Do you have multiple logical elements of the same kind (in plural) in your infrastructure, i.e. several web servers, several application servers, several database servers?</li>
<li>Do you have numerous environments (or workspaces) where you run your applications, i.e. development, staging, QA, production?</li>
<li>Do you spend some significant amount of time managing the changes in the environment(s) where you run your applications?</li>
</ul>
<h3 id="how-does-it-work">How does it work?</h3>
<p>Terraform works with the source code of configuration, and interprets the code into real resources inside on-premise or cloud platforms.</p>
<p>Terraform supports a lot of platforms: from major cloud providers such as AWS, Azure, GCP, DigitalOcean, to more modest platforms such as OVH, 1&amp;1, Hetzner, and others. It also supports infrastructure software such as Docker, Kubernetes, Chef, and even databases and monitoring software. This is why Terraform is so popular — it is a real Swiss knife in the operations world.</p>
<p>So to create, change, or destroy the infrastructure Terraform needs the source code. The <strong>source code</strong> is a set of configuration files that defines your infrastructure state. The code uses its own syntax but it looks very user friendly. Here is an example: the following configuration block describes the virtual server (EC2 instance) in AWS</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">resource &#34;aws_instance&#34; “web_server” {<span style="color:#666">
</span><span style="color:#666">  </span>ami           = &#34;ami-a1b2c3d4&#34;<span style="color:#666">
</span><span style="color:#666">  </span>instance_type = &#34;t3.micro&#34;<span style="color:#666">
</span><span style="color:#666">  </span>}<span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>Terraform can automatically detect the dependencies between resources described in the code, and also allows you to add custom dependencies when needed.</p>
<p>When you apply the code first time, Terraform creates a so-called “<strong>state file</strong>” that works as a mapping of your code to real resources created in the hosting platform. With each next “apply” action Terraform will use it to compare the code changes with the sate file to decide what should be done (and in what order) against real infrastructure.</p>
<p>One of the important functions of the state file is a description of dependencies between the resources. For example (some technical nuances are omitted for purpose of simplicity): if you have a server created inside some network and that network is going to be changed, then Terraform will know that server setting should be changed as well or server should be re-created inside the updated network.</p>
<h3 id="what-is-inside">What is inside?</h3>
<p>Terraform configuration code consists of several elements: providers, resources, modules, input variables, output values, local values, expressions, functions.</p>
<p><strong>Provider</strong> is an entity that defines what exactly is possible to do with cloud or on-premises infrastructure platform you manage via Terraform.</p>
<p><strong>Resource</strong> is the most important part of the configuration code. This is where the definition of infrastructure objects happens. Resources are the main building blocks of the whole code.</p>
<p>Every resource has a type and local name. For example here is how EC2 instance configuration may look like:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">resource “aws_instance” “web_server” {<span style="color:#666">
</span><span style="color:#666">  </span>ami           = “ami-a1b2c3d4”<span style="color:#666">
</span><span style="color:#666">  </span>instance_type = “t3.micro”<span style="color:#666">
</span><span style="color:#666">  </span>}<span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>The <code>aws_instance</code> is a resource type and <code>web_server</code> is the resource local name. Later, when Terraform applies this code, it will create an EC2 instance with some particular ID in AWS. Once created, the ID will be stored in the state file with mapping information that logically connects it with <code>web_server</code>.</p>
<p>The <code>ami</code>, <code>instance_type</code> and <code>private_ip</code> are the arguments with values which define the actual state of the resource. There are plenty of value types, depending on the particular argument and particular resource type, so I will not focus on them here.</p>
<p><strong>Modules</strong> are the kind of logical containers or groups for resources you define and use together. The purpose of modules is not only the grouping of resources but it is also the possibility to reuse the same code with different variables.</p>
<p>Let’s get back to the example with EC2 instance and say you need to have a static public IP address with it. In such a case, here is how the module for web server may look like:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">resource “aws_instance” “web_server” {<span style="color:#666">
</span><span style="color:#666">  </span>ami           = “ami-a1b2c3d4”<span style="color:#666">
</span><span style="color:#666">  </span>instance_type = “t3.micro”<span style="color:#666">
</span><span style="color:#666">  </span>}<span style="color:#666">
</span><span style="color:#666"></span>resource “aws_eip” “web_server_public_ip” {<span style="color:#666">
</span><span style="color:#666">  </span>instance      = “${aws_instance.web_server.id}”<span style="color:#666">
</span><span style="color:#666">  </span>}<span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>Having these two resources together allows us to think of it as a stand-alone unit you can reuse later, for example in our development, staging, and production environments. And not by copying and pasting it, but via reference to the module defined only once.</p>
<p>Please note: we specified an instance argument inside the <code>aws_eip</code> resource as a reference to another resource details (the ID of an instance). This is possible because of a way how Terraform treats dependencies: when it detects the dependency (or you define it explicitly) it will create the main resource first, and only after it’s created and available it will create the dependent one.</p>
<p><strong>Input variables</strong> work as parameters for the modules so module code could be reusable. Let’s look at the previous example: it has some hardcoded values — instance image ID and instance type. Here is how you can make it more abstract and reusable:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">variable “image_id” {<span style="color:#666">
</span><span style="color:#666">  </span>type          = string<span style="color:#666">
</span><span style="color:#666">  </span>}<span style="color:#666">
</span><span style="color:#666"></span>variable “instance_type” {<span style="color:#666">
</span><span style="color:#666">  </span>type          = string<span style="color:#666">
</span><span style="color:#666">  </span>}<span style="color:#666">
</span><span style="color:#666"></span>resource “aws_instance” “web_server” {<span style="color:#666">
</span><span style="color:#666">  </span>ami           = var.image_id<span style="color:#666">
</span><span style="color:#666">  </span>instance_type = var.instance_type<span style="color:#666">
</span><span style="color:#666">  </span>}<span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>Values for the variables then can be passed either via CLI and environment variables (if you have only the one, so-called root module) or via explicit values in the block where you call a module, for example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">module “web_server_production” {<span style="color:#666">
</span><span style="color:#666">  </span>source.       = “./modules/web_server”<span style="color:#666">
</span><span style="color:#666">  </span>image_id      = “ami-a1b2c3d4”<span style="color:#666">
</span><span style="color:#666">  </span>instance_type = “m5.large”<span style="color:#666">
</span><span style="color:#666">  </span>}<span style="color:#666">
</span><span style="color:#666"></span>module “web_server_development” {<span style="color:#666">
</span><span style="color:#666">  </span>source        = “./modules/web_server”<span style="color:#666">
</span><span style="color:#666">  </span>image_id      = “ami-a2b3c4d5”<span style="color:#666">
</span><span style="color:#666">  </span>instance_type = “t3.micro”<span style="color:#666">
</span><span style="color:#666"> </span>}<span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p><strong>Output values</strong> are similar to the “return” of a function in development language. They can be used for dependencies management (for example, when a module require something from another module) and for the printing of the certain values at the end of Terraform work (for example to be used for notification in CI/CD process).</p>
<p><strong>Local values</strong>, <strong>expressions</strong>, <strong>functions</strong> — three more things that augment the capabilities of Terraform and make it more similar to a programming language (which is great by the way).</p>
<p>The local values are used inside modules for extended data manipulations in it.</p>
<p>The expressions are used to set the values (for many things), for example, to set the value of some argument in resource configuration. They used either to refer something (just as we referenced instance ID <code>“${aws_instance.web_server.id}”</code> in the example above) or to compute the value within your configuration.</p>
<p>The functions in Terraform are built-int jobs you can call to transform and combine values. For example, the <code>tolist()</code> function converts its argument to a list value.</p>
<h3 id="and-this-is-it">And this is it?</h3>
<p>Yes, in a very very short words — this is what Terraform is. Not a rocket science if it&rsquo;s about to manage a small infastructure, but gets more complicated with bigger infrastctucture. As any other engineerign tool or development language, actually.</p>
<h3 id="okay-what-next">Okay, what next?</h3>
<p>If you read down to this point (anybody?) then it means it worth “get your hands dirty” and to try building your Infrastructure with Terraform. There are plenty of courses and books (and the “Terraform up and running” is one of the most popular), but my learning path started from the following: <a href="https://learn.hashicorp.com/terraform">Official guide from Hashicorp</a> — great and free guide from Terraform developers. Just pick your favorite cloud (AWS, Azure, GCP) and go through the topics.</p>
<p>Once you finish this guide, I suggest jumping into the more real-world things and describe the infrastructure of the most common project you work with. For example, here is what I do: <a href="https://github.com/vasylenko/tf-ecs">small github project</a> – I am trying to describe the Infrastructure for SPA website with services in docker containers at the backend. The variety and complexity of the code are limited only by your fantasy.</p>
<p>Another thing worth your attention is <a href="https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca">A Comprehensive Guide to Terraform</a>.</p>
<p>And I also encourage you to go through the <a href="https://gruntwork.io/static/devops-resources/">collection of blog posts and talks</a> they share.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
