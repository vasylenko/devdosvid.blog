<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Serhii Vasylenko</title>
    <link>https://serhii.vasylenko.info/posts/</link>
    <description>Recent content in Posts on Serhii Vasylenko</description>
    <image>
      <url>https://serhii.vasylenko.info/assets/img/website-logo-open-graph.jpeg</url>
      <link>https://serhii.vasylenko.info/assets/img/website-logo-open-graph.jpeg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Nov 2021 14:20:58 +0200</lastBuildDate><atom:link href="https://serhii.vasylenko.info/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apply Cloudfront Security Headers With Terraform</title>
      <link>https://serhii.vasylenko.info/2021/11/05/apply-cloudfront-security-headers-with-terraform/</link>
      <pubDate>Fri, 05 Nov 2021 14:20:58 +0200</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/11/05/apply-cloudfront-security-headers-with-terraform/</guid>
      <description>This blog explains how to use Response Headers Policy and Terraform to configure security headers for CloudFront Distribution</description>
      <content:encoded><![CDATA[<p>In November 2021, AWS announced Response Headers Policies — native support of response headers in CloudFront. You can read the full announcement here: <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/amazon-cloudfront-introduces-response-headers-policies/">Amazon CloudFront introduces Response Headers Policies</a></p>
<p>I said &ldquo;native&rdquo; because previously you could set response headers either using <a href="https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.html">CloudFront Functions</a> or <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/adding-http-security-headers-using-lambdaedge-and-amazon-cloudfront/">Lambda@Edge</a>.</p>
<p>And one of the common use cases for that was to set security headers. So now you don&rsquo;t need to add intermediate requests processing to modify the headers: CloudFront does that for you <strong>with no additional fee</strong>.</p>
<h2 id="manage-security-headers-as-code">Manage Security Headers as Code</h2>
<p>Starting from the <a href="https://github.com/hashicorp/terraform-provider-aws/blob/main/CHANGELOG.md#3640-november-04-2021">3.64.0</a> version of Terraform AWS provider, you can create the security headers policies and apply them for your distribution.</p>
<p>Let&rsquo;s see how that looks!</p>
<p>First, you need to describe the <code>aws_cloudfront_response_headers_policy</code> resource:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">31
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_cloudfront_response_headers_policy&#34; &#34;security_headers_policy&#34;</span> {
  name = <span style="color:#ed9d13">&#34;my-security-headers-policy&#34;</span>
  <span style="color:#6ab825;font-weight:bold">security_headers_config</span> {
    <span style="color:#6ab825;font-weight:bold">content_type_options</span> {
      override = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">frame_options</span> {
      frame_option = <span style="color:#ed9d13">&#34;DENY&#34;</span>
      override     = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">referrer_policy</span> {
      referrer_policy = <span style="color:#ed9d13">&#34;same-origin&#34;</span>
      override        = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">xss_protection</span> {
      mode_block = <span style="color:#6ab825;font-weight:bold">true</span>
      protection = <span style="color:#6ab825;font-weight:bold">true</span>
      override   = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">strict_transport_security</span> {
      access_control_max_age_sec = <span style="color:#ed9d13">&#34;63072000&#34;</span>
      include_subdomains         = <span style="color:#6ab825;font-weight:bold">true</span>
      preload                    = <span style="color:#6ab825;font-weight:bold">true</span>
      override                   = <span style="color:#6ab825;font-weight:bold">true</span>
    }
    <span style="color:#6ab825;font-weight:bold">content_security_policy</span> {
      content_security_policy = <span style="color:#ed9d13">&#34;frame-ancestors &#39;none&#39;; default-src &#39;none&#39;; img-src &#39;self&#39;; script-src &#39;self&#39;; style-src &#39;self&#39;; object-src &#39;none&#39;&#34;</span>
      override                = <span style="color:#6ab825;font-weight:bold">true</span>
    }
  }
}
</code></pre></td></tr></table>
</div>
</div><p>List of security headers used:</p>
<ul>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-content-type-options">X-Content-Type-Options</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-frame-options">X-Frame-Options</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#referrer-policy">Referrer Policy</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-xss-protection">X-XSS-Protection</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#http-strict-transport-security">Strict Transport Security</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#content-security-policy">Content Security Policy</a></li>
</ul>
<p>The values for the security headers can be different, of course. However, the provided ones cover the majority of cases. And you can always get the up to date info about these headers and possible values here: <a href="https://infosec.mozilla.org/guidelines/web_security">Mozilla web Security Guidelines</a></p>
<p>Also, you could notice that provided example uses the <code>override</code> argument a lot. The <code>override</code> argument tells CloudFront to set these values for specified headers despite the values received from the origin. This way, you can enforce your security headers configuration.</p>
<p>Once you have the <code>aws_cloudfront_response_headers_policy</code> resource, you can refer to it in the code of <code>aws_cloudfront_distribution</code> resource inside cache behavior block (default or ordered). For example, in your <code>default_cache_behavior</code>:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_cloudfront_distribution&#34; &#34;test&#34;</span> {
  <span style="color:#6ab825;font-weight:bold">default_cache_behavior</span> {
    target_origin_id           = <span style="color:#6ab825;font-weight:bold">aws_s3_bucket</span>.<span style="color:#6ab825;font-weight:bold">my_origin</span>.<span style="color:#6ab825;font-weight:bold">id</span>
    allowed_methods            = [<span style="color:#ed9d13">&#34;GET&#34;, &#34;HEAD&#34;, &#34;OPTIONS&#34;</span>]
    cached_methods             = [<span style="color:#ed9d13">&#34;GET&#34;, &#34;HEAD&#34;</span>]
    viewer_protocol_policy     = <span style="color:#ed9d13">&#34;redirect-to-https&#34;</span><span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">    # some arguments skipped from listing for the sake of simplicity
</span><span style="color:#999;font-style:italic"></span>    
    response_headers_policy_id = <span style="color:#6ab825;font-weight:bold">aws_cloudfront_response_headers_policy</span>.<span style="color:#6ab825;font-weight:bold">security_headers_policy</span>.<span style="color:#6ab825;font-weight:bold">id</span>
    
  }<span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">
</span><span style="color:#999;font-style:italic">  # some arguments skipped from listing for the sake of simplicity
</span><span style="color:#999;font-style:italic"></span>}
</code></pre></td></tr></table>
</div>
</div><h3 id="more-to-read">More to read:</h3>
<ul>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_response_headers_policy">Terraform Resource: aws_cloudfront_response_headers_policy</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/creating-response-headers-policies.html">Creating response headers policies - Amazon CloudFront</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html">Using the managed response headers policies - Amazon CloudFront</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-response-headers-policies.html">Understanding response headers policies - Amazon CloudFront</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Auto Scaling Group for your macOS EC2 Instances fleet</title>
      <link>https://serhii.vasylenko.info/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/</link>
      <pubDate>Sun, 24 Oct 2021 02:00:31 +0300</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/10/24/auto-scaling-group-for-your-macos-ec2-instances-fleet/</guid>
      <description>It’s been almost a year since I started using macOS EC2 instances on AWS: there were ups and downs in service offerings and a lot of discoveries with macOS AMI build automation.
And I like this small but so helpful update of EC2 service very much: with mac1.metal instances, seamless integration of Apple-oriented CI/CD with other AWS infrastructure could finally happen.
While management of a single mac1.metal node (or a tiny number of ones) is not a big deal (especially when Dedicated Host support was added to Terraform provider), governing the fleet of instances is still complicated.</description>
      <content:encoded><![CDATA[<p>It’s been almost a year since I started using macOS EC2 instances on AWS: there were <a href="https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html">ups and downs in service offerings</a> and a lot of discoveries with <a href="https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html">macOS AMI build</a> automation.</p>
<p>And I like this small but so helpful update of EC2 service very much: with mac1.metal instances, seamless integration of Apple-oriented CI/CD with other AWS infrastructure could finally happen.</p>
<p>While management of a single mac1.metal node (or a tiny number of ones) is not a big deal (especially when <a href="https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html">Dedicated Host support</a> was added to Terraform provider), governing the fleet of instances is still complicated. Or it has been complicated until recent days.</p>
<h2 id="official--unofficial-auto-scaling-for-macos">Official / Unofficial Auto Scaling for macOS</h2>
<p>With a growing number of instances, the following challenges arise:</p>
<ul>
<li>Scale mac1.metal instances horizontally</li>
<li>Automatically allocate and release Dedicated Hosts needed for instances</li>
<li>Automatically replace unhealthy instances</li>
</ul>
<p>If you have worked with AWS before, you know that Auto Scaling Group service can solve such things.</p>
<p>However, official documentation (as of October 2021) <a href="https://github.com/awsdocs/amazon-ec2-user-guide/blob/269ac7494dd3aef62ae5d45e8b11f7ea5cadd2bf/doc_source/ec2-mac-instances.md">states</a>: “You cannot use Mac instances with Amazon EC2 Auto Scaling”.</p>
<p>But in fact, you can.</p>
<h2 id="combining-services-to-get-real-power">Combining services to get real power</h2>
<p>So how does all that work?</p>
<p>Let’s review the diagram that illustrates the interconnection between involved services:</p>
<figure>
    <img loading="lazy" src="general-scheme_compressed.png"
         alt="Services interconnection"/> 
</figure>

<p>With the help of Licence Manager service and Launch Templates, you can set up EC2 Auto Scaling Group for mac1.metal and leave the automated instance provisioning to the service.</p>
<h3 id="license-configuration">License Configuration</h3>
<p>First, you need to create a License Configuration so that the Host resource group can allocate the hots.</p>
<p>Go to AWS License Manager -&gt; Customer managed licenses -&gt; Create customer-managed license.</p>
<p>Specify <strong>Sockets</strong> as the Licence type. You may skip setting the Number of Sockets. However, the actual limit of mac1.metal instances per account is regulated by Service Quota. The default number of mac instances allowed per account is 3. Therefore, consider <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html">increasing</a> this to a more significant number.</p>
<figure>
    <img loading="lazy" src="license-configuration_compressed.png"
         alt="Licence configuration values"/> 
</figure>

<h3 id="host-resource-group">Host resource group</h3>
<p>Second, create the Host resource group: AWS License Manager -&gt; Host resource groups -&gt; Create host resource group.</p>
<p>When creating the Host resource group, check “<strong>Allocate hosts automatically</strong>” and “<strong>Release hosts automatically</strong>” but leave “Recover hosts automatically” unchecked. Dedicated Host does <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html#dedicated-hosts-recovery-instances">not support host recovery</a> for mac1.metal.
However, Auto Scaling Group will maintain the desired number of instances if one fails the health check (which assumes the case of host failure as well).</p>
<p>Also, I recommend specifying “mac1” as an allowed Instance family for the sake of transparent resource management: only this instance type is permitted to allocate hosts in the group.</p>
<figure>
    <img loading="lazy" src="host-resource-group_compressed.png"
         alt="Host resource group configuration values"/> 
</figure>

<p>Optionally, you may specify the license association here (the Host group will pick any compatible license) or select the license you created on step one.</p>
<h3 id="launch-template">Launch Template</h3>
<p>Create Launch Template: EC2 -&gt; Launch templates -&gt; Create launch template.</p>
<p>I will skip the description of all Launch Template parameters (but here is a nice <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">tutorial</a>), if you don’t mind, and keep focus only on the items relevant to the current case.</p>
<p>Specify mac1.metal as the Instance type. Later, in Advanced details: find the <strong>Tenancy</strong> parameter and set it to “Dedicated host”; for <strong>Target host by</strong> select “Host resource group”, and once selected the new parameter <strong>Tenancy host resource group</strong> will appear where you should choose your host group; select your license in <strong>License configurations</strong> parameter.</p>
<figure>
    <img loading="lazy" src="launch-template_compressed.png"
         alt="Launch Template configuration values"/> 
</figure>

<h3 id="auto-scaling-group">Auto Scaling Group</h3>
<p>Finally, create the Auto Scaling Group: EC2 -&gt; Auto Scaling groups -&gt; Create Auto Scaling group.</p>
<p>The vital thing to note here — is the availability of the mac1.metal instance in particular AZ.</p>
<p>Mac instances are available in us-east-1 and <a href="https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-ec2-mac-instances-additional-regions/">7 more regions</a>, but not every Availability Zone in the region supports it. So you must figure out which AZ supports the needed instance type.</p>
<p>There is no documentation for that, but there is an AWS CLI command that can answer this question: <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/describe-instance-type-offerings.html">describe-instance-type-offerings — AWS CLI 2.3.0 Command Reference</a></p>
<p>Here is an example for the us-east-1 region:
<p><details >
<summary markdown="span" style="font-size: 0.8em; font-weight: bold">🔍 Click here to see the code snippet</summary>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; aws ec2 describe-instance-type-offerings --location-type availability-zone-id --filters <span style="color:#40ffff">Name</span>=instance-type,Values=mac1.metal --region us-east-1 --output text

INSTANCETYPEOFFERINGS	mac1.metal	use1-az6	availability-zone-id
INSTANCETYPEOFFERINGS	mac1.metal	use1-az4	availability-zone-id
</code></pre></td></tr></table>
</div>
</div>
</details></p>
</p>
<p>Keep that nuance in mind when selecting a subnet for the mac1.metal instances.</p>
<p>When you know the AZ, specify the respective Subnet in the Auto Scaling Group settings, and you&rsquo;re ready to go!</p>
<h2 id="bring-infrastructure-as-code-here">Bring Infrastructure as Code here</h2>
<p>I suggest describing all that as a code. I prefer Terraform, and its AWS provider supports the needed resources. Except one.</p>
<p>As of October 2021, resources supported :</p>
<ul>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/servicequotas_service_quota">aws_servicequotas_service_quota</a></li>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/licensemanager_license_configuration">aws_licensemanager_license_configuration</a></li>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_template">aws_launch_template</a></li>
<li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group">aws_autoscaling_group</a></li>
</ul>
<p>The Host resource group is not yet supported by the provider, unfortunately. However, we can use CloudFormation in Terraform to overcome that: describe the Host resource group as <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudformation_stack">aws_cloudformation_stack</a> Terraform resource using CloudFormation template from a file.</p>
<p>Here is how it looks like:
<p><details >
<summary markdown="span" style="font-size: 0.8em; font-weight: bold">🔍 Click here to see the code snippet</summary>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_licensemanager_license_configuration&#34; &#34;this&#34;</span> {
  name                     = <span style="color:#6ab825;font-weight:bold">local</span>.<span style="color:#6ab825;font-weight:bold">full_name</span>
  license_counting_type    = <span style="color:#ed9d13">&#34;Socket&#34;</span>
}

<span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_cloudformation_stack&#34; &#34;this&#34;</span> {
  name          = <span style="color:#6ab825;font-weight:bold">local</span>.<span style="color:#6ab825;font-weight:bold">full_name</span><span style="color:#999;font-style:italic"> # the name of CloudFormation stack
</span><span style="color:#999;font-style:italic"></span>  template_body = <span style="color:#6ab825;font-weight:bold">file</span>(<span style="color:#ed9d13">&#34;${path.module}/resource-group-cf-stack-template.json&#34;</span>)
  parameters = {
    GroupName = <span style="color:#6ab825;font-weight:bold">local</span>.<span style="color:#6ab825;font-weight:bold">full_name</span><span style="color:#999;font-style:italic"> # the name for the Host group, passed to CloudFormation template
</span><span style="color:#999;font-style:italic"></span>  }
  on_failure = <span style="color:#ed9d13">&#34;DELETE&#34;</span>
}
</code></pre></td></tr></table>
</div>
</div>
</details></p>
</p>
<p>And the next code snippet explains the CloudFromation template (which is the <code>resource-group-cf-stack-template.json</code> file in the code snippet above)</p>
<p><details >
<summary markdown="span" style="font-size: 0.8em; font-weight: bold">🔍 Click here to see the code snippet</summary>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">32
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">33
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">34
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">37
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">38
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">39
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">40
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">41
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">42
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">43
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">44
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">45
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">46
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">47
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">48
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">49
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">50
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">51
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">52
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">53
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">54
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">55
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">56
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">57
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">58
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#6ab825;font-weight:bold">&#34;Parameters&#34;</span> : {
    <span style="color:#6ab825;font-weight:bold">&#34;GroupName&#34;</span> : {
      <span style="color:#6ab825;font-weight:bold">&#34;Type&#34;</span> : <span style="color:#ed9d13">&#34;String&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;Description&#34;</span> : <span style="color:#ed9d13">&#34;The name of Host Group&#34;</span>
    }
  },
  <span style="color:#6ab825;font-weight:bold">&#34;Resources&#34;</span> : {
    <span style="color:#6ab825;font-weight:bold">&#34;DedicatedHostGroup&#34;</span>: {
      <span style="color:#6ab825;font-weight:bold">&#34;Type&#34;</span>: <span style="color:#ed9d13">&#34;AWS::ResourceGroups::Group&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;Properties&#34;</span>: {
        <span style="color:#6ab825;font-weight:bold">&#34;Name&#34;</span>: { <span style="color:#6ab825;font-weight:bold">&#34;Ref&#34;</span>: <span style="color:#ed9d13">&#34;GroupName&#34;</span> },
        <span style="color:#6ab825;font-weight:bold">&#34;Configuration&#34;</span>: [
          {
            <span style="color:#6ab825;font-weight:bold">&#34;Type&#34;</span>: <span style="color:#ed9d13">&#34;AWS::ResourceGroups::Generic&#34;</span>,
            <span style="color:#6ab825;font-weight:bold">&#34;Parameters&#34;</span>: [
              {
                <span style="color:#6ab825;font-weight:bold">&#34;Name&#34;</span>: <span style="color:#ed9d13">&#34;allowed-resource-types&#34;</span>,
                <span style="color:#6ab825;font-weight:bold">&#34;Values&#34;</span>: [<span style="color:#ed9d13">&#34;AWS::EC2::Host&#34;</span>]
              },
              {
                <span style="color:#6ab825;font-weight:bold">&#34;Name&#34;</span>: <span style="color:#ed9d13">&#34;deletion-protection&#34;</span>,
                <span style="color:#6ab825;font-weight:bold">&#34;Values&#34;</span>: [<span style="color:#ed9d13">&#34;UNLESS_EMPTY&#34;</span>]
              }
            ]
          },
          {
            <span style="color:#6ab825;font-weight:bold">&#34;Type&#34;</span>: <span style="color:#ed9d13">&#34;AWS::EC2::HostManagement&#34;</span>,
            <span style="color:#6ab825;font-weight:bold">&#34;Parameters&#34;</span>: [
              {
                <span style="color:#6ab825;font-weight:bold">&#34;Name&#34;</span>: <span style="color:#ed9d13">&#34;allowed-host-families&#34;</span>,
                <span style="color:#6ab825;font-weight:bold">&#34;Values&#34;</span>: [<span style="color:#ed9d13">&#34;mac1&#34;</span>]
              },
              {
                <span style="color:#6ab825;font-weight:bold">&#34;Name&#34;</span>: <span style="color:#ed9d13">&#34;auto-allocate-host&#34;</span>,
                <span style="color:#6ab825;font-weight:bold">&#34;Values&#34;</span>: [<span style="color:#ed9d13">&#34;true&#34;</span>]
              },
              {
                <span style="color:#6ab825;font-weight:bold">&#34;Name&#34;</span>: <span style="color:#ed9d13">&#34;auto-release-host&#34;</span>,
                <span style="color:#6ab825;font-weight:bold">&#34;Values&#34;</span>: [<span style="color:#ed9d13">&#34;true&#34;</span>]
              },
              {
                <span style="color:#6ab825;font-weight:bold">&#34;Name&#34;</span>: <span style="color:#ed9d13">&#34;any-host-based-license-configuration&#34;</span>,
                <span style="color:#6ab825;font-weight:bold">&#34;Values&#34;</span>: [<span style="color:#ed9d13">&#34;true&#34;</span>]
              }
            ]
          }
        ]
      }
    }
  },
  <span style="color:#6ab825;font-weight:bold">&#34;Outputs&#34;</span> : {
    <span style="color:#6ab825;font-weight:bold">&#34;ResourceGroupARN&#34;</span> : {
      <span style="color:#6ab825;font-weight:bold">&#34;Description&#34;</span>: <span style="color:#ed9d13">&#34;ResourceGroupARN&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;Value&#34;</span> : { <span style="color:#6ab825;font-weight:bold">&#34;Fn::GetAtt&#34;</span> : [<span style="color:#ed9d13">&#34;DedicatedHostGroup&#34;</span>, <span style="color:#ed9d13">&#34;Arn&#34;</span>] }
    }
  }
}
</code></pre></td></tr></table>
</div>
</div>
</details></p>

<p>The <code>aws_cloudformation_stack</code> resource will export the <code>DedicatedHostGroup</code> attribute (see the code of CloudFromation template), which you will use later in the Launch Template resource.</p>
<h3 id="pro-tips">Pro tips</h3>
<p>If you manage an AWS Organization, I have good news: Host groups and Licenses are supported by <a href="https://docs.aws.amazon.com/ram/latest/userguide/shareable.html">Resource Access Manager</a> service. Hence, you can host all mac instances in one account and share them with other accounts — it might be helpful for costs allocation, for example. Also, check out <a href="https://serhii.vasylenko.info/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/">my blog about AWS RAM</a> if you are very new to this service.</p>
<p>To solve the “which AZ supports mac metal” puzzle, you can leverage the <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ec2_instance_type_offerings">aws_ec2_instance_type_offerings</a> and <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/subnet_ids">aws_subnet_ids</a> data sources.</p>
<h2 id="costs-considerations">Costs considerations</h2>
<p>License Manager is a <a href="https://aws.amazon.com/license-manager/pricing/">free of charge service</a>, as well as <a href="https://aws.amazon.com/autoscaling/pricing/">Auto Scaling</a>, and <a href="https://aws.amazon.com/about-aws/whats-new/2017/11/introducing-launch-templates-for-amazon-ec2-instances/">Launch Template</a>.</p>
<p>So it’s all about the price for mac1.metal Dedicated Host which is <a href="https://aws.amazon.com/ec2/dedicated-hosts/pricing/">$1.083 per hour</a> as of October 2021. However, <a href="https://docs.aws.amazon.com/savingsplans/latest/userguide/what-is-savings-plans.html">Saving Plans</a> can be applied.</p>
<p>Please note that the minimum allocation time for that type of host is 24 hours. Maybe someday AWS will change that to 1-hour minimum someday (fingers crossed).</p>
<h2 id="oh-so-asg">Oh. So. ASG.</h2>
<p>The Auto Scaling for mac1.metal opens new possibilities for CI/CD: you can integrate that to your favorite tool (GitLab, Jenkins, whatsoever) using AWS Lambda and provision new instances when your development/testing environments need that. Or you can use other cool ASG stuff, such as Lifecycle hooks, to create even more custom scenarios.</p>
<p>Considering the “hidden” (undocumented) nature of the described setup, I suggest treating it as rather testing than production-ready for now. However, my tests show that everything works pretty well: hosts are allocated, instances are spawned, and the monthly bill grows.</p>
<p>I suppose AWS will officially announce all this in the nearest future. Along with that, I am looking forward to the announcement of Monterey-based AMIs and maybe even M1 chip-based instances (will it be mac2.metal?).</p>
<p>And I want to say thanks (thanks, pal!) to <a href="https://github.com/hashicorp/terraform/issues/28531">OliverKoo</a>, who started digging into that back in April'21.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>AWS Resource Access Manager — Multi Account Resource Governance</title>
      <link>https://serhii.vasylenko.info/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/</link>
      <pubDate>Sat, 25 Sep 2021 00:54:23 +0300</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/09/25/aws-resource-access-manager-multi-account-resource-governance/</guid>
      <description>Provision and manage resources within the AWS Organization with ease</description>
      <content:encoded><![CDATA[<p>With a multi-account approach of building the infrastructure, there is always a challenge of provision and governance of the resources to subordinate accounts within the Organization. Provision resources, keep them up to date, and decommission them properly — that&rsquo;s only a part of them.</p>
<p>AWS has numerous solutions that help make this process reliable and secure, and the Resource Access Manager (RAM) is one of them.
In a nutshell, the RAM service allows you to share the AWS resources you create in one AWS account with other AWS accounts. They can be your organizations' accounts, organizational units (OU), or even third-party accounts.</p>
<p>So let&rsquo;s see what the RAM is and review some of its usage examples.</p>
<h2 id="why-using-ram">Why using RAM</h2>
<p>There are several benefits of using the RAM service:</p>
<ol>
<li>
<p><strong>Reduced operational overhead</strong>: eliminate the need of provisioning the same kind of resource multiple times — RAM does that for you</p>
</li>
<li>
<p><strong>Simplified security management</strong>: AWS RAM-managed permissions (at least one per resource type) define the actions that principals with access to the resources (i.e., resource users) can perform on those resources.</p>
</li>
<li>
<p><strong>Consistent experience</strong>: you share the resource in its state and with its security configuration with an arbitrary number of accounts.</p>
<p>That plays incredibly well in the case of organization-wide sharing: new accounts get the resources automatically. And the shared resource itself looks like a native resource in the account that accepts your sharing.</p>
</li>
<li>
<p><strong>Audit and visibility</strong>: RAM integrates with the CloudWatch and CloudTrail.</p>
</li>
</ol>
<h2 id="how-to-share-a-resource">How to share a resource</h2>
<p>When you share a resource, the AWS account that owns that resource retains full ownership of the resource.</p>
<p>Sharing of the resource doesn&rsquo;t change any permissions or quotas that apply to that resource. Also, you can share the resource only if you own it.</p>
<p>Availability of the shared resources scopes to the Region: the users of your shared resources can access these resources only in the same Region where resources belong.</p>
<p>Creation of resource share consists of three steps:
<img loading="lazy" src="ram-diagram-800.png" alt=""  />
</p>
<ol>
<li>
<p>Specify the share name and the resource(s) you want to share. It can be either one resource type or several. You can also skip the resources selection and do that later.</p>
<p>It&rsquo;s possible to modify the resource share later (e.g., you want to add some resources to the share).</p>
</li>
<li>
<p>Associate permissions with resource types you share. Some resources can have only one managed permission (will be attached automatically), and some can have multiple.</p>
<p>You can check the Permissions Library in the AWS RAM Console to see what managed permissions are available.</p>
</li>
<li>
<p>Select who can use the resources you share: either external or Organization account or IAM role/user. If you share the resource with third parties, they will have to accept the sharing explicitly.</p>
<p>Organization-wide resource share is accepted implicitly if resource sharing is enabled for the Organization.</p>
</li>
</ol>
<p>Finally, review the summary page of the resource share and create it.</p>
<p>Only specific actions are available to the users of shared resources. These actions mostly have the &ldquo;read-only&rdquo; nature and <a href="https://docs.aws.amazon.com/ram/latest/userguide/shareable.html">vary by resource type</a>.</p>
<p>Also, the RAM service is <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ram_resource_share">supported by Terraform</a>, so the resource sharing configuration may look like that, for example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_ram_resource_share&#34; &#34;example&#34;</span> {
  name                      = <span style="color:#ed9d13">&#34;example&#34;</span>
  allow_external_principals = <span style="color:#6ab825;font-weight:bold">false</span>

  tags = {
    Environment = <span style="color:#ed9d13">&#34;Production&#34;</span>
  }
}

<span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_ram_resource_association&#34; &#34;example&#34;</span> {
  resource_arn       = <span style="color:#6ab825;font-weight:bold">aws_subnet</span>.<span style="color:#6ab825;font-weight:bold">example</span>.<span style="color:#6ab825;font-weight:bold">arn</span>
  resource_share_arn = <span style="color:#6ab825;font-weight:bold">aws_ram_resource_share</span>.<span style="color:#6ab825;font-weight:bold">example</span>.<span style="color:#6ab825;font-weight:bold">arn</span>
}
</code></pre></td></tr></table>
</div>
</div><h2 id="example-use-cases">Example use cases</h2>
<p>One of the trivial but valuable examples of RAM service usage is sharing a Manged Prefix List.
Suppose you have some service user across your Organization, a self-hosted VPN server, for example. And you have a static set of IPs for that VPN: you trust these IPs and would like them to be allow-listed in your other services.
How to report these IPs to all organization accounts/users? And if the IP set changes, how to announce that change, and what should be done to reflect that change in services that depend on it, for example, Security Groups?</p>
<p>The answer is a shared <a href="https://docs.aws.amazon.com/vpc/latest/userguide/managed-prefix-lists.html#managed-prefix-lists-concepts">Managed Prefix List</a>. You create the list once in the account and share it across your Organization. Other accounts automatically get access to that list and can reference the list in their Security Groups. And when the list entry is changed, they do not need to perform any actions: their Security Groups will get the updated IPs implicitly.</p>
<p>Another everyday use case of RAM is the VPC sharing that can form the foundation of the <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/vpc-sharing-a-new-approach-to-multiple-accounts-and-vpc-management/">multi-account AWS architectures</a>.</p>
<hr>
<p>Of course, the RAM service is not the only way to organize and centralize resource management in AWS. There are Service Catalog, Control Tower, Systems Manager, Config, and others. However, the RAM is relatively simple to adopt but is capable of providing worthy outcomes.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Run Ansible playbook on mac1.metal instances fleet with AWS Systems Manager</title>
      <link>https://serhii.vasylenko.info/2021/05/27/run-ansible-playbook-mac1-metal-aws-systems-manager.html</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/05/27/run-ansible-playbook-mac1-metal-aws-systems-manager.html</guid>
      <description>A small adjustment for big capabilities</description>
      <content:encoded><![CDATA[<p>In days of containers and serverless applications, Ansible looks not such a trendy thing.</p>
<p>But still, there are cases when it helps, and there are cases when it combines very well with brand new product offerings, such as EC2 Mac instances.</p>
<p>The <a href="https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html">more I use mac1.metal</a> in AWS, the more I see that Ansible becomes a bedrock of software customization in my case.</p>
<p>And when you have a large instances fleet, the AWS Systems Manager becomes your best friend (the sooner you get along together, the better).</p>
<p>So is it possible to use Ansible playbooks for mac1.metal on a big scale, with the help of AWS Systems Manager?</p>
<h2 id="not-available-out-of-the-box">(Not) Available out of the box</h2>
<p>AWS Systems Manager (SSM hereafter) has a pre-defined, shared Document that allows running Ansible playbooks.</p>
<p>It’s called “AWS-RunAnsiblePlaybook,” and you can find it in AWS SSM → Documents → Owned by Amazon.</p>
<p>However, this Document is not quite “friendly” to macOS. When the SSM agent calls Ansible on the Mac EC2 instance, it does not recognize the Ansible installed with Homebrew (de-facto most used macOS package manager).</p>
<p>So if you try to run a command on the mac1.metal instance using this Document, you will get the following error:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Ansible is not installed. Please install Ansible and rerun the command.
</code></pre></td></tr></table>
</div>
</div><p>The root cause is trivial: the path to Ansible binary is not present on the list of paths available to the SSM agent by default.</p>
<p>There are several ways to solve that, but I believe that the most convenient one would be to create your custom Document — a slightly adjusted version of the default one provided by AWS.</p>
<h2 id="creating-own-ssm-document-for-ansible-installed-with-homebrew">Creating own SSM Document for Ansible installed with Homebrew</h2>
<p>All you need to do is clone the Document provided by AWS and change its code a little — replace the callouts of <code>ansible</code> with the full path to the binary.</p>
<p>Navigate to AWS SSM → Documents → Owned by Amazon and type <code>AWS-RunAnsiblePlaybook</code> in the search field.</p>
<p>Select the Document by pressing the circle on its top-right corner and then click Actions → Clone document.</p>
<p><img loading="lazy" src="aws_ssm_document_clone.png" alt=""  />
</p>
<p>Give the new SSM Document a name, e.g., <code>macos-arbitrary-ansible-playbook</code>, and change the <code>ansible</code> callouts (at the end of the code) with the full path to the ansible symlink made by Homebrew which is <code>/usr/local/bin/ansible</code></p>
<p>Here is the complete source code of the Document with adjusted Ansible path:</p>


<p><details >
  <summary markdown="span">Click to expand the code block</summary>
  <div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">32
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">33
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">34
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">37
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">38
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">39
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">40
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">41
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">42
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">43
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">44
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">45
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">46
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">47
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">48
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">49
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">50
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">51
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">52
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">53
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">54
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">55
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">56
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">57
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">58
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">59
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">60
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">61
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">62
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">63
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">64
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">65
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">66
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">67
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">68
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">69
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">70
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">71
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">72
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">73
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">74
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">75
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">76
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">77
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">78
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">79
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">80
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">81
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">82
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">83
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">84
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">85
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">86
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">87
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#6ab825;font-weight:bold">&#34;schemaVersion&#34;</span>: <span style="color:#ed9d13">&#34;2.0&#34;</span>,
  <span style="color:#6ab825;font-weight:bold">&#34;description&#34;</span>: <span style="color:#ed9d13">&#34;Use this document to run arbitrary Ansible playbooks on macOS EC2 instances. Specify either YAML text or URL. If you specify both, the URL parameter will be used. Use the extravar parameter to send runtime variables to the Ansible execution. Use the check parameter to perform a dry run of the Ansible execution. The output of the dry run shows the changes that will be made when the playbook is executed.&#34;</span>,
  <span style="color:#6ab825;font-weight:bold">&#34;parameters&#34;</span>: {
    <span style="color:#6ab825;font-weight:bold">&#34;playbook&#34;</span>: {
      <span style="color:#6ab825;font-weight:bold">&#34;type&#34;</span>: <span style="color:#ed9d13">&#34;String&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;description&#34;</span>: <span style="color:#ed9d13">&#34;(Optional) If you don&#39;t specify a URL, then you must specify playbook YAML in this field.&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;default&#34;</span>: <span style="color:#ed9d13">&#34;&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;displayType&#34;</span>: <span style="color:#ed9d13">&#34;textarea&#34;</span>
    },
    <span style="color:#6ab825;font-weight:bold">&#34;playbookurl&#34;</span>: {
      <span style="color:#6ab825;font-weight:bold">&#34;type&#34;</span>: <span style="color:#ed9d13">&#34;String&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;description&#34;</span>: <span style="color:#ed9d13">&#34;(Optional) If you don&#39;t specify playbook YAML, then you must specify a URL where the playbook is stored. You can specify the URL in the following formats: http://example.com/playbook.yml  or s3://examplebucket/plabook.url. For security reasons, you can&#39;t specify a URL with quotes.&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;default&#34;</span>: <span style="color:#ed9d13">&#34;&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;allowedPattern&#34;</span>: <span style="color:#ed9d13">&#34;^\\s*$|^(http|https|s3)://[^&#39;]*$&#34;</span>
    },
    <span style="color:#6ab825;font-weight:bold">&#34;extravars&#34;</span>: {
      <span style="color:#6ab825;font-weight:bold">&#34;type&#34;</span>: <span style="color:#ed9d13">&#34;String&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;description&#34;</span>: <span style="color:#ed9d13">&#34;(Optional) Additional variables to pass to Ansible at runtime. Enter a space separated list of key/value pairs. For example: color=red or fruits=[apples,pears]&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;default&#34;</span>: <span style="color:#ed9d13">&#34;foo=bar&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;displayType&#34;</span>: <span style="color:#ed9d13">&#34;textarea&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;allowedPattern&#34;</span>: <span style="color:#ed9d13">&#34;^((^|\\s)\\w+=(\\S+|&#39;.*&#39;))*$&#34;</span>
    },
    <span style="color:#6ab825;font-weight:bold">&#34;check&#34;</span>: {
      <span style="color:#6ab825;font-weight:bold">&#34;type&#34;</span>: <span style="color:#ed9d13">&#34;String&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;description&#34;</span>: <span style="color:#ed9d13">&#34; (Optional) Use the check parameter to perform a dry run of the Ansible execution.&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;allowedValues&#34;</span>: [
        <span style="color:#ed9d13">&#34;True&#34;</span>,
        <span style="color:#ed9d13">&#34;False&#34;</span>
      ],
      <span style="color:#6ab825;font-weight:bold">&#34;default&#34;</span>: <span style="color:#ed9d13">&#34;False&#34;</span>
    },
    <span style="color:#6ab825;font-weight:bold">&#34;timeoutSeconds&#34;</span>: {
      <span style="color:#6ab825;font-weight:bold">&#34;type&#34;</span>: <span style="color:#ed9d13">&#34;String&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;description&#34;</span>: <span style="color:#ed9d13">&#34;(Optional) The time in seconds for a command to be completed before it is considered to have failed.&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;default&#34;</span>: <span style="color:#ed9d13">&#34;3600&#34;</span>
    }
  },
  <span style="color:#6ab825;font-weight:bold">&#34;mainSteps&#34;</span>: [
    {
      <span style="color:#6ab825;font-weight:bold">&#34;action&#34;</span>: <span style="color:#ed9d13">&#34;aws:runShellScript&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;name&#34;</span>: <span style="color:#ed9d13">&#34;runShellScript&#34;</span>,
      <span style="color:#6ab825;font-weight:bold">&#34;inputs&#34;</span>: {
        <span style="color:#6ab825;font-weight:bold">&#34;timeoutSeconds&#34;</span>: <span style="color:#ed9d13">&#34;{{ timeoutSeconds }}&#34;</span>,
        <span style="color:#6ab825;font-weight:bold">&#34;runCommand&#34;</span>: [
          <span style="color:#ed9d13">&#34;#!/bin/bash&#34;</span>,
          <span style="color:#ed9d13">&#34;/usr/local/bin/ansible --version&#34;</span>,
          <span style="color:#ed9d13">&#34;if [ $? -ne 0 ]; then&#34;</span>,
          <span style="color:#ed9d13">&#34; echo \&#34;Ansible is not installed. Please install Ansible and rerun the command\&#34; &gt;&amp;2&#34;</span>,
          <span style="color:#ed9d13">&#34; exit 1&#34;</span>,
          <span style="color:#ed9d13">&#34;fi&#34;</span>,
          <span style="color:#ed9d13">&#34;execdir=$(dirname $0)&#34;</span>,
          <span style="color:#ed9d13">&#34;cd $execdir&#34;</span>,
          <span style="color:#ed9d13">&#34;if [ -z &#39;{{playbook}}&#39; ] ; then&#34;</span>,
          <span style="color:#ed9d13">&#34; if [[ \&#34;{{playbookurl}}\&#34; == http* ]]; then&#34;</span>,
          <span style="color:#ed9d13">&#34;   wget &#39;{{playbookurl}}&#39; -O playbook.yml&#34;</span>,
          <span style="color:#ed9d13">&#34;   if [ $? -ne 0 ]; then&#34;</span>,
          <span style="color:#ed9d13">&#34;       echo \&#34;There was a problem downloading the playbook. Make sure the URL is correct and that the playbook exists.\&#34; &gt;&amp;2&#34;</span>,
          <span style="color:#ed9d13">&#34;       exit 1&#34;</span>,
          <span style="color:#ed9d13">&#34;   fi&#34;</span>,
          <span style="color:#ed9d13">&#34; elif [[ \&#34;{{playbookurl}}\&#34; == s3* ]] ; then&#34;</span>,
          <span style="color:#ed9d13">&#34;   aws --version&#34;</span>,
          <span style="color:#ed9d13">&#34;   if [ $? -ne 0 ]; then&#34;</span>,
          <span style="color:#ed9d13">&#34;       echo \&#34;The AWS CLI is not installed. The CLI is required to process Amazon S3 URLs. Install the AWS CLI and run the command again.\&#34; &gt;&amp;2&#34;</span>,
          <span style="color:#ed9d13">&#34;       exit 1&#34;</span>,
          <span style="color:#ed9d13">&#34;   fi&#34;</span>,
          <span style="color:#ed9d13">&#34;   aws s3 cp &#39;{{playbookurl}}&#39; playbook.yml&#34;</span>,
          <span style="color:#ed9d13">&#34;   if [ $? -ne 0 ]; then&#34;</span>,
          <span style="color:#ed9d13">&#34;       echo \&#34;Error while downloading the document from S3\&#34; &gt;&amp;2&#34;</span>,
          <span style="color:#ed9d13">&#34;       exit 1&#34;</span>,
          <span style="color:#ed9d13">&#34;   fi&#34;</span>,
          <span style="color:#ed9d13">&#34; else&#34;</span>,
          <span style="color:#ed9d13">&#34;   echo \&#34;The playbook URL is not valid. Verify the URL and try again.\&#34;&#34;</span>,
          <span style="color:#ed9d13">&#34; fi&#34;</span>,
          <span style="color:#ed9d13">&#34;else&#34;</span>,
          <span style="color:#ed9d13">&#34; echo &#39;{{playbook}}&#39; &gt; playbook.yml&#34;</span>,
          <span style="color:#ed9d13">&#34;fi&#34;</span>,
          <span style="color:#ed9d13">&#34;if  [[ \&#34;{{check}}\&#34; == True ]] ; then&#34;</span>,
          <span style="color:#ed9d13">&#34;   /usr/local/bin/ansible-playbook -i \&#34;localhost,\&#34; --check -c local -e \&#34;{{extravars}}\&#34; playbook.yml&#34;</span>,
          <span style="color:#ed9d13">&#34;else&#34;</span>,
          <span style="color:#ed9d13">&#34;   /usr/local/bin/ansible-playbook -i \&#34;localhost,\&#34; -c local -e \&#34;{{extravars}}\&#34; playbook.yml&#34;</span>,
          <span style="color:#ed9d13">&#34;fi&#34;</span>
        ]
      }
    }
  ]
}
</code></pre></td></tr></table>
</div>
</div>
</details></p>

<h2 id="applying-ansible-playbook-to-the-fleet-of-mac1metal">Applying Ansible playbook to the fleet of mac1.metal</h2>
<p>Let’s give our new SSM Document a try! (I suppose you have at least one mac1 instance running, right?)</p>
<p>In AWS SSM, go to the Run Command feature, then click on the Run Command button.</p>
<p>On the new panel, type the name of your Document (<code>macos-arbitrary-ansible-playbook</code> in this example) in the search field and press enter.</p>
<p>Select the Document, and you’ll see its parameters and settings.</p>
<p>The rest is self-explanatory. Enter either a playbook code or a link to the source file, add extra variables if needed, and select the target host or a filtered bunch (I like that feature with tags filtering!). Finally, click on the “Run” orange button to apply your playbook.</p>
<p>That’s it! Now you can make all your ansible-playbook dreams come true! 😁</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Configure HTTP Security headers with CloudFront Functions</title>
      <link>https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.html</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.html</guid>
      <description>Modifying response headers to enforce the security of the web application</description>
      <content:encoded><![CDATA[<div class="attention">
    <p><strong>Attention!</strong></p>
<p>In November 2021, AWS has added this functionality as a native CloudFront feature.</p>
<p>Read more here: <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/amazon-cloudfront-introduces-response-headers-policies/">Amazon CloudFront introduces Response Headers Policies</a>.</p>
<p>While you may still use the method described in this article, I suggest switching to the native implementation. But you can use the header settings from this article, though.</p>

</div>
<p>A couple of weeks ago, AWS released CloudFront Functions — a “true edge” compute capability for the CloudFront.</p>
<p>It is “true edge” because Functions work on 200+ edge locations (<a href="https://aws.amazon.com/cloudfront/features/?whats-new-cloudfront.sort-by=item.additionalFields.postDateTime&amp;whats-new-cloudfront.sort-order=desc#Edge_Computing">link to doc</a>) while its predecessor, the Lambda@Edge, runs on a small number of regional edge caches.</p>
<p>One of the use cases for Lambda@Edge was adding security HTTP headers (it’s even listed on the <a href="https://aws.amazon.com/lambda/edge/">product page</a>), and now there is one more way to make it using CloudFront Functions.</p>
<h2 id="what-are-security-headers-and-why-it-matters">What are security headers, and why it matters</h2>
<p>Security Headers are one of the web security pillars.</p>
<p>They specify security-related information of communication between a web application (i.e., website) and a client (i.e., browser) and protect the web app from different types of attacks. Also, HIPAA and PCI, and other security standard certifications generally include these headers in their rankings.</p>
<p>We will use CloudFront Functions to set the following headers:</p>
<ul>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#content-security-policy">Content Security Policy</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#http-strict-transport-security">Strict Transport Security</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-content-type-options">X-Content-Type-Options</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-xss-protection">X-XSS-Protection</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#x-frame-options">X-Frame-Options</a></li>
<li><a href="https://infosec.mozilla.org/guidelines/web_security#referrer-policy">Referrer Policy</a></li>
</ul>
<p>You can find a short and detailed explanation for each security header on <a href="https://infosec.mozilla.org/guidelines/web_security">Web Security cheatsheet made by Mozilla</a></p>
<h2 id="cloudfront-functions-overview">CloudFront Functions overview</h2>
<p>In a nutshell, CloudFront Functions allow performing simple actions against HTTP(s) request (from the client) and response (from the CloudFront cache at the edge). Functions take less than one millisecond to execute, support JavaScript (ECMAScript 5.1 compliant), and cost $0.10 per 1 million invocations.</p>
<p>Every CloudFront distribution has one (default) or more Cache behaviors, and Functions can be associated with these behaviors to execute upon a specific event.</p>
<p>That is how the request flow looks like in general, and here is where CloudFront Functions execution happens:</p>
<p><img loading="lazy" src="request_flow.png" alt=""  />
</p>
<p>CloudFront Functions support Viewer Request (after CloudFront receives a request from a client) and Viewer Response (before CloudFront forwards the response to the client) events.</p>
<p>You can read more about the events types and their properties here — <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-cloudfront-trigger-events.html">CloudFront Events That Can Trigger a Lambda Function - Amazon CloudFront</a>.</p>
<p>Also, the CloudFront Functions allow you to manage and operate the code and lifecycle of the functions directly from the CloudFront web interface.</p>
<h2 id="solution-overview">Solution overview</h2>
<p>CloudFront distribution should exist before Function creation so you could associate the Function with the distribution.</p>
<p>Creation and configuration of the CloudFront Function consist of the following steps:</p>
<h3 id="create-function">Create Function</h3>
<p>In the AWS Console, open CloudFront service and lick on the Functions on the left navigation bar, then click Create function button.
<img loading="lazy" src="create_function.png" alt=""  />

Enter the name of your Function (e.g., “security-headers”) and click Continue.</p>
<h3 id="build-function">Build Function</h3>
<p>On the function settings page, you will see four tabs with the four lifecycle steps: Build, Test, Publish, Associate.</p>
<p>Paste the function code into the editor and click “Save.”</p>
<p><img loading="lazy" src="function_editor.png" alt=""  />
</p>
<p>Here is the source code of the function:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#6ab825;font-weight:bold">function</span> handler(event) {
<span style="color:#6ab825;font-weight:bold">var</span> response = event.response;
<span style="color:#6ab825;font-weight:bold">var</span> headers = response.headers;

headers[<span style="color:#ed9d13">&#39;strict-transport-security&#39;</span>] = { value: <span style="color:#ed9d13">&#39;max-age=63072000; includeSubdomains; preload&#39;</span>}; 
headers[<span style="color:#ed9d13">&#39;content-security-policy&#39;</span>] = { value: <span style="color:#ed9d13">&#34;default-src &#39;none&#39;; img-src &#39;self&#39;; script-src &#39;self&#39;; style-src &#39;self&#39;; object-src &#39;none&#39;; frame-ancestors &#39;none&#39;&#34;</span>}; 
headers[<span style="color:#ed9d13">&#39;x-content-type-options&#39;</span>] = { value: <span style="color:#ed9d13">&#39;nosniff&#39;</span>}; 
headers[<span style="color:#ed9d13">&#39;x-xss-protection&#39;</span>] = {value: <span style="color:#ed9d13">&#39;1; mode=block&#39;</span>};
headers[<span style="color:#ed9d13">&#39;referrer-policy&#39;</span>] = {value: <span style="color:#ed9d13">&#39;same-origin&#39;</span>};
headers[<span style="color:#ed9d13">&#39;x-frame-options&#39;</span>] = {value: <span style="color:#ed9d13">&#39;DENY&#39;</span>};

<span style="color:#6ab825;font-weight:bold">return</span> response;
}
</code></pre></td></tr></table>
</div>
</div><h4 id="test-function">Test Function</h4>
<p>Open the “Test” tab — let’s try our function first before it becomes live!</p>
<p>Select Viewer Response event type and Development Stage, then select “Viewer response with headers” as a Sample test event (you will get a simple set of headers automatically).</p>
<p>Now click the blue “Test” button and observe the output results:</p>
<ul>
<li>Compute utilization represents the relative amount of time (on a scale between 0 and 100) your function took to run</li>
<li>Check the Response headers tab and take a look at how the function added custom headers.</li>
</ul>
<p><img loading="lazy" src="function_test.png" alt=""  />
</p>
<h3 id="publish-function">Publish Function</h3>
<p>Let’s publish our function. To do that, open the Publish tab and click on the blue button “Publish and update.”
<img loading="lazy" src="function_publish.png" alt=""  />
</p>
<h3 id="associate-your-function-with-cloudfront-distribution">Associate your Function with CloudFront distribution</h3>
<p>Now, you can associate the function with the CloudFront distribution.</p>
<p>To do so, open the Associate tab, select the distribution and event type (Viewer Response), and select the Cache behavior of your distribution which you want to use for the association.</p>
<p><img loading="lazy" src="function_associate.png" alt=""  />
</p>
<p>Once you associate the function with the CloudFront distribution, you can test it in live mode.</p>
<p>I will use curl here to demonstrate it:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">&gt; curl -i https://d30i87a4ss9ifz.cloudfront.net
HTTP/2 <span style="color:#3677a9">200</span>
content-type: text/html
content-length: <span style="color:#3677a9">140</span>
date: Sat, <span style="color:#3677a9">22</span> May <span style="color:#3677a9">2021</span> 00:22:18 GMT
last-modified: Tue, <span style="color:#3677a9">27</span> Apr <span style="color:#3677a9">2021</span> 23:07:14 GMT
etag: <span style="color:#ed9d13">&#34;a855a3189f8223db53df8a0ca362dd62&#34;</span>
accept-ranges: bytes
server: AmazonS3
via: 1.1 50f21cb925e6471490e080147e252d7d.cloudfront.net (CloudFront)
content-security-policy: default-src <span style="color:#ed9d13">&#39;none&#39;</span>; img-src <span style="color:#ed9d13">&#39;self&#39;</span>; script-src <span style="color:#ed9d13">&#39;self&#39;</span>; style-src <span style="color:#ed9d13">&#39;self&#39;</span>; object-src <span style="color:#ed9d13">&#39;none&#39;</span>; frame-ancestors <span style="color:#ed9d13">&#39;none&#39;</span>
strict-transport-security: max-age=63072000; includeSubdomains; preload
x-xss-protection: 1; <span style="color:#40ffff">mode</span>=block
x-frame-options: DENY
referrer-policy: same-origin
x-content-type-options: nosniff
x-cache: Miss from cloudfront
x-amz-cf-pop: WAW50-C1
x-amz-cf-id: ud3qH8rLs7QmbhUZ-DeupGwFhWLpKDSD59vr7uWC65Hui5m2U8o2mw==
</code></pre></td></tr></table>
</div>
</div><p>You can also test your results here — <a href="https://observatory.mozilla.org/">Mozilla Observatory</a></p>
<p><img loading="lazy" src="scan_result-1.png" alt=""  />

<img loading="lazy" src="scan_result-2.png" alt=""  />
</p>
<h2 id="read-more">Read more</h2>
<p>That was a simplified overview of the CloudFront Functions capabilities.</p>
<p>But if you want to get deeper, here is a couple of useful links to start:</p>
<ul>
<li>Another overview from AWS — <a href="https://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale">CloudFront Functions Launch Blog</a></li>
<li>More about creating, testing, updating and publishing of CloudFront Functions — <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html">Managing functions in CloudFront Functions - Amazon CloudFront</a></li>
</ul>
<h2 id="so-what-to-choose">So what to choose?</h2>
<p>CloudFront Functions are simpler than Lambda@Edge and run faster with minimal latency and minimal time penalty for your web clients.</p>
<p>Lambda@Edge takes more time to invoke, but it can run upon Origin Response event so that CloudFront can cache the processed response (including headers) and return it faster afterward.</p>
<p>But again, the CloudFront Functions invocations are much cheaper (6x times) than Lambda@Edge, and you do not pay for the function execution duration.</p>
<p>The final decision would also depend on the dynamic/static nature of the content you have at your origin.</p>
<p>To make a wise and deliberate decision, try to analyze your use case using these two documentation articles:</p>
<ul>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/edge-functions.html">Choosing between CloudFront Functions and Lambda@Edge</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-how-to-choose-event.html">How to Decide Which CloudFront Event to Use to Trigger a Lambda Function</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Using TinyPNG Image Compression From MacOS Finder Contextual Menu</title>
      <link>https://serhii.vasylenko.info/2021/02/14/image-compression-with-tinypng-from-macos-contextual-menu.html</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/02/14/image-compression-with-tinypng-from-macos-contextual-menu.html</guid>
      <description>How to add TinyPNG image compression to your macOS Finder contextual menu</description>
      <content:encoded><![CDATA[<p>I just wanted to compress one image, but went to far&hellip;</p>
<p>or &ldquo;How to add TinyPNG image compression to your macOS Finder contextual menu.&rdquo;</p>
<h1 id="what-is-it-and-how-it-works">What is it and how it works</h1>
<p>You select needed files or folders, then right-click on them, click on the Services menu item and choose TinyPNG.</p>
<p>After a moment, the new optimized versions of images will appear near to original files.</p>
<p>If you selected a folder along with the files, the script would process all <code>png</code> and <code>jpeg</code> files in it.</p>
<p><img loading="lazy" src="context_menu_full_compressed.gif" alt=""  />
</p>
<h1 id="prerequisites">Prerequisites</h1>
<p>You need to register at TinyPNG and get your API key here — <a href="https://tinypng.com/developers">Developer API</a>.</p>
<p>They sometimes block some countries (for example, Ukraine) from registration; in that case, try to use a web-proxy or VPN.</p>
<h1 id="how-to-create-quick-action-workflow">How to create Quick Action Workflow</h1>
<p>Open Automator application. If you never used this app before, please read about it on the official <a href="https://support.apple.com/guide/automator/create-a-workflow-aut7cac58839/2.10/mac/11.0">user guide website</a>.</p>
<p>On the New Action screen, chose <strong>Quick Action</strong></p>
<p><img loading="lazy" src="quick_action_compressed.png" alt=""  />
</p>
<p>After you click the &ldquo;Choose&rdquo; button, you&rsquo;ll see the workflow configuration window.</p>
<h1 id="workflow-configuration">Workflow configuration</h1>
<p>Find the <strong>Run Shell Script</strong> action on the Utilities list in Library on the left, and drag it onto the right side of the panel.</p>
<p>Set the following workflow configuration options as described below:</p>
<p><strong>Workflow receives current</strong> <code>files and folders</code> <strong>in</strong> <code>Finder</code></p>
<p><strong>Shell</strong> <code>/bin/zsh</code></p>
<p><strong>Pass input</strong> <code>as arguments</code></p>
<p>Click the <strong>Option</strong> button at the bottom of the Action window and <strong>Uncheck</strong> <code>Show this action when the workflow runs.</code></p>
<p><img loading="lazy" src="run_shell_script_compressed.png" alt=""  />
</p>
<p>Put the following script into the <strong>Run Shell Script</strong> window, replacing the <em>YOUR_API_KEY_HERE</em> string with your API key obtained from TinyPNG.</p>
<p>{% gist 13cb423aa83265e79ac5ad900195603f %}</p>
<h2 id="utilities-used-in-the-script--explained">Utilities used in the script — explained</h2>
<p><code>curl</code> — used to make web requests (like your browser does)</p>
<p><code>grep</code> — used to parse the response for the needed header (i.e., field) with the file download link</p>
<p><code>cut</code> — used to extract the URL from the parsed result</p>
<p><code>sed</code> — used to remove the trailing &ldquo;carriage return&rdquo; symbol at the end of extracted string</p>
<p>The response body also contains a JSON object that includes the download URL; you can parse it with <code>jq</code>, for example. But I intentionally refused to use the <code>jq</code> tool because it is not pre-installed in MacOS.</p>
<h1 id="conclusion">Conclusion</h1>
<p>It is simple, and it does its job fine. And you don&rsquo;t need to install anything to make it work.</p>
<p>To make this a bit fancier, you might also like to add a &ldquo;Display Notification&rdquo; (from the Utilities library on the left) after the &ldquo;Run Shell Script&rdquo;. The action will display a notification once image processing is completed.</p>
<p>Thank you for reading!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Customizing mac1.metal EC2 AMI — new guts, more glory</title>
      <link>https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html</guid>
      <description>How to build mac1.metal Instance AMI for CI/CD using Ansible and Packer</description>
      <content:encoded><![CDATA[<p>I guess macOS was designed for a user, not for the ops or engineers, so this is why its customization and usage for CI/CD are not trivial (compared to something Linux-based). A smart guess, huh?</p>
<h1 id="configuration-management">Configuration Management</h1>
<p>Native Apple&rsquo;s Mobile device management (a.k.a MDM) and Jamf is probably the most potent combination for macOS configuration. But as much as it&rsquo;s mighty, it is a cumbersome combination, and Jamf is not free.</p>
<p>Then we have Ansible, Chef, Puppet, SaltStack — they all are good with Linux, but what about macOS?</p>
<p>I tried to search for use cases of mentioned CM tools for macOS. However, I concluded that they wrap the execution of native macOS command-line utilities most of the time.</p>
<p>And if you search for the &lsquo;macos&rsquo; word in Chef Supermarket or Puppet Forge, you won&rsquo;t be impressed by the number of actively maintained packages. Although, here is a motivating article about using Chef <a href="https://pspdfkit.com/blog/2016/chef-on-macos/">automating-macos-provisioning-with-chef</a> if you prefer it. I could not find something similar and fresh for Puppet, so I am sorry, Puppet fans.</p>
<p>That is why I decided to follow the KISS principle and chose Ansible.</p>
<p>It&rsquo;s easy to write and read the configuration, it allows to group tasks and to add execution logic <del>, and it feels more DevOps executing shell commands inside Ansible tasks instead of shell scripts; I know you know that 😂</del></p>
<p>By the way, Ansible Galaxy does not have many management packages for macOS, either. But thankfully, it has the basics:</p>
<ul>
<li><a href="https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_module.html#ansible-collections-community-general-homebrew-module">homebrew</a> with <a href="https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_cask_module.html#ansible-collections-community-general-homebrew-cask-module">homebrew_cask</a> and <a href="https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_tap_module.html#ansible-collections-community-general-homebrew-tap-module">homebrew_tap</a> — to install software</li>
<li><a href="https://docs.ansible.com/ansible/latest/collections/community/general/launchd_module.html#ansible-collections-community-general-launchd-module">launchd</a> — to manage services</li>
<li><a href="https://docs.ansible.com/ansible/latest/collections/community/general/osx_defaults_module.html#ansible-collections-community-general-osx-defaults-module">osx_defaults</a> — to manage some user settings (not all!)</li>
</ul>
<p>I used Ansible to build the macOS AMI for CI/CD, so here are some tips for such a case.</p>
<p><em>Some values are hardcoded intentionally in the code examples for the sake of simplicity and easy reading. You would probably want to parametrize them.</em></p>
<h2 id="xcode-installation-example">Xcode installation example</h2>
<p>The following tasks will help you to automate the basics.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Install Xcode<span style="color:#666">
</span><span style="color:#666">      </span><span style="color:#6ab825;font-weight:bold">shell</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;xip --expand Xcode.xip&#34;</span><span style="color:#666">
</span><span style="color:#666">      </span><span style="color:#6ab825;font-weight:bold">args</span>:<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">chdir</span>:<span style="color:#666"> </span>/Applications<span style="color:#666">
</span><span style="color:#666">
</span><span style="color:#666"></span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Accept License Agreement<span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">shell</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -license accept&#34;</span><span style="color:#666">
</span><span style="color:#666">
</span><span style="color:#666"></span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Accept License Agreement<span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">shell</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -runFirstLaunch&#34;</span><span style="color:#666">
</span><span style="color:#666">
</span><span style="color:#666"></span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Switch into newly installed Xcode context<span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">shell</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;xcode-select --switch /Applications/Xcode.app/Contents/Developer&#34;</span><span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><h2 id="example-of-software-installation-with-brew">Example of software installation with Brew</h2>
<p>{% raw %}</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Install common build software<span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">community.general.homebrew</span>:<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;{{ item }}&#34;</span><span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">state</span>:<span style="color:#666"> </span>latest<span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">loop</span>:<span style="color:#666">
</span><span style="color:#666">    </span>- swiftlint<span style="color:#666">
</span><span style="color:#666">    </span>- swiftformat<span style="color:#666">
</span><span style="color:#666">    </span>- wget<span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>{% endraw %}</p>
<h2 id="screensharing-remote-desktop-configuration-example">ScreenSharing (remote desktop) configuration example</h2>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Turn On Remote Management<span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">shell</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;./kickstart -activate -configure -allowAccessFor -specifiedUsers&#34;</span><span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">args</span>:<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">chdir</span>:<span style="color:#666"> </span>/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/<span style="color:#666">
</span><span style="color:#666">
</span><span style="color:#666"></span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Enable Remote Management for CI user<span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">shell</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;./kickstart -configure -users ec2-user -access -on -privs -all&#34;</span><span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">args</span>:<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">chdir</span>:<span style="color:#666"> </span>/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/<span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>Shell rulez, yes.</p>
<h1 id="building-the-ami">Building the AMI</h1>
<p><img loading="lazy" src="ami-build.gif" alt=""  />
</p>
<p><a href="https://www.packer.io/docs/builders/amazon/ebs">Packer by HashiCorp</a>, of course.</p>
<p>I would love to compare Packer with EC2 Image Builder, but it <a href="https://docs.aws.amazon.com/imagebuilder/latest/userguide/what-is-image-builder.html#image-builder-os">does not support macOS</a> yet (as of Feb'21).</p>
<p>Packer configuration is straightforward, so I want to highlight only the things specific to the &ldquo;mac1.metal&rdquo; use case.</p>
<h2 id="timeouts">Timeouts</h2>
<p>As I mentioned in the <a href="https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html">previous article</a>, the creation and deletion time of the &ldquo;mac1.metal&rdquo; Instance is significantly bigger than Linux. That is why you should raise the polling parameters for the builder.</p>
<p>Example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#ed9d13">&#34;aws_polling&#34;</span><span style="color:#a61717;background-color:#e3d2d2">:</span> {
        <span style="color:#6ab825;font-weight:bold">&#34;delay_seconds&#34;</span>: <span style="color:#3677a9">30</span>,
        <span style="color:#6ab825;font-weight:bold">&#34;max_attempts&#34;</span>: <span style="color:#3677a9">60</span>
}
</code></pre></td></tr></table>
</div>
</div><p>And it would be best if you also increased the SSH timeout:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">  <span style="color:#ed9d13">&#34;ssh_timeout&#34;</span><span style="color:#a61717;background-color:#e3d2d2">:</span> <span style="color:#ed9d13">&#34;1h&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>Fortunately, Packer&rsquo;s AMI builder does not require an explicit declaration of the Dedicated Host ID. So you can just reference the same subnet where you allocated the Host, assuming you did it with the enabled &ldquo;Auto placement&rdquo; parameter during the host creation.</p>
<p>Example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">  <span style="color:#ed9d13">&#34;tenancy&#34;</span><span style="color:#a61717;background-color:#e3d2d2">:</span> <span style="color:#ed9d13">&#34;host&#34;</span><span style="color:#a61717;background-color:#e3d2d2">,</span>
  <span style="color:#ed9d13">&#34;subnet_id&#34;</span><span style="color:#a61717;background-color:#e3d2d2">:</span> <span style="color:#ed9d13">&#34;your-subnet-id&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="provisioning">Provisioning</h2>
<p>Packer has <a href="https://www.packer.io/docs/provisioners/ansible">Ansible Provisioner</a> that I used for the AMI. Its documentation is also very clean and straightforward.</p>
<p>But it is still worth mentioning that if you want to parametrize the Ansible playbook, then the following configuration example will be handy:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">  <span style="color:#ed9d13">&#34;extra_arguments&#34;</span><span style="color:#a61717;background-color:#e3d2d2">:</span> [
    <span style="color:#ed9d13">&#34;--extra-vars&#34;</span>,
    <span style="color:#ed9d13">&#34;your-variable-foo=your-value-bar]&#34;</span>
  ]<span style="color:#a61717;background-color:#e3d2d2">,</span>
  <span style="color:#ed9d13">&#34;ansible_env_vars&#34;</span><span style="color:#a61717;background-color:#e3d2d2">:</span> [
    <span style="color:#ed9d13">&#34;ANSIBLE_PYTHON_INTERPRETER=auto_legacy_silent&#34;</span>,
    <span style="color:#ed9d13">&#34;ANSIBLE_OTHER_ENV_VARIABLE=other_value&#34;</span>
  ]
</code></pre></td></tr></table>
</div>
</div><h1 id="configuration-at-launch">Configuration at launch</h1>
<p>If you&rsquo;re familiar with AWS EC2, you probably know what the Instance <code>user data</code> is.</p>
<p>A group of AWS developers made something similar for the macOS: <a href="https://github.com/aws/ec2-macos-init">EC2 macOS Init</a>.</p>
<p>It does not support <code>cloud-init</code> as on Linux-based Instances, but it can run shell scripts, which is quite enough.</p>
<p>EC2 macOS Init utility is a Launch Daemon (macOS terminology) that runs on behalf of the <code>root</code> user at system boot. It executes the commands according to the so-called Priority Groups, or the sequence in other words.</p>
<p>The number of the group corresponds to the execution order. You can put several tasks into a single Priority Group, and the tool will execute them simultaneously.</p>
<p>EC2 macOS Init uses a human-readable configuration file in <code>toml</code> format.</p>
<p>Example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">[[Module]]
  Name = &#34;Create-some-folder&#34;
  PriorityGroup = 3
  FatalOnError = false 
  RunPerInstance = true 
  [Module.Command]
    Cmd = [&#34;mkdir&#34;, &#34;/Users/ec2-user/my-directory&#34;] 
    RunAsUser = &#34;ec2-user&#34;
    EnvironmentVars = [&#34;MY_VAR_FOO=myValueBar&#34;]
</code></pre></td></tr></table>
</div>
</div><p>I should clarify some things here.</p>
<p>Modules — a set of pre-defined modules for different purposes. It is something similar to the Ansible modules.</p>
<p>You can find the list of available modules here <a href="https://github.com/aws/ec2-macos-init/tree/master/lib/ec2macosinit">ec2-macos-init/lib/ec2macosinit</a></p>
<p>The <code>RunPerInstance</code> directive controls whether a module should run. There are three of such directives, and here is what they mean:</p>
<ul>
<li><code>RunPerBoot</code> — module will run at every system boot</li>
<li><code>RunPerInstance</code> — module will run once for the Instance. Each Instance has a unique ID; the init tool fetches it from the AWS API before the execution and keeps its execution history per Instance ID. When you create a new Instance from the AMI, it will have a unique ID, and the module will run again.</li>
<li><code>RunOnce</code> — module will run only once, despite the instance ID change</li>
</ul>
<p>I mentioned the execution history above. When EC2 macOS Init runs on the Instance first time, it creates a unique directory with the name per Instance ID to store the execution history and user data copy.</p>
<p><code>RunPerInstance</code> and <code>RunOnce</code> directives depend on the execution history, and modules with those directives will run again on the next boot if the previous execution failed. It was not obvious to me why RunOnce keeps repeating itself every boot until I dug into <a href="https://github.com/aws/ec2-macos-init/blob/master/lib/ec2macosinit/module.go#L110">the source code</a>.</p>
<p>Finally, there is a module for user data. It runs at the end by default (priority group #4) and pulls the user data script from AWS API before script execution.</p>
<p>I suggest looking into the default <a href="https://github.com/aws/ec2-macos-init/blob/master/configuration/init.toml">init.toml</a> configuration file to get yourself more familiar with the capabilities of the tool.</p>
<p>The init tool can also clear its history, which is useful for the new AMI creation.</p>
<p>Example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ec2-macos-init clean -all
</code></pre></td></tr></table>
</div>
</div><p>And you can run the init manually for debugging purposes.</p>
<p>Example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ec2-macos-init run
</code></pre></td></tr></table>
</div>
</div><p>You can also combine the EC2 macOS Init actions (made by modules) with your script in user data for more accurate nontrivial configurations.</p>
<h1 id="wrapping-up">Wrapping up</h1>
<p>As a whole, building and operating macOS-based AMI does not differ from AMI management for other platforms.</p>
<p>There are the same principle stages: prepare, clear, build, execute deployment script (if necessary). Though, the particular implementation of each step has its nuances and constraints.</p>
<p>So the whole process may look as follows:</p>
<ul>
<li>Provision and configure needed software with Ansible playbook</li>
<li>Clean-up system logs and EC2 macOS Init history (again, with Ansible task)</li>
<li>Create the AMI</li>
<li>Add more customizations at launch with EC2 macOS Init modules and user data (that also executes your Ansible playbook or shell commands)</li>
</ul>
<p>Getting into all this was both fun and interesting. Sometimes painful, though. 😆</p>
<p>I sincerely hope this article was helpful to you. Thank you for reading!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Terraforming mac1.metal at AWS</title>
      <link>https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html</guid>
      <description>How to manage mac1.metal EC2 instances with Terraform</description>
      <content:encoded><![CDATA[<div class="updatenotice">
    Updated on the 23rd of October, 2021: Terraform AWS provider now <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ec2_host">supports</a> Dedicated Hosts natively
</div>
<p>In November 2021, AWS <a href="https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/">announced</a> the support for Mac mini instances.</p>
<p>I believe this is huge, even despite the number of constraints this solution has. This offering opens the door to seamless macOS CI/CD integration into existing AWS infrastructure.</p>
<p>So here is a quick-start example of creating the dedicated host and the instance altogether using Terraform.</p>
<p>I intentionally used some hardcoded values for the sake of simplicity in the example.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">28
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_ec2_host&#34; &#34;example_host&#34;</span> {
  instance_type     = <span style="color:#ed9d13">&#34;mac1.metal&#34;</span>
  availability_zone = <span style="color:#ed9d13">&#34;us-east-1a&#34;</span>
}

<span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;example_instance&#34;</span> {
  ami           = <span style="color:#6ab825;font-weight:bold">data</span>.<span style="color:#6ab825;font-weight:bold">aws_ami</span>.<span style="color:#6ab825;font-weight:bold">mac1metal</span>.<span style="color:#6ab825;font-weight:bold">id</span>
  host_id       = <span style="color:#6ab825;font-weight:bold">aws_ec2_host</span>.<span style="color:#6ab825;font-weight:bold">example_host</span>.<span style="color:#6ab825;font-weight:bold">id</span>
  instance_type = <span style="color:#ed9d13">&#34;mac1.metal&#34;</span>
  subnet_id     = <span style="color:#6ab825;font-weight:bold">data</span>.<span style="color:#6ab825;font-weight:bold">aws_subnet</span>.<span style="color:#6ab825;font-weight:bold">example_subnet</span>.<span style="color:#6ab825;font-weight:bold">id</span>
}

<span style="color:#6ab825;font-weight:bold">data</span> <span style="color:#ed9d13">&#34;aws_subnet&#34; &#34;example_subnet&#34;</span> {
  availability_zone = <span style="color:#ed9d13">&#34;us-east-1a&#34;</span>
  <span style="color:#6ab825;font-weight:bold">filter</span> {
    name   = <span style="color:#ed9d13">&#34;tag:Tier&#34;</span><span style="color:#999;font-style:italic"> # you should omit this filter if you don&#39;t distinguish your subnets on private and public 
</span><span style="color:#999;font-style:italic"></span>    values = [<span style="color:#ed9d13">&#34;private&#34;</span>]
  }
}

<span style="color:#6ab825;font-weight:bold">data</span> <span style="color:#ed9d13">&#34;aws_ami&#34; &#34;mac1metal&#34;</span> {
  owners      = [<span style="color:#ed9d13">&#34;amazon&#34;</span>]
  most_recent = <span style="color:#6ab825;font-weight:bold">true</span>
  <span style="color:#6ab825;font-weight:bold">filter</span> {
    name   = <span style="color:#ed9d13">&#34;name&#34;</span>
    values = [<span style="color:#ed9d13">&#34;amzn-ec2-macos-11*&#34;</span>]<span style="color:#999;font-style:italic"> # get latest BigSur AMI
</span><span style="color:#999;font-style:italic"></span>  }
}
</code></pre></td></tr></table>
</div>
</div><p>Simple as that, yes. Now, you can integrate it into your CI system and have the Mac instance with the underlying host in a bundle.</p>
<p>💡 Pro tip: you can leverage the <code>aws_ec2_instance_type_offerings</code> <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ec2_instance_type_offerings">Data Source</a> and use its output with <code>aws_subnet</code> source to avoid availability zone hardcoding.</p>
<p>To make the code more uniform and reusable, you can wrap it into a <a href="https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html">Terraform module</a> that accepts specific parameters (such as <code>instance_type</code> or <code>availability_zone</code>) as input variables.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>mac1.metal EC2 Instance — user experience</title>
      <link>https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html</guid>
      <description>An overview of one-month user experience with the new mac1.metal EC2 Instances from AWS</description>
      <content:encoded><![CDATA[<h2 id="amazon-ec2-mac-instances">Amazon EC2 Mac Instances</h2>
<p>Something cool and powerful with inevitable trade-offs. As everything in this world.</p>
<p>AWS announced EC2 macOS-based instances on the 30th of November 2020, and after more than a month of tests, I would like to share some findings and impressions about it.</p>
<p>First of all, the things you can easily find, but it&rsquo;s still worth to say:</p>
<ul>
<li>The new instance family is called <code>mac1.metal</code>. Guess we should expect mac2 or mac3; otherwise, why did they put a number in the name?</li>
<li>They added <a href="https://aws.amazon.com/ec2/nitro/">AWS Nitro System</a> to integrate them with many AWS services.</li>
<li>The Instance must be placed onto a <a href="https://aws.amazon.com/ec2/dedicated-hosts/">Dedicated Host</a>. Only one Instance per Host is allowed because the Host is an actual Mac Mini in that case.</li>
<li>You don&rsquo;t pay anything for the Instance itself, but you pay for the Dedicated Host leasing — $1.083, and the minimum lease time is 24 hours. So the launch of the &ldquo;mac1.metal&rdquo; Instance costs $26 at minimum. Prices provided for the cheapest region — North Virginia.</li>
<li>You can apply <a href="https://docs.aws.amazon.com/savingsplans/latest/userguide/what-is-savings-plans.html">Saving Plans</a> to save some money.</li>
<li>Mojave (10.14) and Catalina (10.15) are supported at the moment, with <a href="https://aws.amazon.com/ec2/instance-types/mac/">&ldquo;support for macOS Big Sur (11.0) coming soon&rdquo;</a>. I expect it to be in 2021, though.</li>
</ul>
<h2 id="what-can-it-do">What can it do</h2>
<p>Here is a list of some features that the &ldquo;mac1.metal&rdquo; instance has:</p>
<ul>
<li>It lives in your VPC because it is an EC2 Instance so that you can access many other services.</li>
<li>It supports the new gp3 EBS type (and other types as well).</li>
<li>It supports SSM Agent and Session Manager.</li>
<li>It has several AWS tools pre-installed.</li>
<li>It has pre-installed Enhanced Network Interface drivers. My test upload/download to S3 was about 300GB/s.</li>
<li>It can report CPU metrics to CloudWatch (if you ever need it, though).</li>
</ul>
<h2 id="what-cant-it-do">What can&rsquo;t it do</h2>
<ul>
<li>It can&rsquo;t be used in Auto Scaling because of a Dedicated Host.</li>
<li>It can&rsquo;t recognize the attached EBS if you connected it while the Instance was running — you must reboot the Instance to make it visible.</li>
<li>It does not support several services that rely on additional custom software, such as &ldquo;EC2 Instance Connect&rdquo; and &ldquo;AWS Inspect.&rdquo; But I think that AWS will add macOS distros for those soon.</li>
</ul>
<h2 id="launching-the-instance">Launching the Instance</h2>
<p>Jeff Bar <a href="https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/">published</a> an excellent how-to about kickstart of the &ldquo;mac1.metal&rdquo;, so I will focus on things he did not mention.</p>
<p>Once you allocated the Dedicated Host and launched an Instance on it, the underlying system connects the EBS with a root file system to the Mac Mini.</p>
<p>It is an AMI with 32G EBS (as per Jan'21) with macOS pre-installed.</p>
<p>That means two things:</p>
<ul>
<li>The built-it physical SSD is still there and still yours to use; however, AWS does not manage or support the Apple hardware&rsquo;s internal SSD.</li>
<li>You must resize the disk manually (if you specified the EBS size to be more than 32G)[1].</li>
</ul>
<p>The time from the Instance launch till you&rsquo;re able to SSH into it varies between 15 and 20 minutes.</p>
<p>You have the option to access it over SSH with your private key. If you need to set up Screen Sharing, you have to allow it through the &ldquo;kickstart&rdquo; command-line utility and setting the user password [2].</p>
<h2 id="destroying-the-instance">Destroying the Instance</h2>
<p>What an easy thing to do, right? Well, it depends.</p>
<p>When you click on the &ldquo;Terminate&rdquo; item in the Instance actions menu, the complex Instance scrubbing process begins.</p>
<p>AWS wants to make sure that anyone who uses the Host (Mac mini) after you will get your data stored neither on disks (including physical SSD mentioned earlier), nor inside memory or NVRAM, nor anywhere else. They do not share the info about this scrubbing process&rsquo;s details, but it takes more than an hour to complete.</p>
<p>When scrubbing is started, the Dedicated Host transitions to the Pending state. Dedicated Host transitions to Available state once scrubbing is finished. But you must wait for another 10-15 minutes to be able to release it finally.</p>
<p>I don&rsquo;t know why they set the Available state value earlier than the Host is available for operations, but this is how it works now (Jan'21).</p>
<p>Therefore, you can launch the next Instance on the same Host not earlier than ~1,5 hours after you terminated the previous. That doesn&rsquo;t seem very pleasant in the first couple of weeks, but you will get used to it. 😄</p>
<p>And again: you can release the &ldquo;mac1.metal&rdquo; Dedicated Host not earlier than 24 hours after it was allocated. So plan your tests wisely.</p>
<h2 id="legal-things">Legal things</h2>
<p>I could not find it on a documentation page, but A Cloud Guru folks <a href="https://acloudguru.com/blog/engineering/what-you-need-to-know-about-awss-new-ec2-mac-instances">say</a> that you must use new Instances solely for developer services, and you must agree to all of the EULAs.</p>
<p>Sounds reasonable to me, but that could be written somewhere in the docs still, at least. Please let me know if you found it there.</p>
<h2 id="some-more-cool-stuff-to-check">Some more cool stuff to check:</h2>
<p><a href="https://github.com/aws/ec2-macos-init">EC2 macOS Init</a> launch daemon, which is used to initialize Mac instances.
<a href="https://github.com/aws/homebrew-aws">EC2 macOS Homebrew Tap</a> (Third-Party Repository) with several management tools which come pre-installed into macOS AMI from AWS.</p>
<hr>
<p>Indeed it is powerful, and it has its trade-offs, such as price and some technical constraints. But it is a real MacOS device natively integrated into the AWS environment. So I guess it worth to be tried!</p>
<p>Thanks for reading this! Stay tuned for more user experience feedback about baking custom AMI&rsquo;s, automated software provisioning with Ansible, and other adventures with mac1.metal!</p>
<hr>
<p><strong>[1] How to resize the EBS at mac1.metal in Terminal</strong></p>
<p>Get the identifier of EBS (look for the first one with GUID_partition_scheme):</p>
<p><code>diskutil list physical external</code></p>
<p>Or here is a more advanced version to be used in a script:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#40ffff">DISK_ID</span>=<span style="color:#6ab825;font-weight:bold">$(</span>diskutil list physical external | grep <span style="color:#ed9d13">&#39;GUID_partition_scheme&#39;</span>| tr -s <span style="color:#ed9d13">&#39; &#39;</span> | cut -d<span style="color:#ed9d13">&#39; &#39;</span> -f6<span style="color:#6ab825;font-weight:bold">)</span>
</code></pre></td></tr></table>
</div>
</div><p>It would probably be <code>disk0</code> if you did not attach additional EBS.</p>
<p>Then run the repair job for the disk, using its identifier:
<code>diskutil repairDisk disk0</code></p>
<p>Advanced version:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yes | diskutil repairDisk <span style="color:#40ffff">$DISK_ID</span>
</code></pre></td></tr></table>
</div>
</div><p>Now get the APFS container identifier (look for Apple_APFS):
<code>diskutil list physical external</code></p>
<p>Advanced version:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#40ffff">APFS_ID</span>=<span style="color:#6ab825;font-weight:bold">$(</span>diskutil list physical external | grep <span style="color:#ed9d13">&#39;Apple_APFS&#39;</span> | tr -s <span style="color:#ed9d13">&#39; &#39;</span> | cut -d<span style="color:#ed9d13">&#39; &#39;</span> -f8<span style="color:#6ab825;font-weight:bold">)</span>
</code></pre></td></tr></table>
</div>
</div><p>It would probably be <code>disk0s2</code> if you did not attach additional EBS.</p>
<p>Finally, resize the APFS container:
<code>diskutil apfs resizeContainer disk0s2</code></p>
<p>Advanced version</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">diskutil apfs resizeContainer <span style="color:#40ffff">$APFS_ID</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>[2]How to setup Screen Sharing at mac1.metal in Terminal</strong></p>
<p>The <code>kickstart</code> command-line tool resides in <code>/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/</code> so you&rsquo;ll better to cd into that directory for convenience:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#999;font-style:italic"># Turn On Remote Management for a user to be specified later</span>
sudo ./kickstart -activate -configure -allowAccessFor -specifiedUsers

<span style="color:#999;font-style:italic"># Enable Remote Management for ec2-user user</span>
sudo ./kickstart -configure -users ec2-user -access -on -privs -all

<span style="color:#999;font-style:italic"># Set the user password </span>
sudo passwd ec2-user
</code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>AWS CloudShell</title>
      <link>https://serhii.vasylenko.info/2020/12/16/aws-cloudshell.html</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/12/16/aws-cloudshell.html</guid>
      <description>Native and official way to run AWS CLI in a browser</description>
      <content:encoded><![CDATA[<p>A simple but cool announcement from AWS — <a href="https://aws.amazon.com/cloudshell/">AWS CloudShell</a>.
A tool for ad-hoc AWS management via CLI directly in your browser.</p>
<p>I like when AWS releases something simple to understand and yet powerful.<br>
So it is not another <a href="https://aws.amazon.com/devops-guru/">DevOps Guru</a>, believe me :)</p>
<ul>
<li>Yes, this is similar to the shells that GCE and Azure have.</li>
<li>No, you can’t access your instances from it, so it’s not a jump server (bastion host).</li>
<li>Yes, it has AWS CLI and other tools pre-installed. Even Python and Node.js.</li>
<li>No, you can’t (well, you can, but should not) use it as an alternative to the day-to-day console on your laptop.</li>
<li>Yes, you can manage all resources from that shell as much as your IAM permissions allow you (even with SSO, which is pretty cool).</li>
<li>No, it does not support Docker.</li>
<li>Yes, you have 1 GB of permanent storage and the ability to transfer files in and out.</li>
</ul>
<h5 id="more-yes-and-nos-here">More Yes and No’s here:</h5>
<p><a href="https://docs.aws.amazon.com/cloudshell/latest/userguide/faq-list.html">https://docs.aws.amazon.com/cloudshell/latest/userguide/faq-list.html</a></p>
<p><a href="https://aws.amazon.com/cloudshell/faqs/">https://aws.amazon.com/cloudshell/faqs/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Terraform Workflow — Working Individually and in a Team</title>
      <link>https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.html</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.html</guid>
      <description>An overview of best practices for working with Terraform individually or in a team</description>
      <content:encoded><![CDATA[<p>The work with Terraform code may become tangled sometimes. Here are some guides on how to streamline it and make it transparent for you and your team.</p>
<p>It is extremely helpful in a team, and can benefit you even if you work individually. A good workflow enables you to streamline a process, organize it, and make it less error-prone.</p>
<p>This article summaries several approaches when working with Terraform, both individually and in a team. I tried to gather the most common ones, but you might also want to develop your own.</p>
<p>The common requirement for all of them is a version control system (such as Git). This is how you ensure nothing is lost and all your code changes are properly versioned tracked.</p>
<p>Table of contents:</p>
<ul>
<li><a href="#basic-concepts">Basic Concepts</a></li>
<li><a href="#core-individual-workflow">Core individual workflow</a></li>
<li><a href="#core-team-workflow">Core team workflow</a></li>
<li><a href="#team-workflow-with-automation">Team workflow with automation</a></li>
<li><a href="#import-workflow">Import workflow</a></li>
</ul>
<h1 id="basic-concepts">Basic Concepts</h1>
<p>Let’s define the basic actions first.</p>
<p>All described workflows are built on top of three key steps: Write, Plan, and Apply. Nevertheless, their details and actions vary between workflows.</p>
<p><img loading="lazy" src="tf-workflow.png" alt=""  />

<em>It&rsquo;s a piece of cake, isn&rsquo;t it? 😆</em></p>
<p><strong>Write</strong> – this is where you make changes to the code.</p>
<p><strong>Plan</strong> – this is where you review changes and decide whether to accept them.</p>
<p><strong>Apply</strong> – this is where you accept changes and apply them against real infrastructure.</p>
<p>It&rsquo;s a simple idea with a variety of possible implementations.</p>
<h1 id="core-individual-workflow">Core individual workflow</h1>
<p>This is the most simple workflow if you work alone on a relatively small TF project. This workflow suits both local and remote backends well.</p>
<p><img loading="lazy" src="tf-workflow-individual.png" alt=""  />

<em>Let&rsquo;s add a bit of Git</em></p>
<h3 id="write">Write</h3>
<p>You clone the remote code repo or pull the latest changes, edit the configuration code, then run the <code>terraform validate</code> and <code>terraform fmt</code> commands to make sure your code works well.</p>
<h3 id="plan">Plan</h3>
<p>This is where you run the <code>terraform plan</code> command to make sure that your changes do what you need. This is a good time to commit your code changes changes (or you can do it in the next step).</p>
<h3 id="apply">Apply</h3>
<p>This is when you run <code>terraform apply</code> and introduce the changes to real infrastructure objects. Also, this is when you push committed changes to the remote repository.</p>
<h1 id="core-team-workflow">Core team workflow</h1>
<p>This workflow is good for when you work with configuration code in a team and want to use feature branches to manage the changes accurately.</p>
<p><img loading="lazy" src="tf-core-workflow-team.png" alt=""  />

<em>Don&rsquo;t get scared, it is still simple, just follow the lines</em></p>
<h3 id="write-1">Write</h3>
<p>Start by checking out a new branch, make your changes, and run the <code>terraform validate</code> and <code>terraform fmt</code> commands to make sure your code works well.</p>
<p>Running <code>terraform plan</code> at this step will help ensure that you&rsquo;ll get what you expect.</p>
<h3 id="plan-1">Plan</h3>
<p>This is where code and plan reviews happen.</p>
<p>Add the output of the <code>terraform plan</code> command to the Pull Request with your changes. It would be a good idea to add only the changed parts of the common output, which is the part that starts with &ldquo;Terraform will perform the following actions&rdquo; string.</p>
<h3 id="apply-1">Apply</h3>
<p>Once the PR is reviewed and merged to the upstream branch, it is safe to finally pull the upstream branch locally and apply the configuration with <code>terraform apply</code>.</p>
<h1 id="team-workflow-with-automation">Team workflow with automation</h1>
<p>In a nutshell, this workflow allows you to introduce a kind of smoke test for your infrastructure code (using <code>plan</code>) and also to automate the feedback in the CI process.</p>
<p>The automated part of this workflow consists of a speculative plan on commit and/or Pull Request (PR ), along with adding the output of <code>plan</code> to the comment of the PR. A speculative plan mean just to show the changes, and not apply them afterward.</p>
<p><img loading="lazy" src="tf-workflow-team-automation-1.png" alt=""  />

<em>I like when TF plan output is included to PR, but nobody likes to read others TF plans for some reason&hellip;</em></p>
<h3 id="write-2">Write</h3>
<p>This step is the same as in the previous workflow.</p>
<h3 id="plan-2">Plan</h3>
<p>This is where your CI tool does its job.</p>
<p>Let’s review this step by step:</p>
<ol>
<li>You create a PR with the code changes you wish to implement.</li>
<li>The CI pipeline is triggered by an event from your code repository (such as webhook push) and it runs a speculative plan against your code.</li>
<li>The list of changes (a so-called &ldquo;plan diff&rdquo;) is added to PR for review by the CI.</li>
<li>Once merged, the CI pipeline runs again and you get the final plan that&rsquo;s ready to be applied to the infrastructure.</li>
</ol>
<h3 id="apply-2">Apply</h3>
<p>Now that you have a branch (i.e. main) with the fresh code to apply, you need to pull it locally and run <code>terraform apply</code>.</p>
<p>You can also add the automated apply here – step 5 in the picture below. This may be very useful for disposable environments such as testing, staging, development, and so on.</p>
<p>The exact CI tool to be used here is up to you: Jenkins, GitHub Actions, and Travis CI all work well.</p>
<p>An important thing to note is that the CI pipeline must be configured in a bi-directional way with your repository to get the code from it and report back with comments to PR.</p>
<p>As an option, you may consider using Terraform Cloud which has a lot of functionality, including the above mentioned repo integration, even with the free subscription.</p>
<p>If you have never worked with Terraform Cloud before and want to advice to get started, I&rsquo;ll provide the links at the end of this article.</p>
<h1 id="import-workflow">Import workflow</h1>
<p>This workflow refers to a situation when you have some objects already created (i.e., up and running), and you need to manage them with Terraform.</p>
<p>Suppose we already have an S3 bucket in AWS called &ldquo;someassetsbucket&rdquo; and we want to include it into our configuration code.‌‌</p>
<p><img loading="lazy" src="tf-workflow-import.png" alt=""  />
</p>
<h3 id="prepare">Prepare</h3>
<p>You should create a resource block to be used later for the real object you’re going to import.</p>
<p>You don’t need to fill the arguments in it at the start, so it may be just a blank resource block, for example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">resource &#34;aws_s3_bucket&#34; &#34;someassetsbucket&#34; {
‌‌
}
</code></pre></td></tr></table>
</div>
</div><h3 id="import">Import</h3>
<p>Now you need to import the information about the real object into your existing Terraform state file.</p>
<p>This can be done with the <code>terraform import</code> command, for example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">terraform import aws_s3_bucket.assets &#34;someassetsbucket&#34;
</code></pre></td></tr></table>
</div>
</div><p>‌Be sure to also check the list of possible options import accepts with <code>terraform import -h</code></p>
<h3 id="write-3">Write</h3>
<p>Now you need to write the corresponding Terraform code for this bucket.</p>
<p>To avoid modifying your real object on the <code>terraform apply</code> action, you should specify all needed arguments with the exact values from the import phase.</p>
<p>You can see the details by running the <code>terraform state show</code> command, for example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">terraform state show aws_s3_bucket.assets
</code></pre></td></tr></table>
</div>
</div><p>The output of this command will be very similar to the configuration code. But it contains both arguments and attributes of the resource, so you need to clean it up before applying it.</p>
<p>You can use one of the following tactics:</p>
<ul>
<li>either copy/paste it, and then run <code>terraform validate</code> and <code>terraform plan</code> several times to make sure there are no errors like &ldquo;argument is not expected here&rdquo; or &ldquo;this field cannot be set&rdquo;</li>
<li>or you can pick and write only the necessary arguments</li>
</ul>
<p>In any case, be sure to refer to the documentation of the resource during this process.</p>
<h3 id="plan-3">Plan</h3>
<p>The goal is to have a <code>terraform plan</code> output showing &ldquo;~ update in-place&rdquo; changes only.</p>
<p>However, it is not always clear whether the real object will be modified or only the state file will be updated. This is why you should understand how a real object works and know its life cycle to make sure it is safe to apply the plan.</p>
<h3 id="apply-3">Apply</h3>
<p>This is usual the <code>terraform apply</code> action.</p>
<p>Once applied, your configuration and state file will correspond to the real object configuration.</p>
<h1 id="wrapping-up">Wrapping up</h1>
<p>Here is an overview of Terraform Cloud for those who never worked with it before: <a href="https://www.terraform.io/docs/cloud/overview.html">‌‌Overview of Terraform Cloud Features</a></p>
<p>And here is a nice tutorial to start with: <a href="https://learn.hashicorp.com/collections/terraform/cloud-get-started">Get Started - Terraform Cloud</a></p>
<p>Also, here is an overview of workflows at scale from the HashiCorp CTO which might be useful for more experienced Terraform users: <a href="https://www.hashicorp.com/resources/terraform-workflow-best-practices-at-scale">Terraform Workflow Best Practices at Scale</a></p>
<p>Thank you for reading. I hope you will try one of these workflows, or develop your own!‌‌</p>
<hr>
<h6 id="this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers">This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.</h6>
]]></content:encoded>
    </item>
    
    <item>
      <title>Terraform Certification Tips</title>
      <link>https://serhii.vasylenko.info/2020/09/15/terraform-certification-tips.html</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/09/15/terraform-certification-tips.html</guid>
      <description>Summary of a learning path to HashiCorp Certified — Terraform Associate</description>
      <content:encoded><![CDATA[<p>I successfully passed the &ldquo;HashiCorp Certified — Terraform Associate&rdquo; exam last Friday and decided to share some advice for exam preparation.</p>
<h2 id="make-yourself-a-plan">Make yourself a plan</h2>
<p>Make a list of things you are going to go through: links to the study materials, practice tasks, some labs, some articles on relative blogs (Medium, Dev.to, etc.).
It should look at a &ldquo;todo&rdquo; or &ldquo;check&rdquo;-list. It may seem silly at first glance, but the list with checkboxes does its &ldquo;cognitive magic&rdquo;. When you go point by point, marking items as &ldquo;done&rdquo;, you feel the progress and this motivates you to keep going further.
For example, you can make a plan from the resources I outlined below in this article.</p>
<p>I encourage you to explore the Internet for something by yourself as well. Who knows, perhaps you will find some learning course that fits you better. And that is great! However, when you find it, take extra 5-10 minutes to go through its curriculum and create a list with lessons.</p>
<p>It feels so nice to cross out items off the todo list, believe me 😄
<img loading="lazy" src="todo-list.jpg" alt=""  />
</p>
<h2 id="go-through-the-official-study-guide">Go through the official Study Guide</h2>
<p>Despite your findings on the Internet, I strongly suggest going through the official study guide</p>
<p><a href="https://learn.hashicorp.com/tutorials/terraform/associate-study">Study Guide - Terraform Associate Certification</a></p>
<p>It took me about 20 hours to complete it (including practice tasks based on topics in the guide), and it was the core of my studying. I did not buy or search for some third-party course intentionally because I did have some Terraform experience before starting the preparation. But give the official guide a chance even if you found some course. It is well-made and matches real exam questions very precisely.</p>
<p>Also, there is an official <a href="https://learn.hashicorp.com/tutorials/terraform/associate-review">Exam Review</a>. Someone might find this even better because it is a direct mapping of each exam objective to HashiCorp&rsquo;s documentation and training.</p>
<h2 id="take-additional-tutorials">Take additional tutorials</h2>
<p>Here is a list of additional tutorials and materials I suggest adding into your learning program:</p>
<h4 id="official-guides--documentation">Official guides / documentation:</h4>
<ul>
<li><a href="https://learn.hashicorp.com/collections/terraform/automation">Automate Terraform</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/cloud">Collaborate using Terraform Cloud</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/0-13">Terraform tutorials</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/modules">Reuse Configuration with Modules</a></li>
<li><a href="https://www.hashicorp.com/resources/a-practitioner-s-guide-to-using-hashicorp-terraform-cloud-with-github">A Practitioner’s Guide to Using HashiCorp Terraform Cloud with GitHub</a></li>
<li><a href="https://learn.hashicorp.com/collections/terraform/policy">Enforce Policy with Sentinel</a></li>
</ul>
<h4 id="third-party-articles-and-guides">Third-party articles and guides:</h4>
<ul>
<li><a href="https://prefetch.net/blog/2020/04/27/using-the-terraform-console-to-debug-interpolation-syntax/">Using the terraform console to debug interpolation syntax</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL5VXZTK6spA2HF5Kf0rI9RDRHF9Hopffr">YouTube playlist with exam-like questions review</a></li>
</ul>
<h2 id="find-yourself-some-practice">Find yourself some practice</h2>
<h4 id="mockup-a-project">Mockup a project</h4>
<p>You can greatly improve your practice by mocking some real business cases.</p>
<p>If you already work in some company you can set up the project you&rsquo;re working with using Terraform. If you don’t have a real project or afraid to accidentally violate NDA, try this open-source demo project: <a href="https://github.com/gothinkster/realworld">Real World Example Apps</a>.</p>
<p>It is a collection of different codebases for front-end and back-end used to build the same project. Just find the combination that suits your experience better and try to build the infrastructure for it using Terraform.</p>
<p><img loading="lazy" src="real-world-demo.jpg" alt=""  />
</p>
<h4 id="answer-forum-topics">Answer forum topics</h4>
<p>Last but not least advice — try to answer some questions on the official <a href="https://discuss.hashicorp.com/c/terraform-core/">Terraform forum</a>.</p>
<p>This is a nice way to test your knowledge, help others, and develop the community around Terraform. Just register there, look for the latest topics, and have fun!</p>
<p><img loading="lazy" src="tf-forum.jpg" alt=""  />
</p>
<h4 id="-i-sincerely-wish-you-exciting-preparation-and-a-successful-exam-">🍀 I sincerely wish you exciting preparation and a successful exam! 🍀</h4>
]]></content:encoded>
    </item>
    
    <item>
      <title>What are Terraform Modules and how do they work?</title>
      <link>https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html</guid>
      <description>Explanation of Terraform modules and their main concepts in English.</description>
      <content:encoded><![CDATA[<p>Surprisingly, a lot of beginners skip over Terraform modules for the sake of simplicity, or so they think. Later, they find themselves going through hundreds of lines of configuration code.</p>
<p>I assume you already know some basics about Terraform or even tried to use it in some way before reading the article.</p>
<p>Please note: I do not use real code examples with some specific provider like AWS or Google intentionally, just for the sake of simplicity.</p>
<h2 id="terraform-modules">Terraform modules</h2>
<p>You already write modules even if you think you don’t.</p>
<p>Even when you don&rsquo;t create a module intentionally, if you use Terraform, you are already writing a module – a so-called &ldquo;root&rdquo; module.</p>
<p>Any number of Terraform configuration files <code>(.tf)</code> in a directory (even one) forms a module.</p>
<h3 id="what-does-the-module-do">What does the module do?</h3>
<p>A Terraform module allows you to create logical abstraction on the top of some resource set. In other words, a module allows you to group resources together and reuse this group later, possibly many times.</p>
<p>Let&rsquo;s assume we have a virtual server with some features hosted in the cloud. What set of resources might describe that server? For example:
– the virtual machine itself (created from some image)
– an attached block device of specified size (for additional storage)
– a static public IP mapped to the server&rsquo;s virtual network interface
– a set of firewall rules to be attached to the server
– something else&hellip; (i.e. another block device, additional network interface, etc)</p>
<p><img loading="lazy" src="1.png" alt=""  />
</p>
<p>Now let&rsquo;s assume that you need to create this server with a set of resources many times. This is where modules are really helpful – you don&rsquo;t want to repeat the same configuration code over and over again, do you?</p>
<p>Here is an example that illustrates how our &ldquo;server&rdquo; module might be called.
&ldquo;To call a module&rdquo; means to use it in the configuration file.</p>
<p>Here we create 5 instances of the &ldquo;server&rdquo; using single set of configurations (in the module):</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module &#34;server&#34; {
    
    count         = 5
    
    source        = &#34;./module_server&#34;
    some_variable = some_value
}
</code></pre></td></tr></table>
</div>
</div><h3 id="modules-organisation-child-and-root">Modules organisation: child and root</h3>
<p>Of course, you would probably want to create more than one module. Here are some common examples:</p>
<ul>
<li>for a network (i.e. VPC)</li>
<li>for a static content hosting (i.e. buckets)</li>
<li>for a load balancer and it&rsquo;s related resources</li>
<li>for a logging configuration</li>
<li>and whatever else you consider a distinct logical component of the infrastructure</li>
</ul>
<p>Let&rsquo;s say we have two different modules: a &ldquo;server&rdquo; module and a &ldquo;network&rdquo; module. The module called &ldquo;network&rdquo; is where we define and configure our virtual network and place servers in it:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module &#34;server&#34; {
    source        = &#34;./module_server&#34;
    some_variable = some_value
}

module &#34;network&#34; {  
    source              = &#34;./module_network&#34;
    some_other_variable = some_other_value
}
</code></pre></td></tr></table>
</div>
</div><p>Once we have some custom modules, we can refer to them as &ldquo;child&rdquo; modules. And the configuration file where we call child modules relates to the root module.</p>
<p><img loading="lazy" src="2.png" alt=""  />
</p>
<p>A child module can be sourced from a number of places:</p>
<ul>
<li>local paths</li>
<li>official Terraform Registry (if you&rsquo;re familiar with other registries, i.e. Docker Registry then you already understand the idea)</li>
<li>Git repository (a custom one or GitHub/BitBucket)</li>
<li>HTTP URL to .zip archive with module</li>
</ul>
<p>But how can you pass resources details between modules?</p>
<p>In our example, the servers should be created in a network. So how can we tell the &ldquo;server&rdquo; module to create VMs in a network which was created in a module called &ldquo;network&rdquo;?</p>
<p>This is where <strong>encapsulation</strong> comes in.</p>
<h2 id="module-encapsulation">Module encapsulation</h2>
<p>Encapsulation in Terraform consists of two basic concepts: module scope and explicit resources exposure.</p>
<h3 id="module-scope">Module Scope</h3>
<p>All resource instances, names, and therefore, resource visibility, are isolated in a module&rsquo;s scope. For example, module &ldquo;A&rdquo; can&rsquo;t see and does not know about resources in module &ldquo;B&rdquo; by default.</p>
<p>Resource visibility, sometimes called resource isolation, ensures that resources will have unique names within a module&rsquo;s namespace. For example, with our 5 instances of the &ldquo;server&rdquo; module:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module.server[0].resource_type.resource_name
module.server[1].resource_type.resource_name
module.server[2].resource_type.resource_name
</code></pre></td></tr></table>
</div>
</div><p>On the other hand, we could create two instances of the same module with different names:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module &#34;server-alpha&#34; {    
    source        = &#34;./module_server&#34;
    some_variable = some_value
}
module &#34;server-beta&#34; {
    source        = &#34;./module_server&#34;
    some_variable = some_value
}
</code></pre></td></tr></table>
</div>
</div><p>In this case, the naming or address of resources would be as follows:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module.server-alpha.resource_type.resource_name

module.server-beta.resource_type.resource_name
</code></pre></td></tr></table>
</div>
</div><h3 id="explicit-resources-exposure">Explicit resources exposure</h3>
<p>If you want to access some details for the resources in another module, you&rsquo;ll need to explicitly configure that.</p>
<p>By default, our module &ldquo;server&rdquo; doesn&rsquo;t know about the network that was created in the &ldquo;network&rdquo; module.</p>
<p><img loading="lazy" src="3.png" alt=""  />
</p>
<p>So we must declare an <code>output</code> value in the &ldquo;network&rdquo; module to export its resource, or an attribute of a resource, to other modules.</p>
<p>The module &ldquo;server&rdquo; must declare a <code>variable</code> to be used later as the input.</p>
<p><img loading="lazy" src="4.png" alt=""  />
</p>
<p>This explicit declaration of the output is the way to expose some resource (or information about it) outside — to the scope of the &lsquo;root&rsquo; module, hence to make it available for other modules.</p>
<p>Next, when we call the child module &ldquo;server&rdquo;  in the root module, we should assign the output from the &ldquo;network&rdquo; module to the variable of the &ldquo;server&rdquo; module:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">network_id = module.network.network_id
</code></pre></td></tr></table>
</div>
</div><p>Here is how the final code for calling our child modules will look like in result:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">module &#34;server&#34; {
    count         = 5
    source        = &#34;./module_server&#34;
    some_variable = some_value
    network_id    = module.network.network_id
}

module &#34;network&#34; {  
    source              = &#34;./module_network&#34;
    some_other_variable = some_other_value
}
</code></pre></td></tr></table>
</div>
</div><p>This example configuration would create 5 instances of the same server, with all the necessary resources, in the network we created with as a separate module.</p>
<h3 id="wrap-up">Wrap up</h3>
<p>Now you should understand what modules are and what do they do.</p>
<p>If you&rsquo;re at the beginning of your Terraform journey, here are some suggestions for the next steps.</p>
<p>I encourage you to take this short tutorial from HashiCorp, the creators of Terraform, about modules:  <a href="https://learn.hashicorp.com/collections/terraform/modules">&ldquo;Organize Configuration&rdquo;</a></p>
<p>Also, there is a great comprehensive study guide which covers everything from beginner to advanced concepts about Terraform: <a href="https://learn.hashicorp.com/tutorials/terraform/associate-study?in=terraform/certification">&ldquo;Study Guide - Terraform Associate Certification&rdquo;</a></p>
<p>The modular code structure makes your configuration more flexible and yet easy to be understood by others. The latter is especially useful in teamwork.</p>
<hr>
<h6 id="this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers">This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.</h6>
]]></content:encoded>
    </item>
    
    <item>
      <title>Terraform CLI shortcuts</title>
      <link>https://serhii.vasylenko.info/2020/08/25/terraform-cli-shortcuts.html</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/08/25/terraform-cli-shortcuts.html</guid>
      <description>A bunch of small tools I use to simplify Terraform workflow</description>
      <content:encoded><![CDATA[<p>Here is some CLI shortcuts I use day-to-day to simplify and speed-up my Terraform workflow.
Requirements &mdash; bash-compatible interpreter, because aliases and functions described below will work with bash, zsh and ohmyzsh.</p>
<p>In order to use any of described aliases of functions, you need to place it in your <code>~/.bashrc</code> or <code>~/.zshrc</code> file (or any other configuration file you have for your shell).</p>
<p>Then just source this file, for example: <code>source ~/.zshrc</code></p>
<h2 id="function-list-outputs-and-variables-of-given-module">Function: list outputs and variables of given module</h2>
<p>You need to provide the path to module directory, and this function will list all declared variables and outputs module has. It comes very useful when you don&rsquo;t remember them all and just need to take a quick look.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#999;font-style:italic">## TerraForm MOdule Explained</span>
<span style="color:#6ab825;font-weight:bold">function</span> tfmoe {
  <span style="color:#24909d">echo</span> -e <span style="color:#ed9d13">&#34;\nOutputs:&#34;</span>
  grep -r <span style="color:#ed9d13">&#34;output \&#34;.*\&#34;&#34;</span> <span style="color:#40ffff">$1</span> |awk <span style="color:#ed9d13">&#39;{print &#34;\t&#34;,$2}&#39;</span> |tr -d <span style="color:#ed9d13">&#39;&#34;&#39;</span>
  <span style="color:#24909d">echo</span> -e <span style="color:#ed9d13">&#34;\nVariables:&#34;</span>
  grep -r <span style="color:#ed9d13">&#34;variable \&#34;.*\&#34;&#34;</span> <span style="color:#40ffff">$1</span> |awk <span style="color:#ed9d13">&#39;{print &#34;\t&#34;,$2}&#39;</span> |tr -d <span style="color:#ed9d13">&#39;&#34;&#39;</span>
}</code></pre></td></tr></table>
</div>
</div>
<p>Example usage:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">user@localhost $: tfmoe ./module_alb

Outputs:
	 alb_arn

Variables:
	 acm_certificate_arn
	 lb_name
	 alb_sg_list
	 subnets_id_list
	 tags
</code></pre></td></tr></table>
</div>
</div><h2 id="function-pre-fill-module-directory-with-configuration-files">Function: pre-fill module directory with configuration files</h2>
<p>You need to provide a path to the module directory and this function will create a bunch of empty &lsquo;default&rsquo; .tf files in it.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#999;font-style:italic">#TerraForm MOdule Initialize</span>
<span style="color:#6ab825;font-weight:bold">function</span> tfmoi {
  touch <span style="color:#40ffff">$1</span>/variables.tf
  touch <span style="color:#40ffff">$1</span>/outputs.tf
  touch <span style="color:#40ffff">$1</span>/versions.tf
  touch <span style="color:#40ffff">$1</span>/main.tf
}
</code></pre></td></tr></table>
</div>
</div><p>Example usage:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">user@localhost $: mkdir ./module_foo &amp;&amp; temoi $_

user@localhost $: ls ./module_foo
main.tf      outputs.tf   variables.tf versions.tf
</code></pre></td></tr></table>
</div>
</div><h2 id="aliases">Aliases</h2>
<p>The purpose of these aliases is just to keep you from typing long commands when you want to do a simple action.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#24909d">alias</span> <span style="color:#40ffff">tf</span>=<span style="color:#ed9d13">&#39;terraform&#39;</span>

<span style="color:#24909d">alias</span> <span style="color:#40ffff">tfv</span>=<span style="color:#ed9d13">&#39;terraform validate&#39;</span>

<span style="color:#24909d">alias</span> <span style="color:#40ffff">tfi</span>=<span style="color:#ed9d13">&#39;terraform init&#39;</span>

<span style="color:#24909d">alias</span> <span style="color:#40ffff">tfp</span>=<span style="color:#ed9d13">&#39;terraform plan&#39;</span> 
</code></pre></td></tr></table>
</div>
</div><p>This one is useful because it makes format tool to go in-depth (recursively) through directories.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#24909d">alias</span> <span style="color:#40ffff">tfm</span>=<span style="color:#ed9d13">&#39;terraform fmt -recursive&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>Example usage:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">user@localhost $: tfm 
module_ecs_cluster/ecs.tf
module_alb/alb.tf
</code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Manage Ansible playbook secrets with AWS services</title>
      <link>https://serhii.vasylenko.info/2020/08/06/ansible-secrets-aws-ssm-sm.html</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/08/06/ansible-secrets-aws-ssm-sm.html</guid>
      <description>A better way to store sensitive information for Ansible on EC2 or other services</description>
      <content:encoded><![CDATA[<p>Lookup plugins for Ansible allow you to do a lot of cool things. One of them is to securely pass sensitive information to your playbooks.
If you manage some apps in AWS with Ansible, then using Parameter Store or Secrets Manager along with it might greatly improve your security.</p>
<h2 id="variables-with-ssm-parameter-store">Variables with SSM Parameter Store</h2>
<p>Let&rsquo;s say you have some variables defined in &lsquo;defaults/main.yaml&rsquo; file of your role or maybe in group_vars.yaml file.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#447fcf;text-decoration:underline">---</span><span style="color:#666">
</span><span style="color:#666"></span><span style="color:#999;font-style:italic"># content of dev.vars.yaml to be included in your play or role</span><span style="color:#666">
</span><span style="color:#666"></span><span style="color:#6ab825;font-weight:bold">use_tls</span>:<span style="color:#666"> </span><span style="color:#6ab825;font-weight:bold">true</span><span style="color:#666">
</span><span style="color:#666"></span><span style="color:#6ab825;font-weight:bold">application_port</span>:<span style="color:#666"> </span><span style="color:#3677a9">3000</span><span style="color:#666">
</span><span style="color:#666"></span><span style="color:#6ab825;font-weight:bold">app_env</span>:<span style="color:#666"> </span>development<span style="color:#666">
</span><span style="color:#666"></span><span style="color:#6ab825;font-weight:bold">stripe_api_key</span>:<span style="color:#666"> </span>1HGASU2eZvKYlo2CT5MEcnC39HqLyjWD<span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>If you store such things locally on Ansible control node, you probably encrypt it with <a href="https://docs.ansible.com/ansible/latest/user_guide/vault.html">ansible-vault</a></p>
<p>SSM Parameter Store gives you more flexibility and security by centralized storage and management of parameters and secrets, so let&rsquo;s use it with Ansible:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#999;font-style:italic"># content of dev.vars.yaml to be included in your play or role</span><span style="color:#666">
</span><span style="color:#666">
</span><span style="color:#666"></span><span style="color:#6ab825;font-weight:bold">use_tls</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;{{lookup(&#39;aws_ssm&#39;, &#39;/dev/webserver/use_tls&#39;)}}&#34;</span><span style="color:#666">
</span><span style="color:#666"></span><span style="color:#6ab825;font-weight:bold">application_port</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;{{lookup(&#39;aws_ssm&#39;, &#39;/dev/webserver/application_port&#39;)}}&#34;</span><span style="color:#666">
</span><span style="color:#666"></span><span style="color:#6ab825;font-weight:bold">app_env</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;{{lookup(&#39;aws_ssm&#39;, &#39;/dev/webserver/app_env&#39;)}}&#34;</span><span style="color:#666">
</span><span style="color:#666"></span><span style="color:#6ab825;font-weight:bold">stripe_api_key</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;{{lookup(&#39;aws_ssm&#39;, &#39;/dev/webserver/stripe_api_key&#39;)}}&#34;</span><span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>The syntax is fairly simple:</p>
<p>The <code>aws_ssm</code> argument – is the name of plugin.</p>
<p>The <code>/dev/webserver/use_tls</code> argument – is the path to the key in Paramter Store.</p>
<p>Surely you can do the same for a group of servers with group variables, for example:</p>
<p>You can use this anywhere you can use templating: in a play, in variables file, or a Jinja2 template.</p>
<h2 id="variables-with-secret-manager">Variables with Secret Manager</h2>
<p>Another cool lookup plugin is Secrets Manager. In a nutshell, it has the same kind of functionality but it uses JSON format by feault.</p>
<p>Here is a quick example of its functionality in a Playbook:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#447fcf;text-decoration:underline">---</span><span style="color:#666">
</span><span style="color:#666"></span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Extract something secrets from Secret Manager<span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">debug</span>:<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">msg</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#34;{{ lookup(&#39;aws_secret&#39;, &#39;dev/some-secrets&#39;)}}&#34;</span><span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>The above task will generate the following output</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">TASK [Extract something secrets from Secret Manager] ****************************************************
ok: [some_server] =&gt; {
    <span style="color:#ed9d13">&#34;msg&#34;</span>: {
        <span style="color:#ed9d13">&#34;dbname&#34;</span>: <span style="color:#ed9d13">&#34;database&#34;</span>,
        <span style="color:#ed9d13">&#34;engine&#34;</span>: <span style="color:#ed9d13">&#34;mysql&#34;</span>,
        <span style="color:#ed9d13">&#34;host&#34;</span>: <span style="color:#ed9d13">&#34;127.0.0.1&#34;</span>,
        <span style="color:#ed9d13">&#34;password&#34;</span>: <span style="color:#ed9d13">&#34;password&#34;</span>,
        <span style="color:#ed9d13">&#34;port&#34;</span>: <span style="color:#ed9d13">&#34;3306&#34;</span>,
        <span style="color:#ed9d13">&#34;username&#34;</span>: <span style="color:#ed9d13">&#34;db_user&#34;</span>
    }
}
</code></pre></td></tr></table>
</div>
</div><p>This is nice if you want to insert a JSON as is, but you will need additional parsing in case you want to get only some of JSON elements.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you’re using Ansible in CI/CD, then having it on an EC2 Instance with the IAM role will make you avoid keeping any secrets on that instance at all.<br>
The IAM role must allow at least the read access to SSM Parameter Store (+ KMS read access to be able to decrypt the keys) or the read access to Secrets Manager.</p>
<p>You can find documentation for described plugins here <a href="https://docs.ansible.com/ansible/latest/plugins/lookup/aws_ssm.html">aws_ssm</a> and here <a href="https://docs.ansible.com/ansible/latest/plugins/lookup/aws_secret.html">aws_secret</a>.</p>
<p>More about lookup plugins: <a href="https://docs.ansible.com/ansible/latest/plugins/lookup.html">https://docs.ansible.com/ansible/latest/plugins/lookup.html</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Terraform explained for managers</title>
      <link>https://serhii.vasylenko.info/2020/05/02/Terraform-explained-for-managers.html</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/05/02/Terraform-explained-for-managers.html</guid>
      <description>For those who want to understand the engineering team better and speak on the same technical language — terraform explained.</description>
      <content:encoded><![CDATA[<p>For example, I have a good technical background, yet sometimes I felt that my teammates saw that I didn’t understand them when discussing a project or a task in-depth. Moreover, I knew they were right. But, of course, plenty of managers do not have a technical background, and they perform great.</p>
<p>Some might say that technical skills are not the priority for a manager. But I think that +1 to skills is always better than nothing. It is a question of time and personal interests, one way or another.</p>
<p>That is why I decided to share my experience and explain Terraform in one blog post.</p>
<p>The language of this article will be ‘techie’ but not too much: I want to highlight the main parts the Terraform consists of. Although this is not technical documentation (I hope), code examples will be based on AWS cloud configuration, but in-depth knowledge of AWS is not required to understand them.</p>
<h2 id="a-few-words-about-infrastructure-as-code">A few words about “Infrastructure as Code&quot;</h2>
<p>IaC is when you describe and manage your infrastructure as… (guess what?) …code, literally.</p>
<p>In a nutshell, that means you can define all the elements (servers, networks, storage, etc.) and resources (memory, CPU, etc.) of your infrastructure in configuration files, and manage it in a way similar to how you handle the source code of the applications: branches, releases, and all that stuff.</p>
<p>And the main idea behind the IaC approach is that it manages the state of things and must remain the single source of truth (configuration truth) for your infrastructure.</p>
<p>First, you define the state via the code. Then IaC tool (Terraform, for example) applies this state to the infrastructure: all that is missing according to the code will be created, all that differs from the code will be changed, and all that exists in the infrastructure but is not described via code — will be destroyed.</p>
<h2 id="why-and-when-do-you-need-the-terraform-for-a-project">Why and when do you need the Terraform for a project?</h2>
<p>Terraform is a specific tool, hence like any other tool, it has its particular application area. There is no strict definition of project kind that needs Terraform (surprise!), but in general, you need to consider using Terraform if you answer ‘yes’ to one of the following questions:</p>
<ul>
<li>Do you have multiple logical elements of the same kind (in plural) in your infrastructure, i.e., several web servers, several application servers, several database servers?</li>
<li>Do you have numerous environments (or workspaces) where you run your applications, i.e., development, staging, QA, production?</li>
<li>Do you spend a significant amount of time managing the changes in the environment(s) where you run your applications?</li>
</ul>
<h2 id="how-does-it-work">How does it work?</h2>
<p>Terraform works with the source code of configuration and interprets the code into real objects inside on-premise or cloud platforms.</p>
<figure>
    <img loading="lazy" src="how-it-works-optimized.png"
         alt="How Terraform works" width="800"/> <figcaption>
            <p>How Terraform works in a nutshell</p>
        </figcaption>
</figure>

<p>Terraform supports many platforms: cloud providers such as AWS, Azure, GCP, DigitalOcean, and other platforms such as OVH, 1&amp;1, Hetzner, etc. It also supports infrastructure software such as Docker, Kubernetes, Chef, and even databases and monitoring software. That is why Terraform is so popular — it is an actual Swiss knife in the operations world.</p>
<p>So to create, change, or destroy the infrastructure, Terraform needs the source code.</p>
<p>The <strong>source code</strong> is a set of configuration files that defines your infrastructure state. The code uses its syntax, but it looks very user-friendly. Here is an example: the following configuration block describes the virtual server (EC2 instance) in AWS.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;web_server&#34;</span> {
  ami           = <span style="color:#ed9d13">&#34;ami-a1b2c3d4&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;t3.micro&#34;</span>
  }
</code></pre></td></tr></table>
</div>
</div><p>Terraform can automatically detect the dependencies between resources described in the code and also allows you to add custom dependencies when needed.</p>
<p>When you apply the code the first time, Terraform creates a so-called “<strong>state file</strong>,&quot; which Terraform uses to map your code to resources created in the hosting platform. Terraform will use each subsequent “apply&quot; action to compare the code changes with the sate file to decide what should be done (and in what order) against real infrastructure.</p>
<p>One of the essential functions of the state file is the management of dependencies between the resources. For example (some technical nuances are omitted for simplicity): if you have a server created inside some network and you are going to change the network configuration in Terraform code, Terraform will know it should change that server configuration, or the server should be re-created inside the updated network.</p>
<h2 id="what-does-terraform-consist-of">What does Terraform consist of:</h2>
<p>Terraform configuration code consists of several elements: providers, resources, modules, input variables, output values, local values, expressions, functions.</p>
<h3 id="provider">Provider</h3>
<p><strong>Provider</strong> is an entity that defines what exactly is possible to do with the cloud or on-premises infrastructure platform you manage via Terraform.</p>
<p>It translates your code into proper API calls to the hosting provider, transforming your configuration into real object: servers, networks, databases, and so on.</p>
<h3 id="resource">Resource</h3>
<p><strong>Resource</strong> is the essential part of the configuration code. That is where the definition of infrastructure objects happens.</p>
<p>Resources are the main building blocks of the whole code. A resource can represent some object in the hosting provider (example: server) or the part of a compound object (example: attachable storage for a server)</p>
<p>Every resource has a type and local name. For example, here is how EC2 instance configuration may look like:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;web_server&#34;</span> {
  ami           = <span style="color:#ed9d13">&#34;ami-a1b2c3d4&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;t3.micro&#34;</span>
  }
</code></pre></td></tr></table>
</div>
</div><p>The <code>aws_instance</code> is a resource type, and <code>web_server</code> is the local resource name. Later, when Terraform applies this code, it will create an EC2 instance with some particular ID in AWS.</p>
<p>Once created, Terraform will store the ID in the state file with mapping information that logically connects it with <code>web_server</code>.</p>
<p>The <code>ami</code>, <code>instance_type</code>, and <code>private_ip</code> are the arguments with values that define the actual state of the resource. However, there are many value types, depending on the particular argument and particular resource type, so I will not focus on them here.</p>
<h3 id="modules">Modules</h3>
<figure>
    <img loading="lazy" src="module-example.png"
         alt="Terraform module" width="800"/> <figcaption>
            <p>Terraform module</p>
        </figcaption>
</figure>

<p><strong>Modules</strong> is the kind of logical containers or groups for resources you define and use together. The purpose of modules is the grouping of resources and the possibility of reusing the same code with different variables.</p>
<p>Let’s get back to the example with the EC2 instance and say you need to have a static public IP address with it. In such a case, here is how the module for web server may look like:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;web_server&#34;</span> {
  ami           = <span style="color:#ed9d13">&#34;ami-a1b2c3d4&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;t3.micro&#34;</span>
  }
<span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_eip&#34; &#34;web_server_public_ip&#34;</span> {
  instance      = <span style="color:#ed9d13">&#34;${aws_instance.web_server.id}&#34;</span>
  }
</code></pre></td></tr></table>
</div>
</div><p>Having these two resources together allows us to think of it as a stand-alone unit you can reuse later, for example, in our development, staging, and production environments. And not by copying and pasting it, but via reference to the module defined only once.</p>
<p>Please note: we specified an instance argument inside the <code>aws_eip</code> resource to reference another resource details (the ID of an instance). It is possible because of the way how Terraform treats dependencies. For example, when it detects the dependency (or you define it explicitly), Terraform creates the leading resource first. Only after the resource is created and available Terraform will create the dependent one.</p>
<p>The modules is a kind of standalone topic in Terraform. There is <a href="https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html">a separate article in my blog</a> that explains what modules are and how do they work.</p>
<h3 id="variables">Variables</h3>
<p><strong>Input variables</strong> work as parameters for the modules so module code could be reusable. Let’s look at the previous example: it has some hardcoded values — instance image ID and instance type. Here is how you can make it more abstract and reusable:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">variable</span> <span style="color:#ed9d13">&#34;image_id&#34;</span> {
  type          = <span style="color:#6ab825;font-weight:bold">string</span>
  }
<span style="color:#6ab825;font-weight:bold">variable</span> <span style="color:#ed9d13">&#34;instance_type&#34;</span> {
  type          = <span style="color:#6ab825;font-weight:bold">string</span>
  }
<span style="color:#6ab825;font-weight:bold">resource</span> <span style="color:#ed9d13">&#34;aws_instance&#34; &#34;web_server&#34;</span> {
  ami           = <span style="color:#6ab825;font-weight:bold">var</span>.<span style="color:#6ab825;font-weight:bold">image_id</span>
  instance_type = <span style="color:#6ab825;font-weight:bold">var</span>.<span style="color:#6ab825;font-weight:bold">instance_type</span>
  }
</code></pre></td></tr></table>
</div>
</div><p>Values for the variables then can be passed either via CLI and environment variables (if you have only the one, so-called root module) or via explicit values in the block where you call a module, for example:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#6ab825;font-weight:bold">module</span> <span style="color:#ed9d13">&#34;web_server_production&#34;</span> {
  source        = <span style="color:#ed9d13">&#34;./modules/web_server&#34;</span>
  image_id      = <span style="color:#ed9d13">&#34;ami-a1b2c3d4&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;m5.large&#34;</span>
  }
<span style="color:#6ab825;font-weight:bold">module</span> <span style="color:#ed9d13">&#34;web_server_development&#34;</span> {
  source        = <span style="color:#ed9d13">&#34;./modules/web_server&#34;</span>
  image_id      = <span style="color:#ed9d13">&#34;ami-a2b3c4d5&#34;</span>
  instance_type = <span style="color:#ed9d13">&#34;t3.micro&#34;</span>
 }
</code></pre></td></tr></table>
</div>
</div><p><strong>Output values</strong> are similar to the &ldquo;return&rdquo; of a function in development language. You can use them for dependencies management (for example, when a module requires something from another module) and print specific values at the end of Terraform work (for example, to be used for notification in the CI/CD process).</p>
<p><strong>Local values</strong>, <strong>expressions</strong>, <strong>functions</strong> — three more things that augment the capabilities of Terraform and make it more similar to a programming language (which is excellent, by the way).</p>
<p>The local values are used inside modules for extended data manipulations.</p>
<p>The expressions are used to set the values (for many things), such as the value of some argument in resource configuration. For example, they used either to refer something (just as we referenced instance ID <code>&quot;${aws_instance.web_server.id}&quot;</code> in the example above) or to compute the value within your configuration.</p>
<p>The functions in Terraform are built-in jobs you can call to transform and combine values. For example, the <code>tolist()</code> function converts its argument to a list value.</p>
<h2 id="and-this-is-it">And this is it?</h2>
<p>Yes, in short words — this is what Terraform is. Not rocket science if it&rsquo;s about to manage a small infrastructure, but it gets more complicated with bigger infrastructure. Like any other engineering tool, though.</p>
<h2 id="okay-what-next">Okay, what next?</h2>
<p>If you read down to this point, then it means it is worth &ldquo;get your hands dirty&rdquo; and to try building your Infrastructure with Terraform. There are plenty of courses and books (and the &ldquo;Terraform up and running&rdquo; is one of the most popular). Still, my learning path started from the following: <a href="https://learn.hashicorp.com/terraform">Official guide from Hashicorp</a> — comprehensive and free guide from Terraform developers. Just pick your favorite cloud (AWS, Azure, GCP) and go through the topics.</p>
<p>Another thing worth your attention is <a href="https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca">A Comprehensive Guide to Terraform</a>.</p>
<p>Once you finish this guide, I suggest jumping into the more real-world things and describing the infrastructure of the most common project you work with.</p>
<p>Your hands-on experience is the best way to learn Terraform!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>DevOps team in outsource. A team?</title>
      <link>https://serhii.vasylenko.info/2020/03/20/devops-team-in-outsource-a-team.html</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/03/20/devops-team-in-outsource-a-team.html</guid>
      <description>This article was written a long time ago in a galaxy far, far away...</description>
      <content:encoded><![CDATA[<p>I am a team lead in an outsourcing company. That means I believe <em>(or convince myself)</em> that I lead the team <em>(wait, wait, there will be even more obvious discoveries)</em>.</p>
<p>I am sure that <strong>a team</strong> can achieve more than a single person or a group. And the story I want to tell is about making the team from a group of people with personal and non-connected tasks. I assume this is going to be a series of posts, and hopefully, I will add a table of contents here.</p>
<h3 id="a-group-or-a-team">A group or a team?</h3>
<p>It is quite rare to find a project that involves more than 10-15 people in a small or mid-size outsourcing company. With such project size, a single DevOps engineer is enough to handle the whole job. Or an engineer may work on several projects at the same time if projects are relatively small. This is because the scope of work to be done fits into the schedule of a single person. So it is either one-to-one or one-to-many connection in most cases: either the employee works with one project or the employee works with several projects simultaneously.</p>
<p>Outsourcing a &ldquo;DevOps&rdquo; within this context usually means assigning an individual for the work with a client or/and a client&rsquo;s team.</p>
<p>Now imagine: you have several people in a room, all of them are DevOps engineers working in the same outsource company and all they work with their &ldquo;own&rdquo; projects separately.</p>
<p><strong>So would you call that group of people &ldquo;a team&rdquo;?</strong></p>
<p>Wikipedia states that &ldquo;a team&rdquo; is a group of individuals (human or non-human) working together to achieve <strong>their [common] goal</strong>.
As well as common sense tells us that &ldquo;a team&rdquo; is something that groups people to make them work for a <strong>mutual outcome</strong>.</p>
<p>And here comes an obvious but a difficult question: what common goal(s) a group of people can have whereas each member of that group has its own goal, which is not related to others'? A bit contradictory, isn&rsquo;t it?</p>
<h3 id="a-goal">A Goal</h3>
<p>Conventional thinking tells us that a goal for the for-profit company is to make money. This is true, and I don&rsquo;t want to argue with it. Therefore, does it mean that a goal for a team of engineers inside the company is the same as for the company as a whole?</p>
<p>Yes&hellip; Yet, not only, or almost.</p>
<p>Yes, because it&rsquo;s the main reason why we work for an outsourcing company. We do the job for clients, clients pay the company, the company pays us.</p>
<p>However, there is a long chain of events and processes that leads from the start of a contract to the paid invoice. A team of engineers is the inalienable part of that chain, with a focus on its work - deliver technical solutions following the client&rsquo;s expectations and requirements.</p>
<p>This conclusion reveals the goal for the DevOps team in the outsourcing company: grow the quality of work by a process of ongoing improvement and refinement of technical and soft skills. So simple, so obvious.</p>
<p>And this goal means nothing by itself. But to sustain it and adapt, to make it desirable for the team, and to make it a team&rsquo;s foundation eventually, we need the following:</p>
<ul>
<li>Values</li>
<li>Principles</li>
<li>Common interests</li>
</ul>
<p>One of the crucial responsibilities of a team lead is to foster these three pillars of a team.</p>
<p>The <strong>VALUES</strong>  is something that lets us feel comfortable with the people surrounding us in the office. The list of values is not carved in stone, it can (and eventually should) change as the team evolves. But here is the most constant items for my team:</p>
<ul>
<li>openness in communication</li>
<li>respect to each other&rsquo;s opinion</li>
<li>empathy</li>
<li>feeling free to provide critic and being ready to receive it</li>
<li>count on help from a teammate and be ready to help</li>
<li>ability to work remotely and have flexible working hours</li>
</ul>
<p>The <strong>PRINCIPLES</strong> is a set of beliefs and policies that keeps us on the required level of productivity and disciplines us, and stimulates the longing to improve. Again, this list can be and should be adjusted as the time goes and the team evolves, but here is the most up to date for us:</p>
<ul>
<li>we learn constantly</li>
<li>we are the first who appraises the quality of our work</li>
<li>we are proactive</li>
<li>we are open: if we do not agree with something or something is worrying us, we should be brave enough to say it</li>
<li>we may defend own point of view, but be ready to accept that it is incorrect</li>
<li>we can make mistakes, but we must learn from it and do not repeat them</li>
<li>we must help our teammates</li>
<li>we keep our promises</li>
</ul>
<p>The <strong>COMMON INTERESTS</strong> is more about informal things we share within a team. This includes (but not limited to) team building events, discussions and arguments about new technologies, so-called water-cooler chats, and so on. Being less formal, this pillar acts as a glue for the team. This is because we are all humans, first of all, and we generally work for 1/3 of our day (not including weekends), so we need to stay humans at work as well. I mean it is impossible to switch off the &lsquo;human&rsquo; for that 1/3 of the day, leaving only the engineer for this time. Hence, this must be admitted and we must cope with it by putting several informal things into formal work.</p>
<p>These pillars create a team culture where learning, creativity, and an open mindset are encouraged.</p>
<h3 id="the-team">The Team</h3>
<p>This is how a group of people with separate goals may become a team. While we do not have a goal (&ldquo;one for all&rdquo;) that is measurable or has a fixed point of completion, we still have a common aim whose realization is based on pillars of teamwork. And with a set of sub-goals, this may be a specific, achievable (until you find something else to improve, which should happen quite often) and even realistic. So it&rsquo;s kinda 60% S.M.A.R.T. goal :smile:</p>
<p>Unfortunately or fortunately (if you like your team lead job) there is a lot of work that needs to be done and a lot of questions need to be answered to implement the described approach:</p>
<ul>
<li>How to translate own values to the team and create the new ones together?</li>
<li>How to make people communicate in such a team and share their knowledge?</li>
<li>How to define who does what?</li>
<li>How to teach team members to learn?</li>
<li>How to keep team members loyal to the team and company?</li>
<li>How to mitigate conflicts and how to use them?</li>
<li>How to keep team members motivated when the work becomes boring and the level of engagement goes down?</li>
<li>and much much more</li>
</ul>
<p>I wish I could answer all these questions at once, and I wish there were only correct answers.
But my experience tells me that it is possible to answer them one by one. And I hope to share that here someday!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Github Actions - First impression</title>
      <link>https://serhii.vasylenko.info/2020/03/18/github-actions-first-impression.html</link>
      <pubDate>Wed, 18 Mar 2020 00:30:20 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/03/18/github-actions-first-impression.html</guid>
      <description>My first meet with github actions... in action.</description>
      <content:encoded><![CDATA[<p>Although Github Actions service is generally available since November 13, 2020, and there are about 243,000,000 results for &ldquo;github actions&rdquo; in Google search already, I have just reached it&hellip;</p>
<p>It&rsquo;s half past midnight, it took me about 35 commits to make my first github automation work, but it finally works and this blog post was built and published automatically!</p>
<h3 id="actions-everywhere">Actions everywhere</h3>
<p>One of the most (or maybe the most one) powerful things in Actions is &hellip; Actions! Github made a simple but genius thing: they turned well-known snippets (we do with pipelines) into the marketplace of well-made (sometimes not) simple and complex applications you can use in your automation workflow. <a href="https://github.com/marketplace?type=actions">https://github.com/marketplace?type=actions</a></p>
<p>So now you can either re-invent your wheel or re-use someone else&rsquo;s code to make the needed automation.</p>
<p>I decided to automate publications to this blog via Actions in order to have some practice.</p>
<p>There are two workflows: one for the blog (website), and one for the CV (cv).</p>
<ul>
<li><a href="https://github.com/actions/checkout">actions/checkout@v2</a></li>
<li><a href="https://github.com/actions/upload-artifact">actions/upload-artifact@v2</a></li>
<li><a href="https://github.com/actions/download-artifact">actions/download-artifact@v2</a></li>
</ul>
<p>In both workflows, the build job is performed within a container, which is different per workflow: Ruby for the blog and Pandoc for CV.</p>
<p>Here is how the build job looks like for the blog:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#6ab825;font-weight:bold">jobs</span>:<span style="color:#666">
</span><span style="color:#666">  </span><span style="color:#6ab825;font-weight:bold">build</span>:<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">runs-on</span>:<span style="color:#666"> </span>ubuntu-latest<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">container</span>:<span style="color:#666">
</span><span style="color:#666">      </span><span style="color:#6ab825;font-weight:bold">image</span>:<span style="color:#666"> </span>ruby:2.6.4<span style="color:#666">
</span><span style="color:#666">      </span><span style="color:#6ab825;font-weight:bold">options</span>:<span style="color:#666"> 
</span><span style="color:#666">        </span>--workdir /src <span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">steps</span>:<span style="color:#666">
</span><span style="color:#666">      </span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Checkout<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">uses</span>:<span style="color:#666"> </span>actions/checkout@v2 <span style="color:#666">
</span><span style="color:#666">
</span><span style="color:#666">      </span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Build blog<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">run</span>:<span style="color:#666"> </span>|<span style="color:#ed9d13">
</span><span style="color:#ed9d13">          bundle install
</span><span style="color:#ed9d13">          bundle exec jekyll build --verbose --destination _site</span><span style="color:#666">          
</span><span style="color:#666">
</span><span style="color:#666">      </span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Upload artifacts<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">uses</span>:<span style="color:#666"> </span>actions/upload-artifact@v2<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">with</span>:<span style="color:#666"> 
</span><span style="color:#666">          </span><span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>_site<span style="color:#666">
</span><span style="color:#666">          </span><span style="color:#6ab825;font-weight:bold">path</span>:<span style="color:#666"> </span>_site<span style="color:#666">
</span></code></pre></td></tr></table>
</div>
</div><p>As you can see, I run the steps within the Ruby container. This simplifies things related to file permissions and directory mounting because checkout is made inside the container.</p>
<p>The deploy step is performed via shell run command for now, for better clearness (can be replaced to third-party action or custom-made one): it makes a commit to gh-pages branch which is configured for Github Pages.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">24
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#6ab825;font-weight:bold">deploy</span>:<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">if</span>:<span style="color:#666"> </span>github.ref == &#39;refs/heads/master&#39;<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">needs</span>:<span style="color:#666"> </span>build<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">runs-on</span>:<span style="color:#666"> </span>ubuntu-latest<span style="color:#666">
</span><span style="color:#666">    </span><span style="color:#6ab825;font-weight:bold">steps</span>:<span style="color:#666">
</span><span style="color:#666">      </span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Checkout gh-pages branch<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">uses</span>:<span style="color:#666"> </span>actions/checkout@v2<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">with</span>:<span style="color:#666">
</span><span style="color:#666">          </span><span style="color:#6ab825;font-weight:bold">ref</span>:<span style="color:#666"> </span><span style="color:#ed9d13">&#39;gh-pages&#39;</span><span style="color:#666">
</span><span style="color:#666">
</span><span style="color:#666">      </span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Get the build artifact<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">uses</span>:<span style="color:#666"> </span>actions/download-artifact@v2<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">with</span>:<span style="color:#666">
</span><span style="color:#666">          </span><span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>_site<span style="color:#666">
</span><span style="color:#666">          </span><span style="color:#6ab825;font-weight:bold">path</span>:<span style="color:#666"> </span>./<span style="color:#666">
</span><span style="color:#666">
</span><span style="color:#666">      </span>- <span style="color:#6ab825;font-weight:bold">name</span>:<span style="color:#666"> </span>Deploy (push) to gh-pages<span style="color:#666">
</span><span style="color:#666">        </span><span style="color:#6ab825;font-weight:bold">run</span>:<span style="color:#666"> </span>|<span style="color:#ed9d13">
</span><span style="color:#ed9d13">          git config user.name &#34;$GITHUB_ACTOR&#34;
</span><span style="color:#ed9d13">          git config user.email &#34;${GITHUB_ACTOR}@bots.github.com&#34;
</span><span style="color:#ed9d13">          git add -A 
</span><span style="color:#ed9d13">          git commit -a -m &#34;Updated Website&#34;
</span><span style="color:#ed9d13">          git remote set-url origin &#34;https://x-access-token:${{ secrets.DEPLOY_TOKEN }}@github.com/vasylenko/serhii.vasylenko.info.git&#34;
</span><span style="color:#ed9d13">          git push --force-with-lease origin gh-pages</span><span style="color:#666">          
</span></code></pre></td></tr></table>
</div>
</div><p><img loading="lazy" src="2020-03-18-github-actions-first-impression_github-actions-events.png" alt=""  />
</p>
<h3 id="old-good-things-made-better">Old good things made better</h3>
<p>A lot of common things have been introduced to GitHubActions with some sweet additions:</p>
<ul>
<li>you can also specify different environments for your jobs in the same workflow;</li>
<li>you can use environment variables with a different visibility scope: either workflow, or job, or step;</li>
<li>you can use cache for dependencies and reuse it between workflow runs while keeping workflow directory clean;</li>
<li>you can trigger a workflow by repo events and have a quite complex conditional logic or filters (if needed), external webhooks and by a schedule;</li>
<li>you can pass artifacts between jobs inside a workflow with ease - Github provides simple actions for this, so you don&rsquo;t need to dance around temporary directories or files;</li>
<li>and much more</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>AWS SAA exam results</title>
      <link>https://serhii.vasylenko.info/2020/03/15/aws-solutions-architect-associate-exam-tips.html</link>
      <pubDate>Sun, 15 Mar 2020 20:16:20 +0000</pubDate>
      
      <guid>https://serhii.vasylenko.info/2020/03/15/aws-solutions-architect-associate-exam-tips.html</guid>
      <description>Sharing my AWS SAA exam results</description>
      <content:encoded><![CDATA[<h3 id="926-out-of-1000">926 out of 1000</h3>
<p>Last week I&rsquo;ve successfully passed AWS SAA exam with 926 points from 1000 possible. I can&rsquo;t help saying this and showing off my <a href="https://www.youracclaim.com/badges/7c6c7a70-63f5-4854-97ab-e5c1ad251231">verification page</a>{:target=&quot;_blank&quot;}, just because I am very happy so please excuse me my bragging.</p>
<h3 id="what-helped-me">What helped me</h3>
<p>But I would like to share some advices and tips with anyone who reads this and wants to pass the exam. I mean, I could just twit about it if that was only about saying &ldquo;hey look at me!&rdquo;, right?</p>
<p>It took me a month of intensive studying and here is what helped me:</p>
<ol>
<li>
<p><strong>Video course</strong> at CloudGuru - <a href="https://acloud.guru/learn/aws-certified-solutions-architect-associate">AWS Certified Solutions Architect Associate</a>{:target=&quot;_blank&quot;}.</p>
<p>Price: $50 for a monthly subscription.</p>
<p>Tips: They have a 7 days free trial, which is actually quite enough to view the whole course. But I strongly recommend purchasing a full month, because it is better to view the lectures gradually during couple of weeks for better learning. Plus they have a nice exam simulator where you can practice several times.</p>
</li>
<li>
<p><strong>Practice Tests</strong> set at Udemy - <a href="https://www.udemy.com/course/aws-certified-solutions-architect-associate-amazon-practice-exams-saa-c02/">AWS Certified Solutions Architect Associate Practice Exams</a>{:target=&quot;_blank&quot;}.</p>
<p>Price: $40 or only $12 if you&rsquo;re lucky to get it during a sale. But they make sales quite often and they frequently provide  discuounts for new students. I purchaced it for $12.</p>
<p>Tips: practice tests are very useful, do not skip buying them. You will find your weak spots and also learn a lot by passing these tests. This particular set has a quite good explanations for each question.</p>
</li>
<li>
<p><strong>Exam Guide</strong> at O&rsquo;relly Media <a href="https://learning.oreilly.com/library/view/aws-certified-solutions/9781260108262/">AWS Certified Solutions Architect Associate All-in-One Exam Guide</a>{:target=&quot;_blank&quot;}.</p>
<p>Price: this one can be easily read during 10 days free trial period :wink:</p>
<p>Tips: The new exam version is released on 23rd of March, so it is better to find a new updated version of exam guide. And I suggest reading the guide after the video course or vise versa, but do not mix them.</p>
</li>
<li>
<p><strong>Making notes</strong>. Seriously, note taking helps you memorize better. Do not skip it, and note your video courses as well as exam guide. Later, you will find your notes very helpful before the exam day - they will fresh up your memory.</p>
</li>
</ol>
<p>Thank you for reading down to this point. I hope my advices were helpful and you will pass the exam!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
