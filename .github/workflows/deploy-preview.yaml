name: Deploy to Preview
on:
  pull_request:

env:
  HUGO_VERSION: 0.101.0
  CONTENT_DIR: publishdir
  CF_PREVIEW_PROJECT_NAME: devdosvid-preview
  DEPLOY_ENV_NAME: Preview
  BASE_BLOG_ADDRESS: "https://devdosvid.blog"

jobs:
  build:
    name: Build the blog
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{steps.check_updated_posts.outputs.has_updates}}
      blog_post_updates: ${{steps.check_updated_posts.outputs.blog_post_updates}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Check if we have new or updated blog posts
        id: check_updated_posts
        run: |
          blog_post_updates=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.pull_request.base.sha }}..${{ github.event.push.after }} | { grep 'content/posts/' || test $? = 1; } | cut -d '/' -f1-4 | uniq )
          if [[ -n $blog_post_updates ]]
          then
            echo "::set-output name=has_updates::true"
            echo "::set-output name=blog_post_updates::$(echo $blog_post_updates)"            
          fi

      - name: Install Hugo
        run: wget -q -c "https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_${{ env.HUGO_VERSION }}_Linux-64bit.tar.gz" -O - | tar -xz

      - name: Build blog
        run: ./hugo --environment development --baseURL="" --debug --templateMetrics --templateMetricsHints

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CONTENT_DIR }}
          path: ${{ env.CONTENT_DIR }}

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    outputs:
      cf_preview_url: ${{ steps.deploy_to_cloudflare.outputs.url }}
    steps:
      - name: Get the new website content
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.CONTENT_DIR }}
          path: ./${{ env.CONTENT_DIR }}

      - name: Create GH Deployment object
        uses: octokit/request-action@v2.x
        id: create_deployment
        with:
          route: POST /repos/{repo}/deployments
          required_contexts: "[]"
          owner: ${{ github.repository_owner }}
          repo: ${{ github.repository }}
          ref: ${{ github.head_ref }}
          auto_merge: false
          environment: ${{ env.DEPLOY_ENV_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to CloudFlare
        uses: cloudflare/pages-action@1
        id: deploy_to_cloudflare
        with:
          apiToken: ${{ secrets.CLOUDFLARE_GH_PAGES_ACTION_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ env.CF_PREVIEW_PROJECT_NAME }}
          directory: ${{ env.CONTENT_DIR }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Deployment Status
        uses: octokit/request-action@v2.x
        id: set_deployment_status
        with:
          route: POST /repos/{repo}/deployments/{deployment_id}/statuses
          deployment_id: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          owner: ${{ github.repository_owner }}
          repo: ${{ github.repository }}
          state: success
          environment: ${{ env.DEPLOY_ENV_NAME }}
          environment_url: ${{ steps.deploy_to_cloudflare.outputs.url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  psi_tests:
    name: PSI tests
    runs-on: ubuntu-latest
    needs: [build,deploy]
    if: ${{ needs.build.outputs.has_updates }} == true
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: | 
          wget -q -c "https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_${{ env.HUGO_VERSION }}_Linux-64bit.tar.gz" -O - | tar -xz
          sudo npm install --silent --location=global psi

      - name: Run PSI tests
        id: psi_test
        run: |
          ./hugo list all > all_blog_posts
          for blog_post in ${{ needs.build.outputs.blog_post_updates }}
          do
             blog_post_url=$(grep $blog_post all_blog_posts | awk -F ',' '{print $(NF)}'| sed "s,${{ env.BASE_BLOG_ADDRESS }},${{ needs.deploy.outputs.cf_preview_url }},g" )
             echo "### $blog_post_url" >> gh_api_post_body
             for strategy in mobile desktop
             do
               echo -e "\n" >> gh_api_post_body
               echo -e "### ${strategy^} tests\n" >> gh_api_post_body
               echo "Metric | Value" >> gh_api_post_body
               echo "------ | -----" >> gh_api_post_body
               psi $blog_post_url --key ${{ secrets.GOOGLE_PSI_API_KEY }} --strategy $strategy --format json|jq -r '.ruleResults|to_entries[]|[.key,.value]|@csv' |tr -d '"'|tr ',' '|' >> gh_api_post_body
             done
          done
          echo "::set-output name=api_post_body::$(cat gh_api_post_body | sed 's/$/\\n/' | tr -d '\n')"

      - name: Add deployment link and test URL to the PR comment
        run: |
          curl -s -i -o /dev/null -w "%{http_code}" \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H 'Content-Type: text/x-markdown' \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
          -d '{"body":"${{ steps.psi_test.outputs.api_post_body }}"}' \
          > response_code.txt
          grep -q 201 response_code.txt || exit 1
    # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment--status-codes
